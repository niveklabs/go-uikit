// Code generated by go generate; DO NOT EDIT.

package uikit

import (
	"github.com/maxence-charriere/go-app/v9/pkg/app"
)

// UILeader is a component that creates dot leaders for pricing menus or tables of contents
type UILeader interface {
	app.UI

	// Class adds a CSS class to the leader.
	Class(v string) UILeader

	// Content sets the main content.
	Content(elems ...app.UI) UILeader

	// Option sets a component option.
	Option(k string, v interface{}) UILeader
}

type leader struct {
	app.Compo

	Iclass   string
	Icontent []app.UI

	Ioptions map[string]interface{}
}

// Leader returns a leader component.
func Leader() UILeader {
	return &leader{}
}

func (l *leader) Class(v string) UILeader {
	if l.Iclass != "" {
		l.Iclass += " "
	}

	l.Iclass += v
	return l
}

func (l *leader) Content(elems ...app.UI) UILeader {
	l.Icontent = app.FilterUIElems(elems...)
	return l
}

func (l *leader) Option(k string, v interface{}) UILeader {
	if l.Ioptions == nil {
		l.Ioptions = make(map[string]interface{}, 0)
	}
	l.Ioptions[k] = v
	return l
}

func (l *leader) Render() app.UI {
	opts, _ := JSONString(l.Ioptions)

	return app.Div().
		DataSet("uk-leader", opts).
		Class(l.Iclass).
		Body(l.Icontent...)
}
