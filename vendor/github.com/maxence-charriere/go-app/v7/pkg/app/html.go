package app

// Code generated by go generate; DO NOT EDIT.

import (
	"fmt"
)

// HTMLA is the interface that describes a <a> HTML element.
type HTMLA interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLA

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLA

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLA

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLA

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLA

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLA

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLA

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLA

	// Download specifies that the target will be downloaded when a user clicks on the hyperlink.
	Download(v bool) HTMLA

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLA

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLA

	// Href specifies the URL of the page the link goes to.
	Href(v string) HTMLA

	// HrefLang specifies the language of the linked document.
	HrefLang(v string) HTMLA

	// ID specifies a unique id for an element.
	ID(v string) HTMLA

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLA

	// Media specifies what media/device the linked document is optimized for.
	Media(v string) HTMLA

	// Ping specifies a list of URLs to be notified if the user follows the hyperlink.
	Ping(v string) HTMLA

	// Rel specifies the relationship between the current document and the linked document.
	Rel(v string) HTMLA

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLA

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLA

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLA

	// Target specifies the target for where to open the linked document or where to submit the form.
	Target(v string) HTMLA

	// Title specifies extra information about an element.
	Title(v string) HTMLA

	// Type specifies the type of element.
	Type(v string) HTMLA

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLA

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLA

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLA

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLA

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLA

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLA

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLA

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLA

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLA

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLA

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLA

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLA

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLA

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLA

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLA

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLA

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLA

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLA

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLA

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLA

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLA

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLA

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLA

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLA

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLA

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLA

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLA

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLA

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLA

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLA

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLA

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLA
}

// A returns an HTML element that defines a hyperlink.
func A() HTMLA {
	e := &htmlA{
		elem: elem{
			tag:         "a",
			selfClosing: false,
		},
	}

	return e
}

type htmlA struct {
	elem
}

func (e *htmlA) Body(elems ...UI) HTMLA {
	e.setBody(elems...)
	return e
}

func (e *htmlA) Text(v interface{}) HTMLA {
	return e.Body(Text(v))
}

func (e *htmlA) AccessKey(v string) HTMLA {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlA) Aria(k string, v interface{}) HTMLA {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlA) Class(v string) HTMLA {
	e.setAttr("class", v)
	return e
}

func (e *htmlA) ContentEditable(v bool) HTMLA {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlA) DataSet(k string, v interface{}) HTMLA {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlA) Dir(v string) HTMLA {
	e.setAttr("dir", v)
	return e
}

func (e *htmlA) Download(v bool) HTMLA {
	e.setAttr("download", v)
	return e
}

func (e *htmlA) Draggable(v bool) HTMLA {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlA) Hidden(v bool) HTMLA {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlA) Href(v string) HTMLA {
	e.setAttr("href", StaticResource(v))
	return e
}

func (e *htmlA) HrefLang(v string) HTMLA {
	e.setAttr("hreflang", v)
	return e
}

func (e *htmlA) ID(v string) HTMLA {
	e.setAttr("id", v)
	return e
}

func (e *htmlA) Lang(v string) HTMLA {
	e.setAttr("lang", v)
	return e
}

func (e *htmlA) Media(v string) HTMLA {
	e.setAttr("media", v)
	return e
}

func (e *htmlA) Ping(v string) HTMLA {
	e.setAttr("ping", v)
	return e
}

func (e *htmlA) Rel(v string) HTMLA {
	e.setAttr("rel", v)
	return e
}

func (e *htmlA) Spellcheck(v bool) HTMLA {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlA) Style(k, v string) HTMLA {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlA) TabIndex(v int) HTMLA {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlA) Target(v string) HTMLA {
	e.setAttr("target", v)
	return e
}

func (e *htmlA) Title(v string) HTMLA {
	e.setAttr("title", v)
	return e
}

func (e *htmlA) Type(v string) HTMLA {
	e.setAttr("type", v)
	return e
}

func (e *htmlA) OnBlur(h EventHandler) HTMLA {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlA) OnChange(h EventHandler) HTMLA {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlA) OnClick(h EventHandler) HTMLA {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlA) OnContextMenu(h EventHandler) HTMLA {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlA) OnCopy(h EventHandler) HTMLA {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlA) OnCut(h EventHandler) HTMLA {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlA) OnDblClick(h EventHandler) HTMLA {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlA) OnDrag(h EventHandler) HTMLA {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlA) OnDragEnd(h EventHandler) HTMLA {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlA) OnDragEnter(h EventHandler) HTMLA {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlA) OnDragLeave(h EventHandler) HTMLA {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlA) OnDragOver(h EventHandler) HTMLA {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlA) OnDragStart(h EventHandler) HTMLA {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlA) OnDrop(h EventHandler) HTMLA {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlA) OnFocus(h EventHandler) HTMLA {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlA) OnInput(h EventHandler) HTMLA {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlA) OnInvalid(h EventHandler) HTMLA {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlA) OnKeyDown(h EventHandler) HTMLA {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlA) OnKeyPress(h EventHandler) HTMLA {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlA) OnKeyup(h EventHandler) HTMLA {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlA) OnMouseDown(h EventHandler) HTMLA {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlA) OnMouseMove(h EventHandler) HTMLA {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlA) OnMouseOut(h EventHandler) HTMLA {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlA) OnMouseOver(h EventHandler) HTMLA {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlA) OnMouseUp(h EventHandler) HTMLA {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlA) OnPaste(h EventHandler) HTMLA {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlA) OnReset(h EventHandler) HTMLA {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlA) OnScroll(h EventHandler) HTMLA {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlA) OnSearch(h EventHandler) HTMLA {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlA) OnSelect(h EventHandler) HTMLA {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlA) OnSubmit(h EventHandler) HTMLA {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlA) OnWheel(h EventHandler) HTMLA {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLAbbr is the interface that describes a <abbr> HTML element.
type HTMLAbbr interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLAbbr

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLAbbr

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLAbbr

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLAbbr

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLAbbr

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLAbbr

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLAbbr

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLAbbr

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLAbbr

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLAbbr

	// ID specifies a unique id for an element.
	ID(v string) HTMLAbbr

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLAbbr

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLAbbr

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLAbbr

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLAbbr

	// Title specifies extra information about an element.
	Title(v string) HTMLAbbr

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLAbbr

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLAbbr

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLAbbr

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLAbbr

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLAbbr

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLAbbr

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLAbbr

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLAbbr

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLAbbr

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLAbbr

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLAbbr

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLAbbr

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLAbbr

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLAbbr

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLAbbr

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLAbbr

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLAbbr

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLAbbr

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLAbbr

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLAbbr

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLAbbr

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLAbbr

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLAbbr

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLAbbr

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLAbbr

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLAbbr

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLAbbr

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLAbbr

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLAbbr

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLAbbr

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLAbbr

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLAbbr
}

// Abbr returns an HTML element that defines an abbreviation or an acronym.
func Abbr() HTMLAbbr {
	e := &htmlAbbr{
		elem: elem{
			tag:         "abbr",
			selfClosing: false,
		},
	}

	return e
}

type htmlAbbr struct {
	elem
}

func (e *htmlAbbr) Body(elems ...UI) HTMLAbbr {
	e.setBody(elems...)
	return e
}

func (e *htmlAbbr) Text(v interface{}) HTMLAbbr {
	return e.Body(Text(v))
}

func (e *htmlAbbr) AccessKey(v string) HTMLAbbr {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlAbbr) Aria(k string, v interface{}) HTMLAbbr {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlAbbr) Class(v string) HTMLAbbr {
	e.setAttr("class", v)
	return e
}

func (e *htmlAbbr) ContentEditable(v bool) HTMLAbbr {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlAbbr) DataSet(k string, v interface{}) HTMLAbbr {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlAbbr) Dir(v string) HTMLAbbr {
	e.setAttr("dir", v)
	return e
}

func (e *htmlAbbr) Draggable(v bool) HTMLAbbr {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlAbbr) Hidden(v bool) HTMLAbbr {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlAbbr) ID(v string) HTMLAbbr {
	e.setAttr("id", v)
	return e
}

func (e *htmlAbbr) Lang(v string) HTMLAbbr {
	e.setAttr("lang", v)
	return e
}

func (e *htmlAbbr) Spellcheck(v bool) HTMLAbbr {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlAbbr) Style(k, v string) HTMLAbbr {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlAbbr) TabIndex(v int) HTMLAbbr {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlAbbr) Title(v string) HTMLAbbr {
	e.setAttr("title", v)
	return e
}

func (e *htmlAbbr) OnBlur(h EventHandler) HTMLAbbr {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlAbbr) OnChange(h EventHandler) HTMLAbbr {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlAbbr) OnClick(h EventHandler) HTMLAbbr {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlAbbr) OnContextMenu(h EventHandler) HTMLAbbr {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlAbbr) OnCopy(h EventHandler) HTMLAbbr {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlAbbr) OnCut(h EventHandler) HTMLAbbr {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlAbbr) OnDblClick(h EventHandler) HTMLAbbr {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlAbbr) OnDrag(h EventHandler) HTMLAbbr {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlAbbr) OnDragEnd(h EventHandler) HTMLAbbr {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlAbbr) OnDragEnter(h EventHandler) HTMLAbbr {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlAbbr) OnDragLeave(h EventHandler) HTMLAbbr {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlAbbr) OnDragOver(h EventHandler) HTMLAbbr {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlAbbr) OnDragStart(h EventHandler) HTMLAbbr {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlAbbr) OnDrop(h EventHandler) HTMLAbbr {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlAbbr) OnFocus(h EventHandler) HTMLAbbr {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlAbbr) OnInput(h EventHandler) HTMLAbbr {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlAbbr) OnInvalid(h EventHandler) HTMLAbbr {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlAbbr) OnKeyDown(h EventHandler) HTMLAbbr {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlAbbr) OnKeyPress(h EventHandler) HTMLAbbr {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlAbbr) OnKeyup(h EventHandler) HTMLAbbr {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlAbbr) OnMouseDown(h EventHandler) HTMLAbbr {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlAbbr) OnMouseMove(h EventHandler) HTMLAbbr {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlAbbr) OnMouseOut(h EventHandler) HTMLAbbr {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlAbbr) OnMouseOver(h EventHandler) HTMLAbbr {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlAbbr) OnMouseUp(h EventHandler) HTMLAbbr {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlAbbr) OnPaste(h EventHandler) HTMLAbbr {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlAbbr) OnReset(h EventHandler) HTMLAbbr {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlAbbr) OnScroll(h EventHandler) HTMLAbbr {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlAbbr) OnSearch(h EventHandler) HTMLAbbr {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlAbbr) OnSelect(h EventHandler) HTMLAbbr {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlAbbr) OnSubmit(h EventHandler) HTMLAbbr {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlAbbr) OnWheel(h EventHandler) HTMLAbbr {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLAddress is the interface that describes a <address> HTML element.
type HTMLAddress interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLAddress

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLAddress

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLAddress

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLAddress

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLAddress

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLAddress

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLAddress

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLAddress

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLAddress

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLAddress

	// ID specifies a unique id for an element.
	ID(v string) HTMLAddress

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLAddress

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLAddress

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLAddress

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLAddress

	// Title specifies extra information about an element.
	Title(v string) HTMLAddress

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLAddress

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLAddress

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLAddress

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLAddress

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLAddress

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLAddress

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLAddress

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLAddress

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLAddress

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLAddress

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLAddress

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLAddress

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLAddress

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLAddress

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLAddress

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLAddress

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLAddress

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLAddress

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLAddress

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLAddress

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLAddress

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLAddress

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLAddress

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLAddress

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLAddress

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLAddress

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLAddress

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLAddress

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLAddress

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLAddress

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLAddress

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLAddress
}

// Address returns an HTML element that defines contact information for the author/owner of a document.
func Address() HTMLAddress {
	e := &htmlAddress{
		elem: elem{
			tag:         "address",
			selfClosing: false,
		},
	}

	return e
}

type htmlAddress struct {
	elem
}

func (e *htmlAddress) Body(elems ...UI) HTMLAddress {
	e.setBody(elems...)
	return e
}

func (e *htmlAddress) Text(v interface{}) HTMLAddress {
	return e.Body(Text(v))
}

func (e *htmlAddress) AccessKey(v string) HTMLAddress {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlAddress) Aria(k string, v interface{}) HTMLAddress {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlAddress) Class(v string) HTMLAddress {
	e.setAttr("class", v)
	return e
}

func (e *htmlAddress) ContentEditable(v bool) HTMLAddress {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlAddress) DataSet(k string, v interface{}) HTMLAddress {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlAddress) Dir(v string) HTMLAddress {
	e.setAttr("dir", v)
	return e
}

func (e *htmlAddress) Draggable(v bool) HTMLAddress {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlAddress) Hidden(v bool) HTMLAddress {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlAddress) ID(v string) HTMLAddress {
	e.setAttr("id", v)
	return e
}

func (e *htmlAddress) Lang(v string) HTMLAddress {
	e.setAttr("lang", v)
	return e
}

func (e *htmlAddress) Spellcheck(v bool) HTMLAddress {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlAddress) Style(k, v string) HTMLAddress {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlAddress) TabIndex(v int) HTMLAddress {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlAddress) Title(v string) HTMLAddress {
	e.setAttr("title", v)
	return e
}

func (e *htmlAddress) OnBlur(h EventHandler) HTMLAddress {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlAddress) OnChange(h EventHandler) HTMLAddress {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlAddress) OnClick(h EventHandler) HTMLAddress {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlAddress) OnContextMenu(h EventHandler) HTMLAddress {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlAddress) OnCopy(h EventHandler) HTMLAddress {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlAddress) OnCut(h EventHandler) HTMLAddress {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlAddress) OnDblClick(h EventHandler) HTMLAddress {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlAddress) OnDrag(h EventHandler) HTMLAddress {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlAddress) OnDragEnd(h EventHandler) HTMLAddress {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlAddress) OnDragEnter(h EventHandler) HTMLAddress {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlAddress) OnDragLeave(h EventHandler) HTMLAddress {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlAddress) OnDragOver(h EventHandler) HTMLAddress {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlAddress) OnDragStart(h EventHandler) HTMLAddress {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlAddress) OnDrop(h EventHandler) HTMLAddress {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlAddress) OnFocus(h EventHandler) HTMLAddress {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlAddress) OnInput(h EventHandler) HTMLAddress {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlAddress) OnInvalid(h EventHandler) HTMLAddress {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlAddress) OnKeyDown(h EventHandler) HTMLAddress {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlAddress) OnKeyPress(h EventHandler) HTMLAddress {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlAddress) OnKeyup(h EventHandler) HTMLAddress {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlAddress) OnMouseDown(h EventHandler) HTMLAddress {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlAddress) OnMouseMove(h EventHandler) HTMLAddress {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlAddress) OnMouseOut(h EventHandler) HTMLAddress {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlAddress) OnMouseOver(h EventHandler) HTMLAddress {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlAddress) OnMouseUp(h EventHandler) HTMLAddress {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlAddress) OnPaste(h EventHandler) HTMLAddress {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlAddress) OnReset(h EventHandler) HTMLAddress {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlAddress) OnScroll(h EventHandler) HTMLAddress {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlAddress) OnSearch(h EventHandler) HTMLAddress {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlAddress) OnSelect(h EventHandler) HTMLAddress {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlAddress) OnSubmit(h EventHandler) HTMLAddress {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlAddress) OnWheel(h EventHandler) HTMLAddress {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLArea is the interface that describes a <area> HTML element.
type HTMLArea interface {
	UI

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLArea

	// Alt specifies an alternate text when the original element fails to display.
	Alt(v string) HTMLArea

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLArea

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLArea

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLArea

	// Coords specifies the coordinates of the area.
	Coords(v string) HTMLArea

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLArea

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLArea

	// Download specifies that the target will be downloaded when a user clicks on the hyperlink.
	Download(v bool) HTMLArea

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLArea

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLArea

	// Href specifies the URL of the page the link goes to.
	Href(v string) HTMLArea

	// HrefLang specifies the language of the linked document.
	HrefLang(v string) HTMLArea

	// ID specifies a unique id for an element.
	ID(v string) HTMLArea

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLArea

	// Media specifies what media/device the linked document is optimized for.
	Media(v string) HTMLArea

	// Rel specifies the relationship between the current document and the linked document.
	Rel(v string) HTMLArea

	// Shape specifies the shape of the area.
	Shape(v string) HTMLArea

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLArea

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLArea

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLArea

	// Target specifies the target for where to open the linked document or where to submit the form.
	Target(v string) HTMLArea

	// Title specifies extra information about an element.
	Title(v string) HTMLArea

	// Type specifies the type of element.
	Type(v string) HTMLArea

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLArea

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLArea

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLArea

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLArea

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLArea

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLArea

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLArea

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLArea

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLArea

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLArea

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLArea

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLArea

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLArea

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLArea

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLArea

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLArea

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLArea

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLArea

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLArea

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLArea

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLArea

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLArea

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLArea

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLArea

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLArea

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLArea

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLArea

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLArea

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLArea

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLArea

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLArea

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLArea
}

// Area returns an HTML element that defines an area inside an image-map.
func Area() HTMLArea {
	e := &htmlArea{
		elem: elem{
			tag:         "area",
			selfClosing: true,
		},
	}

	return e
}

type htmlArea struct {
	elem
}

func (e *htmlArea) AccessKey(v string) HTMLArea {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlArea) Alt(v string) HTMLArea {
	e.setAttr("alt", v)
	return e
}

func (e *htmlArea) Aria(k string, v interface{}) HTMLArea {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlArea) Class(v string) HTMLArea {
	e.setAttr("class", v)
	return e
}

func (e *htmlArea) ContentEditable(v bool) HTMLArea {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlArea) Coords(v string) HTMLArea {
	e.setAttr("coords", v)
	return e
}

func (e *htmlArea) DataSet(k string, v interface{}) HTMLArea {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlArea) Dir(v string) HTMLArea {
	e.setAttr("dir", v)
	return e
}

func (e *htmlArea) Download(v bool) HTMLArea {
	e.setAttr("download", v)
	return e
}

func (e *htmlArea) Draggable(v bool) HTMLArea {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlArea) Hidden(v bool) HTMLArea {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlArea) Href(v string) HTMLArea {
	e.setAttr("href", StaticResource(v))
	return e
}

func (e *htmlArea) HrefLang(v string) HTMLArea {
	e.setAttr("hreflang", v)
	return e
}

func (e *htmlArea) ID(v string) HTMLArea {
	e.setAttr("id", v)
	return e
}

func (e *htmlArea) Lang(v string) HTMLArea {
	e.setAttr("lang", v)
	return e
}

func (e *htmlArea) Media(v string) HTMLArea {
	e.setAttr("media", v)
	return e
}

func (e *htmlArea) Rel(v string) HTMLArea {
	e.setAttr("rel", v)
	return e
}

func (e *htmlArea) Shape(v string) HTMLArea {
	e.setAttr("shape", v)
	return e
}

func (e *htmlArea) Spellcheck(v bool) HTMLArea {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlArea) Style(k, v string) HTMLArea {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlArea) TabIndex(v int) HTMLArea {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlArea) Target(v string) HTMLArea {
	e.setAttr("target", v)
	return e
}

func (e *htmlArea) Title(v string) HTMLArea {
	e.setAttr("title", v)
	return e
}

func (e *htmlArea) Type(v string) HTMLArea {
	e.setAttr("type", v)
	return e
}

func (e *htmlArea) OnBlur(h EventHandler) HTMLArea {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlArea) OnChange(h EventHandler) HTMLArea {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlArea) OnClick(h EventHandler) HTMLArea {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlArea) OnContextMenu(h EventHandler) HTMLArea {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlArea) OnCopy(h EventHandler) HTMLArea {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlArea) OnCut(h EventHandler) HTMLArea {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlArea) OnDblClick(h EventHandler) HTMLArea {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlArea) OnDrag(h EventHandler) HTMLArea {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlArea) OnDragEnd(h EventHandler) HTMLArea {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlArea) OnDragEnter(h EventHandler) HTMLArea {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlArea) OnDragLeave(h EventHandler) HTMLArea {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlArea) OnDragOver(h EventHandler) HTMLArea {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlArea) OnDragStart(h EventHandler) HTMLArea {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlArea) OnDrop(h EventHandler) HTMLArea {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlArea) OnFocus(h EventHandler) HTMLArea {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlArea) OnInput(h EventHandler) HTMLArea {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlArea) OnInvalid(h EventHandler) HTMLArea {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlArea) OnKeyDown(h EventHandler) HTMLArea {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlArea) OnKeyPress(h EventHandler) HTMLArea {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlArea) OnKeyup(h EventHandler) HTMLArea {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlArea) OnMouseDown(h EventHandler) HTMLArea {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlArea) OnMouseMove(h EventHandler) HTMLArea {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlArea) OnMouseOut(h EventHandler) HTMLArea {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlArea) OnMouseOver(h EventHandler) HTMLArea {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlArea) OnMouseUp(h EventHandler) HTMLArea {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlArea) OnPaste(h EventHandler) HTMLArea {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlArea) OnReset(h EventHandler) HTMLArea {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlArea) OnScroll(h EventHandler) HTMLArea {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlArea) OnSearch(h EventHandler) HTMLArea {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlArea) OnSelect(h EventHandler) HTMLArea {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlArea) OnSubmit(h EventHandler) HTMLArea {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlArea) OnWheel(h EventHandler) HTMLArea {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLArticle is the interface that describes a <article> HTML element.
type HTMLArticle interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLArticle

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLArticle

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLArticle

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLArticle

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLArticle

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLArticle

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLArticle

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLArticle

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLArticle

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLArticle

	// ID specifies a unique id for an element.
	ID(v string) HTMLArticle

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLArticle

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLArticle

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLArticle

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLArticle

	// Title specifies extra information about an element.
	Title(v string) HTMLArticle

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLArticle

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLArticle

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLArticle

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLArticle

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLArticle

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLArticle

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLArticle

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLArticle

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLArticle

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLArticle

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLArticle

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLArticle

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLArticle

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLArticle

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLArticle

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLArticle

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLArticle

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLArticle

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLArticle

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLArticle

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLArticle

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLArticle

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLArticle

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLArticle

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLArticle

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLArticle

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLArticle

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLArticle

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLArticle

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLArticle

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLArticle

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLArticle
}

// Article returns an HTML element that defines an article.
func Article() HTMLArticle {
	e := &htmlArticle{
		elem: elem{
			tag:         "article",
			selfClosing: false,
		},
	}

	return e
}

type htmlArticle struct {
	elem
}

func (e *htmlArticle) Body(elems ...UI) HTMLArticle {
	e.setBody(elems...)
	return e
}

func (e *htmlArticle) Text(v interface{}) HTMLArticle {
	return e.Body(Text(v))
}

func (e *htmlArticle) AccessKey(v string) HTMLArticle {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlArticle) Aria(k string, v interface{}) HTMLArticle {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlArticle) Class(v string) HTMLArticle {
	e.setAttr("class", v)
	return e
}

func (e *htmlArticle) ContentEditable(v bool) HTMLArticle {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlArticle) DataSet(k string, v interface{}) HTMLArticle {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlArticle) Dir(v string) HTMLArticle {
	e.setAttr("dir", v)
	return e
}

func (e *htmlArticle) Draggable(v bool) HTMLArticle {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlArticle) Hidden(v bool) HTMLArticle {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlArticle) ID(v string) HTMLArticle {
	e.setAttr("id", v)
	return e
}

func (e *htmlArticle) Lang(v string) HTMLArticle {
	e.setAttr("lang", v)
	return e
}

func (e *htmlArticle) Spellcheck(v bool) HTMLArticle {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlArticle) Style(k, v string) HTMLArticle {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlArticle) TabIndex(v int) HTMLArticle {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlArticle) Title(v string) HTMLArticle {
	e.setAttr("title", v)
	return e
}

func (e *htmlArticle) OnBlur(h EventHandler) HTMLArticle {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlArticle) OnChange(h EventHandler) HTMLArticle {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlArticle) OnClick(h EventHandler) HTMLArticle {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlArticle) OnContextMenu(h EventHandler) HTMLArticle {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlArticle) OnCopy(h EventHandler) HTMLArticle {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlArticle) OnCut(h EventHandler) HTMLArticle {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlArticle) OnDblClick(h EventHandler) HTMLArticle {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlArticle) OnDrag(h EventHandler) HTMLArticle {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlArticle) OnDragEnd(h EventHandler) HTMLArticle {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlArticle) OnDragEnter(h EventHandler) HTMLArticle {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlArticle) OnDragLeave(h EventHandler) HTMLArticle {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlArticle) OnDragOver(h EventHandler) HTMLArticle {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlArticle) OnDragStart(h EventHandler) HTMLArticle {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlArticle) OnDrop(h EventHandler) HTMLArticle {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlArticle) OnFocus(h EventHandler) HTMLArticle {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlArticle) OnInput(h EventHandler) HTMLArticle {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlArticle) OnInvalid(h EventHandler) HTMLArticle {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlArticle) OnKeyDown(h EventHandler) HTMLArticle {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlArticle) OnKeyPress(h EventHandler) HTMLArticle {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlArticle) OnKeyup(h EventHandler) HTMLArticle {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlArticle) OnMouseDown(h EventHandler) HTMLArticle {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlArticle) OnMouseMove(h EventHandler) HTMLArticle {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlArticle) OnMouseOut(h EventHandler) HTMLArticle {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlArticle) OnMouseOver(h EventHandler) HTMLArticle {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlArticle) OnMouseUp(h EventHandler) HTMLArticle {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlArticle) OnPaste(h EventHandler) HTMLArticle {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlArticle) OnReset(h EventHandler) HTMLArticle {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlArticle) OnScroll(h EventHandler) HTMLArticle {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlArticle) OnSearch(h EventHandler) HTMLArticle {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlArticle) OnSelect(h EventHandler) HTMLArticle {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlArticle) OnSubmit(h EventHandler) HTMLArticle {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlArticle) OnWheel(h EventHandler) HTMLArticle {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLAside is the interface that describes a <aside> HTML element.
type HTMLAside interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLAside

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLAside

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLAside

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLAside

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLAside

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLAside

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLAside

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLAside

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLAside

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLAside

	// ID specifies a unique id for an element.
	ID(v string) HTMLAside

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLAside

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLAside

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLAside

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLAside

	// Title specifies extra information about an element.
	Title(v string) HTMLAside

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLAside

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLAside

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLAside

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLAside

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLAside

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLAside

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLAside

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLAside

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLAside

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLAside

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLAside

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLAside

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLAside

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLAside

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLAside

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLAside

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLAside

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLAside

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLAside

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLAside

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLAside

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLAside

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLAside

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLAside

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLAside

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLAside

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLAside

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLAside

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLAside

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLAside

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLAside

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLAside
}

// Aside returns an HTML element that defines content aside from the page content.
func Aside() HTMLAside {
	e := &htmlAside{
		elem: elem{
			tag:         "aside",
			selfClosing: false,
		},
	}

	return e
}

type htmlAside struct {
	elem
}

func (e *htmlAside) Body(elems ...UI) HTMLAside {
	e.setBody(elems...)
	return e
}

func (e *htmlAside) Text(v interface{}) HTMLAside {
	return e.Body(Text(v))
}

func (e *htmlAside) AccessKey(v string) HTMLAside {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlAside) Aria(k string, v interface{}) HTMLAside {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlAside) Class(v string) HTMLAside {
	e.setAttr("class", v)
	return e
}

func (e *htmlAside) ContentEditable(v bool) HTMLAside {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlAside) DataSet(k string, v interface{}) HTMLAside {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlAside) Dir(v string) HTMLAside {
	e.setAttr("dir", v)
	return e
}

func (e *htmlAside) Draggable(v bool) HTMLAside {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlAside) Hidden(v bool) HTMLAside {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlAside) ID(v string) HTMLAside {
	e.setAttr("id", v)
	return e
}

func (e *htmlAside) Lang(v string) HTMLAside {
	e.setAttr("lang", v)
	return e
}

func (e *htmlAside) Spellcheck(v bool) HTMLAside {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlAside) Style(k, v string) HTMLAside {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlAside) TabIndex(v int) HTMLAside {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlAside) Title(v string) HTMLAside {
	e.setAttr("title", v)
	return e
}

func (e *htmlAside) OnBlur(h EventHandler) HTMLAside {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlAside) OnChange(h EventHandler) HTMLAside {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlAside) OnClick(h EventHandler) HTMLAside {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlAside) OnContextMenu(h EventHandler) HTMLAside {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlAside) OnCopy(h EventHandler) HTMLAside {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlAside) OnCut(h EventHandler) HTMLAside {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlAside) OnDblClick(h EventHandler) HTMLAside {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlAside) OnDrag(h EventHandler) HTMLAside {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlAside) OnDragEnd(h EventHandler) HTMLAside {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlAside) OnDragEnter(h EventHandler) HTMLAside {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlAside) OnDragLeave(h EventHandler) HTMLAside {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlAside) OnDragOver(h EventHandler) HTMLAside {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlAside) OnDragStart(h EventHandler) HTMLAside {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlAside) OnDrop(h EventHandler) HTMLAside {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlAside) OnFocus(h EventHandler) HTMLAside {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlAside) OnInput(h EventHandler) HTMLAside {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlAside) OnInvalid(h EventHandler) HTMLAside {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlAside) OnKeyDown(h EventHandler) HTMLAside {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlAside) OnKeyPress(h EventHandler) HTMLAside {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlAside) OnKeyup(h EventHandler) HTMLAside {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlAside) OnMouseDown(h EventHandler) HTMLAside {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlAside) OnMouseMove(h EventHandler) HTMLAside {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlAside) OnMouseOut(h EventHandler) HTMLAside {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlAside) OnMouseOver(h EventHandler) HTMLAside {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlAside) OnMouseUp(h EventHandler) HTMLAside {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlAside) OnPaste(h EventHandler) HTMLAside {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlAside) OnReset(h EventHandler) HTMLAside {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlAside) OnScroll(h EventHandler) HTMLAside {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlAside) OnSearch(h EventHandler) HTMLAside {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlAside) OnSelect(h EventHandler) HTMLAside {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlAside) OnSubmit(h EventHandler) HTMLAside {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlAside) OnWheel(h EventHandler) HTMLAside {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLAudio is the interface that describes a <audio> HTML element.
type HTMLAudio interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLAudio

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLAudio

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLAudio

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLAudio

	// AutoPlay specifies that the audio/video will start playing as soon as it is ready.
	AutoPlay(v bool) HTMLAudio

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLAudio

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLAudio

	// Controls specifies that audio/video controls should be displayed (such as a play/pause button etc).
	Controls(v bool) HTMLAudio

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLAudio

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLAudio

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLAudio

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLAudio

	// ID specifies a unique id for an element.
	ID(v string) HTMLAudio

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLAudio

	// Loop specifies that the audio/video will start over again, every time it is finished.
	Loop(v bool) HTMLAudio

	// Muted specifies that the audio output of the video should be muted.
	Muted(v bool) HTMLAudio

	// Preload specifies if and how the author thinks the audio/video should be loaded when the page loads.
	Preload(v string) HTMLAudio

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLAudio

	// Src specifies the URL of the media file.
	Src(v string) HTMLAudio

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLAudio

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLAudio

	// Title specifies extra information about an element.
	Title(v string) HTMLAudio

	// OnAbort calls the given handler on abort.
	OnAbort(h EventHandler) HTMLAudio

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLAudio

	// OnCanPlay calls the given handler when a file is ready to start playing (when it has buffered enough to begin).
	OnCanPlay(h EventHandler) HTMLAudio

	// OnCanPlayThrough calls the given handler when a file can be played all the way to the end without pausing for buffering.
	OnCanPlayThrough(h EventHandler) HTMLAudio

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLAudio

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLAudio

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLAudio

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLAudio

	// OnCueChange calls the given handler when the cue changes in a track element.
	OnCueChange(h EventHandler) HTMLAudio

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLAudio

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLAudio

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLAudio

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLAudio

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLAudio

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLAudio

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLAudio

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLAudio

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLAudio

	// OnDurationChange calls the given handler when the length of the media changes.
	OnDurationChange(h EventHandler) HTMLAudio

	// OnEmptied calls the given handler when something bad happens and the file is suddenly unavailable (like unexpectedly disconnects).
	OnEmptied(h EventHandler) HTMLAudio

	// OnEnded calls the given handler when the media has reach the end.
	OnEnded(h EventHandler) HTMLAudio

	// OnError calls the given handler when an error occurs.
	OnError(h EventHandler) HTMLAudio

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLAudio

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLAudio

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLAudio

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLAudio

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLAudio

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLAudio

	// OnLoadStart calls the given handler just as the file begins to load before anything is actually loaded.
	OnLoadStart(h EventHandler) HTMLAudio

	// OnLoadedData calls the given handler when media data is loaded.
	OnLoadedData(h EventHandler) HTMLAudio

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLAudio

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLAudio

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLAudio

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLAudio

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLAudio

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLAudio

	// OnPause calls the given handler when the media is paused either by the user or programmatically.
	OnPause(h EventHandler) HTMLAudio

	// OnPlay calls the given handler when the media is ready to start playing.
	OnPlay(h EventHandler) HTMLAudio

	// OnPlaying calls the given handler when the media actually has started playing.
	OnPlaying(h EventHandler) HTMLAudio

	// OnProgress calls the given handler when the browser is in the process of getting the media data.
	OnProgress(h EventHandler) HTMLAudio

	// OnRateChange calls the given handler each time the playback rate changes (like when a user switches to a slow motion or fast forward mode).
	OnRateChange(h EventHandler) HTMLAudio

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLAudio

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLAudio

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLAudio

	// OnSeeked calls the given handler when the seeking attribute is set to false indicating that seeking has ended.
	OnSeeked(h EventHandler) HTMLAudio

	// OnSeeking calls the given handler when the seeking attribute is set to true indicating that seeking is active.
	OnSeeking(h EventHandler) HTMLAudio

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLAudio

	// OnStalled calls the given handler when the browser is unable to fetch the media data for whatever reason.
	OnStalled(h EventHandler) HTMLAudio

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLAudio

	// OnSuspend calls the given handler when fetching the media data is stopped before it is completely loaded for whatever reason.
	OnSuspend(h EventHandler) HTMLAudio

	// OnTimeUpdate calls the given handler when the playing position has changed (like when the user fast forwards to a different point in the media).
	OnTimeUpdate(h EventHandler) HTMLAudio

	// OnVolumeChange calls the given handler each time the volume is changed which (includes setting the volume to "mute").
	OnVolumeChange(h EventHandler) HTMLAudio

	// OnWaiting calls the given handler when the media has paused but is expected to resume (like when the media pauses to buffer more data).
	OnWaiting(h EventHandler) HTMLAudio

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLAudio

	// OnloadedMetaData calls the given handler when meta data (like dimensions and duration) are loaded.
	OnloadedMetaData(h EventHandler) HTMLAudio
}

// Audio returns an HTML element that defines sound content.
func Audio() HTMLAudio {
	e := &htmlAudio{
		elem: elem{
			tag:         "audio",
			selfClosing: false,
		},
	}

	return e
}

type htmlAudio struct {
	elem
}

func (e *htmlAudio) Body(elems ...UI) HTMLAudio {
	e.setBody(elems...)
	return e
}

func (e *htmlAudio) Text(v interface{}) HTMLAudio {
	return e.Body(Text(v))
}

func (e *htmlAudio) AccessKey(v string) HTMLAudio {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlAudio) Aria(k string, v interface{}) HTMLAudio {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlAudio) AutoPlay(v bool) HTMLAudio {
	e.setAttr("autoplay", v)
	return e
}

func (e *htmlAudio) Class(v string) HTMLAudio {
	e.setAttr("class", v)
	return e
}

func (e *htmlAudio) ContentEditable(v bool) HTMLAudio {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlAudio) Controls(v bool) HTMLAudio {
	e.setAttr("controls", v)
	return e
}

func (e *htmlAudio) DataSet(k string, v interface{}) HTMLAudio {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlAudio) Dir(v string) HTMLAudio {
	e.setAttr("dir", v)
	return e
}

func (e *htmlAudio) Draggable(v bool) HTMLAudio {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlAudio) Hidden(v bool) HTMLAudio {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlAudio) ID(v string) HTMLAudio {
	e.setAttr("id", v)
	return e
}

func (e *htmlAudio) Lang(v string) HTMLAudio {
	e.setAttr("lang", v)
	return e
}

func (e *htmlAudio) Loop(v bool) HTMLAudio {
	e.setAttr("loop", v)
	return e
}

func (e *htmlAudio) Muted(v bool) HTMLAudio {
	e.setAttr("muted", v)
	return e
}

func (e *htmlAudio) Preload(v string) HTMLAudio {
	e.setAttr("preload", v)
	return e
}

func (e *htmlAudio) Spellcheck(v bool) HTMLAudio {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlAudio) Src(v string) HTMLAudio {
	e.setAttr("src", StaticResource(v))
	return e
}

func (e *htmlAudio) Style(k, v string) HTMLAudio {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlAudio) TabIndex(v int) HTMLAudio {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlAudio) Title(v string) HTMLAudio {
	e.setAttr("title", v)
	return e
}

func (e *htmlAudio) OnAbort(h EventHandler) HTMLAudio {
	e.setEventHandler("abort", h)
	return e
}

func (e *htmlAudio) OnBlur(h EventHandler) HTMLAudio {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlAudio) OnCanPlay(h EventHandler) HTMLAudio {
	e.setEventHandler("canplay", h)
	return e
}

func (e *htmlAudio) OnCanPlayThrough(h EventHandler) HTMLAudio {
	e.setEventHandler("canplaythrough", h)
	return e
}

func (e *htmlAudio) OnChange(h EventHandler) HTMLAudio {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlAudio) OnClick(h EventHandler) HTMLAudio {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlAudio) OnContextMenu(h EventHandler) HTMLAudio {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlAudio) OnCopy(h EventHandler) HTMLAudio {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlAudio) OnCueChange(h EventHandler) HTMLAudio {
	e.setEventHandler("cuechange", h)
	return e
}

func (e *htmlAudio) OnCut(h EventHandler) HTMLAudio {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlAudio) OnDblClick(h EventHandler) HTMLAudio {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlAudio) OnDrag(h EventHandler) HTMLAudio {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlAudio) OnDragEnd(h EventHandler) HTMLAudio {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlAudio) OnDragEnter(h EventHandler) HTMLAudio {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlAudio) OnDragLeave(h EventHandler) HTMLAudio {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlAudio) OnDragOver(h EventHandler) HTMLAudio {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlAudio) OnDragStart(h EventHandler) HTMLAudio {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlAudio) OnDrop(h EventHandler) HTMLAudio {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlAudio) OnDurationChange(h EventHandler) HTMLAudio {
	e.setEventHandler("durationchange", h)
	return e
}

func (e *htmlAudio) OnEmptied(h EventHandler) HTMLAudio {
	e.setEventHandler("emptied", h)
	return e
}

func (e *htmlAudio) OnEnded(h EventHandler) HTMLAudio {
	e.setEventHandler("ended", h)
	return e
}

func (e *htmlAudio) OnError(h EventHandler) HTMLAudio {
	e.setEventHandler("error", h)
	return e
}

func (e *htmlAudio) OnFocus(h EventHandler) HTMLAudio {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlAudio) OnInput(h EventHandler) HTMLAudio {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlAudio) OnInvalid(h EventHandler) HTMLAudio {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlAudio) OnKeyDown(h EventHandler) HTMLAudio {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlAudio) OnKeyPress(h EventHandler) HTMLAudio {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlAudio) OnKeyup(h EventHandler) HTMLAudio {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlAudio) OnLoadStart(h EventHandler) HTMLAudio {
	e.setEventHandler("loadstart", h)
	return e
}

func (e *htmlAudio) OnLoadedData(h EventHandler) HTMLAudio {
	e.setEventHandler("loadeddata", h)
	return e
}

func (e *htmlAudio) OnMouseDown(h EventHandler) HTMLAudio {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlAudio) OnMouseMove(h EventHandler) HTMLAudio {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlAudio) OnMouseOut(h EventHandler) HTMLAudio {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlAudio) OnMouseOver(h EventHandler) HTMLAudio {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlAudio) OnMouseUp(h EventHandler) HTMLAudio {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlAudio) OnPaste(h EventHandler) HTMLAudio {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlAudio) OnPause(h EventHandler) HTMLAudio {
	e.setEventHandler("pause", h)
	return e
}

func (e *htmlAudio) OnPlay(h EventHandler) HTMLAudio {
	e.setEventHandler("play", h)
	return e
}

func (e *htmlAudio) OnPlaying(h EventHandler) HTMLAudio {
	e.setEventHandler("playing", h)
	return e
}

func (e *htmlAudio) OnProgress(h EventHandler) HTMLAudio {
	e.setEventHandler("progress", h)
	return e
}

func (e *htmlAudio) OnRateChange(h EventHandler) HTMLAudio {
	e.setEventHandler("ratechange", h)
	return e
}

func (e *htmlAudio) OnReset(h EventHandler) HTMLAudio {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlAudio) OnScroll(h EventHandler) HTMLAudio {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlAudio) OnSearch(h EventHandler) HTMLAudio {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlAudio) OnSeeked(h EventHandler) HTMLAudio {
	e.setEventHandler("seeked", h)
	return e
}

func (e *htmlAudio) OnSeeking(h EventHandler) HTMLAudio {
	e.setEventHandler("seeking", h)
	return e
}

func (e *htmlAudio) OnSelect(h EventHandler) HTMLAudio {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlAudio) OnStalled(h EventHandler) HTMLAudio {
	e.setEventHandler("stalled", h)
	return e
}

func (e *htmlAudio) OnSubmit(h EventHandler) HTMLAudio {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlAudio) OnSuspend(h EventHandler) HTMLAudio {
	e.setEventHandler("suspend", h)
	return e
}

func (e *htmlAudio) OnTimeUpdate(h EventHandler) HTMLAudio {
	e.setEventHandler("timeupdate", h)
	return e
}

func (e *htmlAudio) OnVolumeChange(h EventHandler) HTMLAudio {
	e.setEventHandler("volumechange", h)
	return e
}

func (e *htmlAudio) OnWaiting(h EventHandler) HTMLAudio {
	e.setEventHandler("waiting", h)
	return e
}

func (e *htmlAudio) OnWheel(h EventHandler) HTMLAudio {
	e.setEventHandler("wheel", h)
	return e
}

func (e *htmlAudio) OnloadedMetaData(h EventHandler) HTMLAudio {
	e.setEventHandler("loadedmetadata", h)
	return e
}

// HTMLB is the interface that describes a <b> HTML element.
type HTMLB interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLB

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLB

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLB

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLB

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLB

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLB

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLB

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLB

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLB

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLB

	// ID specifies a unique id for an element.
	ID(v string) HTMLB

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLB

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLB

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLB

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLB

	// Title specifies extra information about an element.
	Title(v string) HTMLB

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLB

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLB

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLB

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLB

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLB

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLB

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLB

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLB

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLB

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLB

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLB

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLB

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLB

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLB

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLB

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLB

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLB

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLB

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLB

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLB

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLB

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLB

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLB

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLB

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLB

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLB

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLB

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLB

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLB

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLB

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLB

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLB
}

// B returns an HTML element that defines bold text.
func B() HTMLB {
	e := &htmlB{
		elem: elem{
			tag:         "b",
			selfClosing: false,
		},
	}

	return e
}

type htmlB struct {
	elem
}

func (e *htmlB) Body(elems ...UI) HTMLB {
	e.setBody(elems...)
	return e
}

func (e *htmlB) Text(v interface{}) HTMLB {
	return e.Body(Text(v))
}

func (e *htmlB) AccessKey(v string) HTMLB {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlB) Aria(k string, v interface{}) HTMLB {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlB) Class(v string) HTMLB {
	e.setAttr("class", v)
	return e
}

func (e *htmlB) ContentEditable(v bool) HTMLB {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlB) DataSet(k string, v interface{}) HTMLB {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlB) Dir(v string) HTMLB {
	e.setAttr("dir", v)
	return e
}

func (e *htmlB) Draggable(v bool) HTMLB {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlB) Hidden(v bool) HTMLB {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlB) ID(v string) HTMLB {
	e.setAttr("id", v)
	return e
}

func (e *htmlB) Lang(v string) HTMLB {
	e.setAttr("lang", v)
	return e
}

func (e *htmlB) Spellcheck(v bool) HTMLB {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlB) Style(k, v string) HTMLB {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlB) TabIndex(v int) HTMLB {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlB) Title(v string) HTMLB {
	e.setAttr("title", v)
	return e
}

func (e *htmlB) OnBlur(h EventHandler) HTMLB {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlB) OnChange(h EventHandler) HTMLB {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlB) OnClick(h EventHandler) HTMLB {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlB) OnContextMenu(h EventHandler) HTMLB {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlB) OnCopy(h EventHandler) HTMLB {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlB) OnCut(h EventHandler) HTMLB {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlB) OnDblClick(h EventHandler) HTMLB {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlB) OnDrag(h EventHandler) HTMLB {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlB) OnDragEnd(h EventHandler) HTMLB {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlB) OnDragEnter(h EventHandler) HTMLB {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlB) OnDragLeave(h EventHandler) HTMLB {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlB) OnDragOver(h EventHandler) HTMLB {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlB) OnDragStart(h EventHandler) HTMLB {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlB) OnDrop(h EventHandler) HTMLB {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlB) OnFocus(h EventHandler) HTMLB {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlB) OnInput(h EventHandler) HTMLB {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlB) OnInvalid(h EventHandler) HTMLB {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlB) OnKeyDown(h EventHandler) HTMLB {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlB) OnKeyPress(h EventHandler) HTMLB {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlB) OnKeyup(h EventHandler) HTMLB {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlB) OnMouseDown(h EventHandler) HTMLB {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlB) OnMouseMove(h EventHandler) HTMLB {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlB) OnMouseOut(h EventHandler) HTMLB {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlB) OnMouseOver(h EventHandler) HTMLB {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlB) OnMouseUp(h EventHandler) HTMLB {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlB) OnPaste(h EventHandler) HTMLB {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlB) OnReset(h EventHandler) HTMLB {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlB) OnScroll(h EventHandler) HTMLB {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlB) OnSearch(h EventHandler) HTMLB {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlB) OnSelect(h EventHandler) HTMLB {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlB) OnSubmit(h EventHandler) HTMLB {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlB) OnWheel(h EventHandler) HTMLB {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLBase is the interface that describes a <base> HTML element.
type HTMLBase interface {
	UI

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLBase

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLBase

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLBase

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLBase

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLBase

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLBase

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLBase

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLBase

	// Href specifies the URL of the page the link goes to.
	Href(v string) HTMLBase

	// ID specifies a unique id for an element.
	ID(v string) HTMLBase

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLBase

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLBase

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLBase

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLBase

	// Target specifies the target for where to open the linked document or where to submit the form.
	Target(v string) HTMLBase

	// Title specifies extra information about an element.
	Title(v string) HTMLBase

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLBase

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLBase

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLBase

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLBase

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLBase

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLBase

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLBase

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLBase

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLBase

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLBase

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLBase

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLBase

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLBase

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLBase

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLBase

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLBase

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLBase

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLBase

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLBase

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLBase

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLBase

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLBase

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLBase

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLBase

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLBase

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLBase

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLBase

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLBase

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLBase

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLBase

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLBase

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLBase
}

// Base returns an HTML element that specifies the base URL/target for all relative URLs in a document.
func Base() HTMLBase {
	e := &htmlBase{
		elem: elem{
			tag:         "base",
			selfClosing: true,
		},
	}

	return e
}

type htmlBase struct {
	elem
}

func (e *htmlBase) AccessKey(v string) HTMLBase {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlBase) Aria(k string, v interface{}) HTMLBase {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlBase) Class(v string) HTMLBase {
	e.setAttr("class", v)
	return e
}

func (e *htmlBase) ContentEditable(v bool) HTMLBase {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlBase) DataSet(k string, v interface{}) HTMLBase {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlBase) Dir(v string) HTMLBase {
	e.setAttr("dir", v)
	return e
}

func (e *htmlBase) Draggable(v bool) HTMLBase {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlBase) Hidden(v bool) HTMLBase {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlBase) Href(v string) HTMLBase {
	e.setAttr("href", StaticResource(v))
	return e
}

func (e *htmlBase) ID(v string) HTMLBase {
	e.setAttr("id", v)
	return e
}

func (e *htmlBase) Lang(v string) HTMLBase {
	e.setAttr("lang", v)
	return e
}

func (e *htmlBase) Spellcheck(v bool) HTMLBase {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlBase) Style(k, v string) HTMLBase {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlBase) TabIndex(v int) HTMLBase {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlBase) Target(v string) HTMLBase {
	e.setAttr("target", v)
	return e
}

func (e *htmlBase) Title(v string) HTMLBase {
	e.setAttr("title", v)
	return e
}

func (e *htmlBase) OnBlur(h EventHandler) HTMLBase {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlBase) OnChange(h EventHandler) HTMLBase {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlBase) OnClick(h EventHandler) HTMLBase {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlBase) OnContextMenu(h EventHandler) HTMLBase {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlBase) OnCopy(h EventHandler) HTMLBase {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlBase) OnCut(h EventHandler) HTMLBase {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlBase) OnDblClick(h EventHandler) HTMLBase {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlBase) OnDrag(h EventHandler) HTMLBase {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlBase) OnDragEnd(h EventHandler) HTMLBase {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlBase) OnDragEnter(h EventHandler) HTMLBase {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlBase) OnDragLeave(h EventHandler) HTMLBase {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlBase) OnDragOver(h EventHandler) HTMLBase {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlBase) OnDragStart(h EventHandler) HTMLBase {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlBase) OnDrop(h EventHandler) HTMLBase {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlBase) OnFocus(h EventHandler) HTMLBase {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlBase) OnInput(h EventHandler) HTMLBase {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlBase) OnInvalid(h EventHandler) HTMLBase {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlBase) OnKeyDown(h EventHandler) HTMLBase {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlBase) OnKeyPress(h EventHandler) HTMLBase {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlBase) OnKeyup(h EventHandler) HTMLBase {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlBase) OnMouseDown(h EventHandler) HTMLBase {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlBase) OnMouseMove(h EventHandler) HTMLBase {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlBase) OnMouseOut(h EventHandler) HTMLBase {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlBase) OnMouseOver(h EventHandler) HTMLBase {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlBase) OnMouseUp(h EventHandler) HTMLBase {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlBase) OnPaste(h EventHandler) HTMLBase {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlBase) OnReset(h EventHandler) HTMLBase {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlBase) OnScroll(h EventHandler) HTMLBase {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlBase) OnSearch(h EventHandler) HTMLBase {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlBase) OnSelect(h EventHandler) HTMLBase {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlBase) OnSubmit(h EventHandler) HTMLBase {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlBase) OnWheel(h EventHandler) HTMLBase {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLBdi is the interface that describes a <bdi> HTML element.
type HTMLBdi interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLBdi

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLBdi

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLBdi

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLBdi

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLBdi

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLBdi

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLBdi

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLBdi

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLBdi

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLBdi

	// ID specifies a unique id for an element.
	ID(v string) HTMLBdi

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLBdi

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLBdi

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLBdi

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLBdi

	// Title specifies extra information about an element.
	Title(v string) HTMLBdi

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLBdi

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLBdi

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLBdi

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLBdi

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLBdi

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLBdi

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLBdi

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLBdi

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLBdi

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLBdi

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLBdi

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLBdi

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLBdi

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLBdi

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLBdi

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLBdi

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLBdi

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLBdi

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLBdi

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLBdi

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLBdi

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLBdi

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLBdi

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLBdi

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLBdi

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLBdi

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLBdi

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLBdi

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLBdi

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLBdi

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLBdi

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLBdi
}

// Bdi returns an HTML element that isolates a part of text that might be formatted in a different direction from other text outside it.
func Bdi() HTMLBdi {
	e := &htmlBdi{
		elem: elem{
			tag:         "bdi",
			selfClosing: false,
		},
	}

	return e
}

type htmlBdi struct {
	elem
}

func (e *htmlBdi) Body(elems ...UI) HTMLBdi {
	e.setBody(elems...)
	return e
}

func (e *htmlBdi) Text(v interface{}) HTMLBdi {
	return e.Body(Text(v))
}

func (e *htmlBdi) AccessKey(v string) HTMLBdi {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlBdi) Aria(k string, v interface{}) HTMLBdi {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlBdi) Class(v string) HTMLBdi {
	e.setAttr("class", v)
	return e
}

func (e *htmlBdi) ContentEditable(v bool) HTMLBdi {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlBdi) DataSet(k string, v interface{}) HTMLBdi {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlBdi) Dir(v string) HTMLBdi {
	e.setAttr("dir", v)
	return e
}

func (e *htmlBdi) Draggable(v bool) HTMLBdi {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlBdi) Hidden(v bool) HTMLBdi {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlBdi) ID(v string) HTMLBdi {
	e.setAttr("id", v)
	return e
}

func (e *htmlBdi) Lang(v string) HTMLBdi {
	e.setAttr("lang", v)
	return e
}

func (e *htmlBdi) Spellcheck(v bool) HTMLBdi {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlBdi) Style(k, v string) HTMLBdi {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlBdi) TabIndex(v int) HTMLBdi {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlBdi) Title(v string) HTMLBdi {
	e.setAttr("title", v)
	return e
}

func (e *htmlBdi) OnBlur(h EventHandler) HTMLBdi {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlBdi) OnChange(h EventHandler) HTMLBdi {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlBdi) OnClick(h EventHandler) HTMLBdi {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlBdi) OnContextMenu(h EventHandler) HTMLBdi {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlBdi) OnCopy(h EventHandler) HTMLBdi {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlBdi) OnCut(h EventHandler) HTMLBdi {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlBdi) OnDblClick(h EventHandler) HTMLBdi {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlBdi) OnDrag(h EventHandler) HTMLBdi {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlBdi) OnDragEnd(h EventHandler) HTMLBdi {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlBdi) OnDragEnter(h EventHandler) HTMLBdi {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlBdi) OnDragLeave(h EventHandler) HTMLBdi {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlBdi) OnDragOver(h EventHandler) HTMLBdi {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlBdi) OnDragStart(h EventHandler) HTMLBdi {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlBdi) OnDrop(h EventHandler) HTMLBdi {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlBdi) OnFocus(h EventHandler) HTMLBdi {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlBdi) OnInput(h EventHandler) HTMLBdi {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlBdi) OnInvalid(h EventHandler) HTMLBdi {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlBdi) OnKeyDown(h EventHandler) HTMLBdi {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlBdi) OnKeyPress(h EventHandler) HTMLBdi {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlBdi) OnKeyup(h EventHandler) HTMLBdi {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlBdi) OnMouseDown(h EventHandler) HTMLBdi {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlBdi) OnMouseMove(h EventHandler) HTMLBdi {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlBdi) OnMouseOut(h EventHandler) HTMLBdi {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlBdi) OnMouseOver(h EventHandler) HTMLBdi {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlBdi) OnMouseUp(h EventHandler) HTMLBdi {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlBdi) OnPaste(h EventHandler) HTMLBdi {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlBdi) OnReset(h EventHandler) HTMLBdi {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlBdi) OnScroll(h EventHandler) HTMLBdi {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlBdi) OnSearch(h EventHandler) HTMLBdi {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlBdi) OnSelect(h EventHandler) HTMLBdi {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlBdi) OnSubmit(h EventHandler) HTMLBdi {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlBdi) OnWheel(h EventHandler) HTMLBdi {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLBdo is the interface that describes a <bdo> HTML element.
type HTMLBdo interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLBdo

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLBdo

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLBdo

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLBdo

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLBdo

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLBdo

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLBdo

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLBdo

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLBdo

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLBdo

	// ID specifies a unique id for an element.
	ID(v string) HTMLBdo

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLBdo

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLBdo

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLBdo

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLBdo

	// Title specifies extra information about an element.
	Title(v string) HTMLBdo

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLBdo

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLBdo

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLBdo

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLBdo

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLBdo

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLBdo

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLBdo

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLBdo

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLBdo

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLBdo

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLBdo

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLBdo

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLBdo

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLBdo

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLBdo

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLBdo

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLBdo

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLBdo

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLBdo

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLBdo

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLBdo

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLBdo

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLBdo

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLBdo

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLBdo

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLBdo

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLBdo

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLBdo

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLBdo

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLBdo

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLBdo

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLBdo
}

// Bdo returns an HTML element that overrides the current text direction.
func Bdo() HTMLBdo {
	e := &htmlBdo{
		elem: elem{
			tag:         "bdo",
			selfClosing: false,
		},
	}

	return e
}

type htmlBdo struct {
	elem
}

func (e *htmlBdo) Body(elems ...UI) HTMLBdo {
	e.setBody(elems...)
	return e
}

func (e *htmlBdo) Text(v interface{}) HTMLBdo {
	return e.Body(Text(v))
}

func (e *htmlBdo) AccessKey(v string) HTMLBdo {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlBdo) Aria(k string, v interface{}) HTMLBdo {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlBdo) Class(v string) HTMLBdo {
	e.setAttr("class", v)
	return e
}

func (e *htmlBdo) ContentEditable(v bool) HTMLBdo {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlBdo) DataSet(k string, v interface{}) HTMLBdo {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlBdo) Dir(v string) HTMLBdo {
	e.setAttr("dir", v)
	return e
}

func (e *htmlBdo) Draggable(v bool) HTMLBdo {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlBdo) Hidden(v bool) HTMLBdo {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlBdo) ID(v string) HTMLBdo {
	e.setAttr("id", v)
	return e
}

func (e *htmlBdo) Lang(v string) HTMLBdo {
	e.setAttr("lang", v)
	return e
}

func (e *htmlBdo) Spellcheck(v bool) HTMLBdo {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlBdo) Style(k, v string) HTMLBdo {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlBdo) TabIndex(v int) HTMLBdo {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlBdo) Title(v string) HTMLBdo {
	e.setAttr("title", v)
	return e
}

func (e *htmlBdo) OnBlur(h EventHandler) HTMLBdo {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlBdo) OnChange(h EventHandler) HTMLBdo {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlBdo) OnClick(h EventHandler) HTMLBdo {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlBdo) OnContextMenu(h EventHandler) HTMLBdo {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlBdo) OnCopy(h EventHandler) HTMLBdo {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlBdo) OnCut(h EventHandler) HTMLBdo {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlBdo) OnDblClick(h EventHandler) HTMLBdo {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlBdo) OnDrag(h EventHandler) HTMLBdo {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlBdo) OnDragEnd(h EventHandler) HTMLBdo {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlBdo) OnDragEnter(h EventHandler) HTMLBdo {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlBdo) OnDragLeave(h EventHandler) HTMLBdo {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlBdo) OnDragOver(h EventHandler) HTMLBdo {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlBdo) OnDragStart(h EventHandler) HTMLBdo {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlBdo) OnDrop(h EventHandler) HTMLBdo {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlBdo) OnFocus(h EventHandler) HTMLBdo {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlBdo) OnInput(h EventHandler) HTMLBdo {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlBdo) OnInvalid(h EventHandler) HTMLBdo {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlBdo) OnKeyDown(h EventHandler) HTMLBdo {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlBdo) OnKeyPress(h EventHandler) HTMLBdo {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlBdo) OnKeyup(h EventHandler) HTMLBdo {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlBdo) OnMouseDown(h EventHandler) HTMLBdo {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlBdo) OnMouseMove(h EventHandler) HTMLBdo {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlBdo) OnMouseOut(h EventHandler) HTMLBdo {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlBdo) OnMouseOver(h EventHandler) HTMLBdo {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlBdo) OnMouseUp(h EventHandler) HTMLBdo {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlBdo) OnPaste(h EventHandler) HTMLBdo {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlBdo) OnReset(h EventHandler) HTMLBdo {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlBdo) OnScroll(h EventHandler) HTMLBdo {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlBdo) OnSearch(h EventHandler) HTMLBdo {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlBdo) OnSelect(h EventHandler) HTMLBdo {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlBdo) OnSubmit(h EventHandler) HTMLBdo {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlBdo) OnWheel(h EventHandler) HTMLBdo {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLBlockquote is the interface that describes a <blockquote> HTML element.
type HTMLBlockquote interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLBlockquote

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLBlockquote

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLBlockquote

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLBlockquote

	// Cite specifies a URL which explains the quote/deleted/inserted text.
	Cite(v string) HTMLBlockquote

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLBlockquote

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLBlockquote

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLBlockquote

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLBlockquote

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLBlockquote

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLBlockquote

	// ID specifies a unique id for an element.
	ID(v string) HTMLBlockquote

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLBlockquote

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLBlockquote

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLBlockquote

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLBlockquote

	// Title specifies extra information about an element.
	Title(v string) HTMLBlockquote

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLBlockquote

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLBlockquote

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLBlockquote

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLBlockquote

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLBlockquote

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLBlockquote

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLBlockquote

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLBlockquote

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLBlockquote

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLBlockquote

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLBlockquote

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLBlockquote

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLBlockquote

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLBlockquote

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLBlockquote

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLBlockquote

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLBlockquote

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLBlockquote

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLBlockquote

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLBlockquote

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLBlockquote

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLBlockquote

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLBlockquote

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLBlockquote

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLBlockquote

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLBlockquote

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLBlockquote

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLBlockquote

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLBlockquote

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLBlockquote

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLBlockquote

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLBlockquote
}

// Blockquote returns an HTML element that defines a section that is quoted from another source.
func Blockquote() HTMLBlockquote {
	e := &htmlBlockquote{
		elem: elem{
			tag:         "blockquote",
			selfClosing: false,
		},
	}

	return e
}

type htmlBlockquote struct {
	elem
}

func (e *htmlBlockquote) Body(elems ...UI) HTMLBlockquote {
	e.setBody(elems...)
	return e
}

func (e *htmlBlockquote) Text(v interface{}) HTMLBlockquote {
	return e.Body(Text(v))
}

func (e *htmlBlockquote) AccessKey(v string) HTMLBlockquote {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlBlockquote) Aria(k string, v interface{}) HTMLBlockquote {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlBlockquote) Cite(v string) HTMLBlockquote {
	e.setAttr("cite", StaticResource(v))
	return e
}

func (e *htmlBlockquote) Class(v string) HTMLBlockquote {
	e.setAttr("class", v)
	return e
}

func (e *htmlBlockquote) ContentEditable(v bool) HTMLBlockquote {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlBlockquote) DataSet(k string, v interface{}) HTMLBlockquote {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlBlockquote) Dir(v string) HTMLBlockquote {
	e.setAttr("dir", v)
	return e
}

func (e *htmlBlockquote) Draggable(v bool) HTMLBlockquote {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlBlockquote) Hidden(v bool) HTMLBlockquote {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlBlockquote) ID(v string) HTMLBlockquote {
	e.setAttr("id", v)
	return e
}

func (e *htmlBlockquote) Lang(v string) HTMLBlockquote {
	e.setAttr("lang", v)
	return e
}

func (e *htmlBlockquote) Spellcheck(v bool) HTMLBlockquote {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlBlockquote) Style(k, v string) HTMLBlockquote {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlBlockquote) TabIndex(v int) HTMLBlockquote {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlBlockquote) Title(v string) HTMLBlockquote {
	e.setAttr("title", v)
	return e
}

func (e *htmlBlockquote) OnBlur(h EventHandler) HTMLBlockquote {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlBlockquote) OnChange(h EventHandler) HTMLBlockquote {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlBlockquote) OnClick(h EventHandler) HTMLBlockquote {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlBlockquote) OnContextMenu(h EventHandler) HTMLBlockquote {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlBlockquote) OnCopy(h EventHandler) HTMLBlockquote {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlBlockquote) OnCut(h EventHandler) HTMLBlockquote {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlBlockquote) OnDblClick(h EventHandler) HTMLBlockquote {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlBlockquote) OnDrag(h EventHandler) HTMLBlockquote {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlBlockquote) OnDragEnd(h EventHandler) HTMLBlockquote {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlBlockquote) OnDragEnter(h EventHandler) HTMLBlockquote {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlBlockquote) OnDragLeave(h EventHandler) HTMLBlockquote {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlBlockquote) OnDragOver(h EventHandler) HTMLBlockquote {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlBlockquote) OnDragStart(h EventHandler) HTMLBlockquote {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlBlockquote) OnDrop(h EventHandler) HTMLBlockquote {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlBlockquote) OnFocus(h EventHandler) HTMLBlockquote {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlBlockquote) OnInput(h EventHandler) HTMLBlockquote {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlBlockquote) OnInvalid(h EventHandler) HTMLBlockquote {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlBlockquote) OnKeyDown(h EventHandler) HTMLBlockquote {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlBlockquote) OnKeyPress(h EventHandler) HTMLBlockquote {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlBlockquote) OnKeyup(h EventHandler) HTMLBlockquote {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlBlockquote) OnMouseDown(h EventHandler) HTMLBlockquote {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlBlockquote) OnMouseMove(h EventHandler) HTMLBlockquote {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlBlockquote) OnMouseOut(h EventHandler) HTMLBlockquote {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlBlockquote) OnMouseOver(h EventHandler) HTMLBlockquote {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlBlockquote) OnMouseUp(h EventHandler) HTMLBlockquote {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlBlockquote) OnPaste(h EventHandler) HTMLBlockquote {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlBlockquote) OnReset(h EventHandler) HTMLBlockquote {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlBlockquote) OnScroll(h EventHandler) HTMLBlockquote {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlBlockquote) OnSearch(h EventHandler) HTMLBlockquote {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlBlockquote) OnSelect(h EventHandler) HTMLBlockquote {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlBlockquote) OnSubmit(h EventHandler) HTMLBlockquote {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlBlockquote) OnWheel(h EventHandler) HTMLBlockquote {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLBody is the interface that describes a <body> HTML element.
type HTMLBody interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLBody

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLBody

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLBody

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLBody

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLBody

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLBody

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLBody

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLBody

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLBody

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLBody

	// ID specifies a unique id for an element.
	ID(v string) HTMLBody

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLBody

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLBody

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLBody

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLBody

	// Title specifies extra information about an element.
	Title(v string) HTMLBody

	// OnAfterPrint runs the given handler after the document is printed.
	OnAfterPrint(h EventHandler) HTMLBody

	// OnBeforePrint calls the given handler before the document is printed.
	OnBeforePrint(h EventHandler) HTMLBody

	// OnBeforeUnload calls the given handler when the document is about to be unloaded.
	OnBeforeUnload(h EventHandler) HTMLBody

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLBody

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLBody

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLBody

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLBody

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLBody

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLBody

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLBody

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLBody

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLBody

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLBody

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLBody

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLBody

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLBody

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLBody

	// OnError calls the given handler when an error occurs.
	OnError(h EventHandler) HTMLBody

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLBody

	// OnHashChange calls the given handler when there has been changes to the anchor part of the a URL.
	OnHashChange(h EventHandler) HTMLBody

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLBody

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLBody

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLBody

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLBody

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLBody

	// OnLoad calls the given handler after the element is finished loading.
	OnLoad(h EventHandler) HTMLBody

	// OnMessage calls then given handler when a message is triggered.
	OnMessage(h EventHandler) HTMLBody

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLBody

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLBody

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLBody

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLBody

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLBody

	// OnOffline calls the given handler when the browser starts to work offline.
	OnOffline(h EventHandler) HTMLBody

	// OnOnline calls the given handler when the browser starts to work online.
	OnOnline(h EventHandler) HTMLBody

	// OnPageHide calls the given handler when a user navigates away from a page.
	OnPageHide(h EventHandler) HTMLBody

	// OnPageShow calls the given handler when a user navigates to a page.
	OnPageShow(h EventHandler) HTMLBody

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLBody

	// OnPopState calls the given handler when the window's history changes.
	OnPopState(h EventHandler) HTMLBody

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLBody

	// OnResize calls the given handler when the browser window is resized.
	OnResize(h EventHandler) HTMLBody

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLBody

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLBody

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLBody

	// OnStorage calls the given handler when a Web Storage area is updated.
	OnStorage(h EventHandler) HTMLBody

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLBody

	// OnUnload calls the given handler once a page has unloaded (or the browser window has been closed).
	OnUnload(h EventHandler) HTMLBody

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLBody
}

// Body returns an HTML element that defines the document's body.
func Body() HTMLBody {
	e := &htmlBody{
		elem: elem{
			tag:         "body",
			selfClosing: false,
		},
	}

	return e
}

type htmlBody struct {
	elem
}

func (e *htmlBody) Body(elems ...UI) HTMLBody {
	e.setBody(elems...)
	return e
}

func (e *htmlBody) Text(v interface{}) HTMLBody {
	return e.Body(Text(v))
}

func (e *htmlBody) AccessKey(v string) HTMLBody {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlBody) Aria(k string, v interface{}) HTMLBody {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlBody) Class(v string) HTMLBody {
	e.setAttr("class", v)
	return e
}

func (e *htmlBody) ContentEditable(v bool) HTMLBody {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlBody) DataSet(k string, v interface{}) HTMLBody {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlBody) Dir(v string) HTMLBody {
	e.setAttr("dir", v)
	return e
}

func (e *htmlBody) Draggable(v bool) HTMLBody {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlBody) Hidden(v bool) HTMLBody {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlBody) ID(v string) HTMLBody {
	e.setAttr("id", v)
	return e
}

func (e *htmlBody) Lang(v string) HTMLBody {
	e.setAttr("lang", v)
	return e
}

func (e *htmlBody) Spellcheck(v bool) HTMLBody {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlBody) Style(k, v string) HTMLBody {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlBody) TabIndex(v int) HTMLBody {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlBody) Title(v string) HTMLBody {
	e.setAttr("title", v)
	return e
}

func (e *htmlBody) OnAfterPrint(h EventHandler) HTMLBody {
	e.setEventHandler("afterprint", h)
	return e
}

func (e *htmlBody) OnBeforePrint(h EventHandler) HTMLBody {
	e.setEventHandler("beforeprint", h)
	return e
}

func (e *htmlBody) OnBeforeUnload(h EventHandler) HTMLBody {
	e.setEventHandler("beforeunload", h)
	return e
}

func (e *htmlBody) OnBlur(h EventHandler) HTMLBody {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlBody) OnChange(h EventHandler) HTMLBody {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlBody) OnClick(h EventHandler) HTMLBody {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlBody) OnContextMenu(h EventHandler) HTMLBody {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlBody) OnCopy(h EventHandler) HTMLBody {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlBody) OnCut(h EventHandler) HTMLBody {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlBody) OnDblClick(h EventHandler) HTMLBody {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlBody) OnDrag(h EventHandler) HTMLBody {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlBody) OnDragEnd(h EventHandler) HTMLBody {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlBody) OnDragEnter(h EventHandler) HTMLBody {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlBody) OnDragLeave(h EventHandler) HTMLBody {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlBody) OnDragOver(h EventHandler) HTMLBody {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlBody) OnDragStart(h EventHandler) HTMLBody {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlBody) OnDrop(h EventHandler) HTMLBody {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlBody) OnError(h EventHandler) HTMLBody {
	e.setEventHandler("error", h)
	return e
}

func (e *htmlBody) OnFocus(h EventHandler) HTMLBody {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlBody) OnHashChange(h EventHandler) HTMLBody {
	e.setEventHandler("hashchange", h)
	return e
}

func (e *htmlBody) OnInput(h EventHandler) HTMLBody {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlBody) OnInvalid(h EventHandler) HTMLBody {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlBody) OnKeyDown(h EventHandler) HTMLBody {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlBody) OnKeyPress(h EventHandler) HTMLBody {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlBody) OnKeyup(h EventHandler) HTMLBody {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlBody) OnLoad(h EventHandler) HTMLBody {
	e.setEventHandler("load", h)
	return e
}

func (e *htmlBody) OnMessage(h EventHandler) HTMLBody {
	e.setEventHandler("message", h)
	return e
}

func (e *htmlBody) OnMouseDown(h EventHandler) HTMLBody {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlBody) OnMouseMove(h EventHandler) HTMLBody {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlBody) OnMouseOut(h EventHandler) HTMLBody {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlBody) OnMouseOver(h EventHandler) HTMLBody {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlBody) OnMouseUp(h EventHandler) HTMLBody {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlBody) OnOffline(h EventHandler) HTMLBody {
	e.setEventHandler("offline", h)
	return e
}

func (e *htmlBody) OnOnline(h EventHandler) HTMLBody {
	e.setEventHandler("online", h)
	return e
}

func (e *htmlBody) OnPageHide(h EventHandler) HTMLBody {
	e.setEventHandler("pagehide", h)
	return e
}

func (e *htmlBody) OnPageShow(h EventHandler) HTMLBody {
	e.setEventHandler("pageshow", h)
	return e
}

func (e *htmlBody) OnPaste(h EventHandler) HTMLBody {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlBody) OnPopState(h EventHandler) HTMLBody {
	e.setEventHandler("popstate", h)
	return e
}

func (e *htmlBody) OnReset(h EventHandler) HTMLBody {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlBody) OnResize(h EventHandler) HTMLBody {
	e.setEventHandler("resize", h)
	return e
}

func (e *htmlBody) OnScroll(h EventHandler) HTMLBody {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlBody) OnSearch(h EventHandler) HTMLBody {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlBody) OnSelect(h EventHandler) HTMLBody {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlBody) OnStorage(h EventHandler) HTMLBody {
	e.setEventHandler("storage", h)
	return e
}

func (e *htmlBody) OnSubmit(h EventHandler) HTMLBody {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlBody) OnUnload(h EventHandler) HTMLBody {
	e.setEventHandler("unload", h)
	return e
}

func (e *htmlBody) OnWheel(h EventHandler) HTMLBody {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLBr is the interface that describes a <br> HTML element.
type HTMLBr interface {
	UI

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLBr

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLBr

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLBr

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLBr

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLBr

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLBr

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLBr

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLBr

	// ID specifies a unique id for an element.
	ID(v string) HTMLBr

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLBr

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLBr

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLBr

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLBr

	// Title specifies extra information about an element.
	Title(v string) HTMLBr

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLBr

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLBr

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLBr

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLBr

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLBr

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLBr

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLBr

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLBr

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLBr

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLBr

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLBr

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLBr

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLBr

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLBr

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLBr

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLBr

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLBr

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLBr

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLBr

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLBr

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLBr

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLBr

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLBr

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLBr

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLBr

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLBr

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLBr

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLBr

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLBr

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLBr

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLBr

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLBr
}

// Br returns an HTML element that defines a single line break.
func Br() HTMLBr {
	e := &htmlBr{
		elem: elem{
			tag:         "br",
			selfClosing: true,
		},
	}

	return e
}

type htmlBr struct {
	elem
}

func (e *htmlBr) AccessKey(v string) HTMLBr {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlBr) Aria(k string, v interface{}) HTMLBr {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlBr) Class(v string) HTMLBr {
	e.setAttr("class", v)
	return e
}

func (e *htmlBr) ContentEditable(v bool) HTMLBr {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlBr) DataSet(k string, v interface{}) HTMLBr {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlBr) Dir(v string) HTMLBr {
	e.setAttr("dir", v)
	return e
}

func (e *htmlBr) Draggable(v bool) HTMLBr {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlBr) Hidden(v bool) HTMLBr {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlBr) ID(v string) HTMLBr {
	e.setAttr("id", v)
	return e
}

func (e *htmlBr) Lang(v string) HTMLBr {
	e.setAttr("lang", v)
	return e
}

func (e *htmlBr) Spellcheck(v bool) HTMLBr {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlBr) Style(k, v string) HTMLBr {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlBr) TabIndex(v int) HTMLBr {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlBr) Title(v string) HTMLBr {
	e.setAttr("title", v)
	return e
}

func (e *htmlBr) OnBlur(h EventHandler) HTMLBr {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlBr) OnChange(h EventHandler) HTMLBr {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlBr) OnClick(h EventHandler) HTMLBr {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlBr) OnContextMenu(h EventHandler) HTMLBr {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlBr) OnCopy(h EventHandler) HTMLBr {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlBr) OnCut(h EventHandler) HTMLBr {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlBr) OnDblClick(h EventHandler) HTMLBr {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlBr) OnDrag(h EventHandler) HTMLBr {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlBr) OnDragEnd(h EventHandler) HTMLBr {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlBr) OnDragEnter(h EventHandler) HTMLBr {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlBr) OnDragLeave(h EventHandler) HTMLBr {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlBr) OnDragOver(h EventHandler) HTMLBr {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlBr) OnDragStart(h EventHandler) HTMLBr {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlBr) OnDrop(h EventHandler) HTMLBr {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlBr) OnFocus(h EventHandler) HTMLBr {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlBr) OnInput(h EventHandler) HTMLBr {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlBr) OnInvalid(h EventHandler) HTMLBr {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlBr) OnKeyDown(h EventHandler) HTMLBr {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlBr) OnKeyPress(h EventHandler) HTMLBr {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlBr) OnKeyup(h EventHandler) HTMLBr {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlBr) OnMouseDown(h EventHandler) HTMLBr {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlBr) OnMouseMove(h EventHandler) HTMLBr {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlBr) OnMouseOut(h EventHandler) HTMLBr {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlBr) OnMouseOver(h EventHandler) HTMLBr {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlBr) OnMouseUp(h EventHandler) HTMLBr {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlBr) OnPaste(h EventHandler) HTMLBr {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlBr) OnReset(h EventHandler) HTMLBr {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlBr) OnScroll(h EventHandler) HTMLBr {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlBr) OnSearch(h EventHandler) HTMLBr {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlBr) OnSelect(h EventHandler) HTMLBr {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlBr) OnSubmit(h EventHandler) HTMLBr {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlBr) OnWheel(h EventHandler) HTMLBr {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLButton is the interface that describes a <button> HTML element.
type HTMLButton interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLButton

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLButton

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLButton

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLButton

	// AutoFocus specifies that the element should automatically get focus when the page loads.
	AutoFocus(v bool) HTMLButton

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLButton

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLButton

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLButton

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLButton

	// Disabled specifies that the specified element/group of elements should be disabled.
	Disabled(v bool) HTMLButton

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLButton

	// Form specifies the name of the form the element belongs to.
	Form(v string) HTMLButton

	// FormAction specifies where to send the form-data when a form is submitted. Only for submit type.
	FormAction(v string) HTMLButton

	// FormEncType specifies how form-data should be encoded before sending it to a server. Only for submit type.
	FormEncType(v string) HTMLButton

	// FormMethod specifies how to send the form-data (which HTTP method to use). Only for submit type.
	FormMethod(v string) HTMLButton

	// FormNoValidate specifies that the form-data should not be validated on submission. Only for submit type.
	FormNoValidate(v bool) HTMLButton

	// FormTarget specifies where to display the response after submitting the form. Only for submit type.
	FormTarget(v string) HTMLButton

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLButton

	// ID specifies a unique id for an element.
	ID(v string) HTMLButton

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLButton

	// Name specifies the name of the element.
	Name(v string) HTMLButton

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLButton

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLButton

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLButton

	// Title specifies extra information about an element.
	Title(v string) HTMLButton

	// Type specifies the type of element.
	Type(v string) HTMLButton

	// Value specifies the value of the element.
	Value(v interface{}) HTMLButton

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLButton

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLButton

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLButton

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLButton

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLButton

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLButton

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLButton

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLButton

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLButton

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLButton

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLButton

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLButton

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLButton

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLButton

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLButton

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLButton

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLButton

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLButton

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLButton

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLButton

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLButton

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLButton

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLButton

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLButton

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLButton

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLButton

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLButton

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLButton

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLButton

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLButton

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLButton

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLButton
}

// Button returns an HTML element that defines a clickable button.
func Button() HTMLButton {
	e := &htmlButton{
		elem: elem{
			tag:         "button",
			selfClosing: false,
		},
	}

	return e
}

type htmlButton struct {
	elem
}

func (e *htmlButton) Body(elems ...UI) HTMLButton {
	e.setBody(elems...)
	return e
}

func (e *htmlButton) Text(v interface{}) HTMLButton {
	return e.Body(Text(v))
}

func (e *htmlButton) AccessKey(v string) HTMLButton {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlButton) Aria(k string, v interface{}) HTMLButton {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlButton) AutoFocus(v bool) HTMLButton {
	e.setAttr("autofocus", v)
	return e
}

func (e *htmlButton) Class(v string) HTMLButton {
	e.setAttr("class", v)
	return e
}

func (e *htmlButton) ContentEditable(v bool) HTMLButton {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlButton) DataSet(k string, v interface{}) HTMLButton {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlButton) Dir(v string) HTMLButton {
	e.setAttr("dir", v)
	return e
}

func (e *htmlButton) Disabled(v bool) HTMLButton {
	e.setAttr("disabled", v)
	return e
}

func (e *htmlButton) Draggable(v bool) HTMLButton {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlButton) Form(v string) HTMLButton {
	e.setAttr("form", v)
	return e
}

func (e *htmlButton) FormAction(v string) HTMLButton {
	e.setAttr("formaction", v)
	return e
}

func (e *htmlButton) FormEncType(v string) HTMLButton {
	e.setAttr("formenctype", v)
	return e
}

func (e *htmlButton) FormMethod(v string) HTMLButton {
	e.setAttr("formmethod", v)
	return e
}

func (e *htmlButton) FormNoValidate(v bool) HTMLButton {
	e.setAttr("formnovalidate", v)
	return e
}

func (e *htmlButton) FormTarget(v string) HTMLButton {
	e.setAttr("formtarget", v)
	return e
}

func (e *htmlButton) Hidden(v bool) HTMLButton {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlButton) ID(v string) HTMLButton {
	e.setAttr("id", v)
	return e
}

func (e *htmlButton) Lang(v string) HTMLButton {
	e.setAttr("lang", v)
	return e
}

func (e *htmlButton) Name(v string) HTMLButton {
	e.setAttr("name", v)
	return e
}

func (e *htmlButton) Spellcheck(v bool) HTMLButton {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlButton) Style(k, v string) HTMLButton {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlButton) TabIndex(v int) HTMLButton {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlButton) Title(v string) HTMLButton {
	e.setAttr("title", v)
	return e
}

func (e *htmlButton) Type(v string) HTMLButton {
	e.setAttr("type", v)
	return e
}

func (e *htmlButton) Value(v interface{}) HTMLButton {
	e.setAttr("value", v)
	return e
}

func (e *htmlButton) OnBlur(h EventHandler) HTMLButton {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlButton) OnChange(h EventHandler) HTMLButton {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlButton) OnClick(h EventHandler) HTMLButton {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlButton) OnContextMenu(h EventHandler) HTMLButton {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlButton) OnCopy(h EventHandler) HTMLButton {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlButton) OnCut(h EventHandler) HTMLButton {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlButton) OnDblClick(h EventHandler) HTMLButton {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlButton) OnDrag(h EventHandler) HTMLButton {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlButton) OnDragEnd(h EventHandler) HTMLButton {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlButton) OnDragEnter(h EventHandler) HTMLButton {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlButton) OnDragLeave(h EventHandler) HTMLButton {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlButton) OnDragOver(h EventHandler) HTMLButton {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlButton) OnDragStart(h EventHandler) HTMLButton {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlButton) OnDrop(h EventHandler) HTMLButton {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlButton) OnFocus(h EventHandler) HTMLButton {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlButton) OnInput(h EventHandler) HTMLButton {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlButton) OnInvalid(h EventHandler) HTMLButton {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlButton) OnKeyDown(h EventHandler) HTMLButton {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlButton) OnKeyPress(h EventHandler) HTMLButton {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlButton) OnKeyup(h EventHandler) HTMLButton {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlButton) OnMouseDown(h EventHandler) HTMLButton {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlButton) OnMouseMove(h EventHandler) HTMLButton {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlButton) OnMouseOut(h EventHandler) HTMLButton {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlButton) OnMouseOver(h EventHandler) HTMLButton {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlButton) OnMouseUp(h EventHandler) HTMLButton {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlButton) OnPaste(h EventHandler) HTMLButton {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlButton) OnReset(h EventHandler) HTMLButton {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlButton) OnScroll(h EventHandler) HTMLButton {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlButton) OnSearch(h EventHandler) HTMLButton {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlButton) OnSelect(h EventHandler) HTMLButton {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlButton) OnSubmit(h EventHandler) HTMLButton {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlButton) OnWheel(h EventHandler) HTMLButton {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLCanvas is the interface that describes a <canvas> HTML element.
type HTMLCanvas interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLCanvas

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLCanvas

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLCanvas

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLCanvas

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLCanvas

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLCanvas

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLCanvas

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLCanvas

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLCanvas

	// Height specifies the height of the element (in pixels).
	Height(v int) HTMLCanvas

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLCanvas

	// ID specifies a unique id for an element.
	ID(v string) HTMLCanvas

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLCanvas

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLCanvas

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLCanvas

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLCanvas

	// Title specifies extra information about an element.
	Title(v string) HTMLCanvas

	// Width specifies the width of the element.
	Width(v int) HTMLCanvas

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLCanvas

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLCanvas

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLCanvas

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLCanvas

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLCanvas

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLCanvas

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLCanvas

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLCanvas

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLCanvas

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLCanvas

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLCanvas

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLCanvas

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLCanvas

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLCanvas

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLCanvas

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLCanvas

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLCanvas

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLCanvas

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLCanvas

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLCanvas

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLCanvas

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLCanvas

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLCanvas

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLCanvas

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLCanvas

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLCanvas

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLCanvas

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLCanvas

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLCanvas

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLCanvas

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLCanvas

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLCanvas
}

// Canvas returns an HTML element that is used to draw graphics on the fly.
func Canvas() HTMLCanvas {
	e := &htmlCanvas{
		elem: elem{
			tag:         "canvas",
			selfClosing: false,
		},
	}

	return e
}

type htmlCanvas struct {
	elem
}

func (e *htmlCanvas) Body(elems ...UI) HTMLCanvas {
	e.setBody(elems...)
	return e
}

func (e *htmlCanvas) Text(v interface{}) HTMLCanvas {
	return e.Body(Text(v))
}

func (e *htmlCanvas) AccessKey(v string) HTMLCanvas {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlCanvas) Aria(k string, v interface{}) HTMLCanvas {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlCanvas) Class(v string) HTMLCanvas {
	e.setAttr("class", v)
	return e
}

func (e *htmlCanvas) ContentEditable(v bool) HTMLCanvas {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlCanvas) DataSet(k string, v interface{}) HTMLCanvas {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlCanvas) Dir(v string) HTMLCanvas {
	e.setAttr("dir", v)
	return e
}

func (e *htmlCanvas) Draggable(v bool) HTMLCanvas {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlCanvas) Height(v int) HTMLCanvas {
	e.setAttr("height", v)
	return e
}

func (e *htmlCanvas) Hidden(v bool) HTMLCanvas {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlCanvas) ID(v string) HTMLCanvas {
	e.setAttr("id", v)
	return e
}

func (e *htmlCanvas) Lang(v string) HTMLCanvas {
	e.setAttr("lang", v)
	return e
}

func (e *htmlCanvas) Spellcheck(v bool) HTMLCanvas {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlCanvas) Style(k, v string) HTMLCanvas {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlCanvas) TabIndex(v int) HTMLCanvas {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlCanvas) Title(v string) HTMLCanvas {
	e.setAttr("title", v)
	return e
}

func (e *htmlCanvas) Width(v int) HTMLCanvas {
	e.setAttr("width", v)
	return e
}

func (e *htmlCanvas) OnBlur(h EventHandler) HTMLCanvas {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlCanvas) OnChange(h EventHandler) HTMLCanvas {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlCanvas) OnClick(h EventHandler) HTMLCanvas {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlCanvas) OnContextMenu(h EventHandler) HTMLCanvas {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlCanvas) OnCopy(h EventHandler) HTMLCanvas {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlCanvas) OnCut(h EventHandler) HTMLCanvas {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlCanvas) OnDblClick(h EventHandler) HTMLCanvas {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlCanvas) OnDrag(h EventHandler) HTMLCanvas {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlCanvas) OnDragEnd(h EventHandler) HTMLCanvas {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlCanvas) OnDragEnter(h EventHandler) HTMLCanvas {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlCanvas) OnDragLeave(h EventHandler) HTMLCanvas {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlCanvas) OnDragOver(h EventHandler) HTMLCanvas {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlCanvas) OnDragStart(h EventHandler) HTMLCanvas {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlCanvas) OnDrop(h EventHandler) HTMLCanvas {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlCanvas) OnFocus(h EventHandler) HTMLCanvas {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlCanvas) OnInput(h EventHandler) HTMLCanvas {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlCanvas) OnInvalid(h EventHandler) HTMLCanvas {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlCanvas) OnKeyDown(h EventHandler) HTMLCanvas {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlCanvas) OnKeyPress(h EventHandler) HTMLCanvas {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlCanvas) OnKeyup(h EventHandler) HTMLCanvas {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlCanvas) OnMouseDown(h EventHandler) HTMLCanvas {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlCanvas) OnMouseMove(h EventHandler) HTMLCanvas {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlCanvas) OnMouseOut(h EventHandler) HTMLCanvas {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlCanvas) OnMouseOver(h EventHandler) HTMLCanvas {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlCanvas) OnMouseUp(h EventHandler) HTMLCanvas {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlCanvas) OnPaste(h EventHandler) HTMLCanvas {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlCanvas) OnReset(h EventHandler) HTMLCanvas {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlCanvas) OnScroll(h EventHandler) HTMLCanvas {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlCanvas) OnSearch(h EventHandler) HTMLCanvas {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlCanvas) OnSelect(h EventHandler) HTMLCanvas {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlCanvas) OnSubmit(h EventHandler) HTMLCanvas {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlCanvas) OnWheel(h EventHandler) HTMLCanvas {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLCaption is the interface that describes a <caption> HTML element.
type HTMLCaption interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLCaption

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLCaption

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLCaption

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLCaption

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLCaption

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLCaption

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLCaption

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLCaption

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLCaption

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLCaption

	// ID specifies a unique id for an element.
	ID(v string) HTMLCaption

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLCaption

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLCaption

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLCaption

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLCaption

	// Title specifies extra information about an element.
	Title(v string) HTMLCaption

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLCaption

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLCaption

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLCaption

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLCaption

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLCaption

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLCaption

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLCaption

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLCaption

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLCaption

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLCaption

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLCaption

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLCaption

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLCaption

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLCaption

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLCaption

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLCaption

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLCaption

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLCaption

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLCaption

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLCaption

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLCaption

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLCaption

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLCaption

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLCaption

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLCaption

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLCaption

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLCaption

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLCaption

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLCaption

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLCaption

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLCaption

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLCaption
}

// Caption returns an HTML element that defines a table caption.
func Caption() HTMLCaption {
	e := &htmlCaption{
		elem: elem{
			tag:         "caption",
			selfClosing: false,
		},
	}

	return e
}

type htmlCaption struct {
	elem
}

func (e *htmlCaption) Body(elems ...UI) HTMLCaption {
	e.setBody(elems...)
	return e
}

func (e *htmlCaption) Text(v interface{}) HTMLCaption {
	return e.Body(Text(v))
}

func (e *htmlCaption) AccessKey(v string) HTMLCaption {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlCaption) Aria(k string, v interface{}) HTMLCaption {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlCaption) Class(v string) HTMLCaption {
	e.setAttr("class", v)
	return e
}

func (e *htmlCaption) ContentEditable(v bool) HTMLCaption {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlCaption) DataSet(k string, v interface{}) HTMLCaption {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlCaption) Dir(v string) HTMLCaption {
	e.setAttr("dir", v)
	return e
}

func (e *htmlCaption) Draggable(v bool) HTMLCaption {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlCaption) Hidden(v bool) HTMLCaption {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlCaption) ID(v string) HTMLCaption {
	e.setAttr("id", v)
	return e
}

func (e *htmlCaption) Lang(v string) HTMLCaption {
	e.setAttr("lang", v)
	return e
}

func (e *htmlCaption) Spellcheck(v bool) HTMLCaption {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlCaption) Style(k, v string) HTMLCaption {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlCaption) TabIndex(v int) HTMLCaption {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlCaption) Title(v string) HTMLCaption {
	e.setAttr("title", v)
	return e
}

func (e *htmlCaption) OnBlur(h EventHandler) HTMLCaption {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlCaption) OnChange(h EventHandler) HTMLCaption {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlCaption) OnClick(h EventHandler) HTMLCaption {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlCaption) OnContextMenu(h EventHandler) HTMLCaption {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlCaption) OnCopy(h EventHandler) HTMLCaption {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlCaption) OnCut(h EventHandler) HTMLCaption {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlCaption) OnDblClick(h EventHandler) HTMLCaption {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlCaption) OnDrag(h EventHandler) HTMLCaption {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlCaption) OnDragEnd(h EventHandler) HTMLCaption {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlCaption) OnDragEnter(h EventHandler) HTMLCaption {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlCaption) OnDragLeave(h EventHandler) HTMLCaption {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlCaption) OnDragOver(h EventHandler) HTMLCaption {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlCaption) OnDragStart(h EventHandler) HTMLCaption {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlCaption) OnDrop(h EventHandler) HTMLCaption {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlCaption) OnFocus(h EventHandler) HTMLCaption {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlCaption) OnInput(h EventHandler) HTMLCaption {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlCaption) OnInvalid(h EventHandler) HTMLCaption {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlCaption) OnKeyDown(h EventHandler) HTMLCaption {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlCaption) OnKeyPress(h EventHandler) HTMLCaption {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlCaption) OnKeyup(h EventHandler) HTMLCaption {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlCaption) OnMouseDown(h EventHandler) HTMLCaption {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlCaption) OnMouseMove(h EventHandler) HTMLCaption {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlCaption) OnMouseOut(h EventHandler) HTMLCaption {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlCaption) OnMouseOver(h EventHandler) HTMLCaption {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlCaption) OnMouseUp(h EventHandler) HTMLCaption {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlCaption) OnPaste(h EventHandler) HTMLCaption {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlCaption) OnReset(h EventHandler) HTMLCaption {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlCaption) OnScroll(h EventHandler) HTMLCaption {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlCaption) OnSearch(h EventHandler) HTMLCaption {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlCaption) OnSelect(h EventHandler) HTMLCaption {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlCaption) OnSubmit(h EventHandler) HTMLCaption {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlCaption) OnWheel(h EventHandler) HTMLCaption {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLCite is the interface that describes a <cite> HTML element.
type HTMLCite interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLCite

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLCite

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLCite

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLCite

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLCite

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLCite

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLCite

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLCite

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLCite

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLCite

	// ID specifies a unique id for an element.
	ID(v string) HTMLCite

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLCite

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLCite

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLCite

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLCite

	// Title specifies extra information about an element.
	Title(v string) HTMLCite

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLCite

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLCite

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLCite

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLCite

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLCite

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLCite

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLCite

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLCite

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLCite

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLCite

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLCite

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLCite

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLCite

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLCite

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLCite

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLCite

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLCite

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLCite

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLCite

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLCite

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLCite

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLCite

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLCite

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLCite

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLCite

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLCite

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLCite

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLCite

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLCite

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLCite

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLCite

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLCite
}

// Cite returns an HTML element that defines the title of a work.
func Cite() HTMLCite {
	e := &htmlCite{
		elem: elem{
			tag:         "cite",
			selfClosing: false,
		},
	}

	return e
}

type htmlCite struct {
	elem
}

func (e *htmlCite) Body(elems ...UI) HTMLCite {
	e.setBody(elems...)
	return e
}

func (e *htmlCite) Text(v interface{}) HTMLCite {
	return e.Body(Text(v))
}

func (e *htmlCite) AccessKey(v string) HTMLCite {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlCite) Aria(k string, v interface{}) HTMLCite {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlCite) Class(v string) HTMLCite {
	e.setAttr("class", v)
	return e
}

func (e *htmlCite) ContentEditable(v bool) HTMLCite {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlCite) DataSet(k string, v interface{}) HTMLCite {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlCite) Dir(v string) HTMLCite {
	e.setAttr("dir", v)
	return e
}

func (e *htmlCite) Draggable(v bool) HTMLCite {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlCite) Hidden(v bool) HTMLCite {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlCite) ID(v string) HTMLCite {
	e.setAttr("id", v)
	return e
}

func (e *htmlCite) Lang(v string) HTMLCite {
	e.setAttr("lang", v)
	return e
}

func (e *htmlCite) Spellcheck(v bool) HTMLCite {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlCite) Style(k, v string) HTMLCite {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlCite) TabIndex(v int) HTMLCite {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlCite) Title(v string) HTMLCite {
	e.setAttr("title", v)
	return e
}

func (e *htmlCite) OnBlur(h EventHandler) HTMLCite {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlCite) OnChange(h EventHandler) HTMLCite {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlCite) OnClick(h EventHandler) HTMLCite {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlCite) OnContextMenu(h EventHandler) HTMLCite {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlCite) OnCopy(h EventHandler) HTMLCite {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlCite) OnCut(h EventHandler) HTMLCite {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlCite) OnDblClick(h EventHandler) HTMLCite {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlCite) OnDrag(h EventHandler) HTMLCite {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlCite) OnDragEnd(h EventHandler) HTMLCite {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlCite) OnDragEnter(h EventHandler) HTMLCite {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlCite) OnDragLeave(h EventHandler) HTMLCite {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlCite) OnDragOver(h EventHandler) HTMLCite {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlCite) OnDragStart(h EventHandler) HTMLCite {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlCite) OnDrop(h EventHandler) HTMLCite {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlCite) OnFocus(h EventHandler) HTMLCite {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlCite) OnInput(h EventHandler) HTMLCite {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlCite) OnInvalid(h EventHandler) HTMLCite {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlCite) OnKeyDown(h EventHandler) HTMLCite {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlCite) OnKeyPress(h EventHandler) HTMLCite {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlCite) OnKeyup(h EventHandler) HTMLCite {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlCite) OnMouseDown(h EventHandler) HTMLCite {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlCite) OnMouseMove(h EventHandler) HTMLCite {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlCite) OnMouseOut(h EventHandler) HTMLCite {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlCite) OnMouseOver(h EventHandler) HTMLCite {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlCite) OnMouseUp(h EventHandler) HTMLCite {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlCite) OnPaste(h EventHandler) HTMLCite {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlCite) OnReset(h EventHandler) HTMLCite {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlCite) OnScroll(h EventHandler) HTMLCite {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlCite) OnSearch(h EventHandler) HTMLCite {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlCite) OnSelect(h EventHandler) HTMLCite {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlCite) OnSubmit(h EventHandler) HTMLCite {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlCite) OnWheel(h EventHandler) HTMLCite {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLCode is the interface that describes a <code> HTML element.
type HTMLCode interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLCode

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLCode

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLCode

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLCode

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLCode

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLCode

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLCode

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLCode

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLCode

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLCode

	// ID specifies a unique id for an element.
	ID(v string) HTMLCode

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLCode

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLCode

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLCode

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLCode

	// Title specifies extra information about an element.
	Title(v string) HTMLCode

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLCode

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLCode

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLCode

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLCode

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLCode

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLCode

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLCode

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLCode

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLCode

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLCode

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLCode

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLCode

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLCode

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLCode

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLCode

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLCode

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLCode

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLCode

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLCode

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLCode

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLCode

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLCode

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLCode

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLCode

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLCode

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLCode

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLCode

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLCode

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLCode

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLCode

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLCode

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLCode
}

// Code returns an HTML element that defines a piece of computer code.
func Code() HTMLCode {
	e := &htmlCode{
		elem: elem{
			tag:         "code",
			selfClosing: false,
		},
	}

	return e
}

type htmlCode struct {
	elem
}

func (e *htmlCode) Body(elems ...UI) HTMLCode {
	e.setBody(elems...)
	return e
}

func (e *htmlCode) Text(v interface{}) HTMLCode {
	return e.Body(Text(v))
}

func (e *htmlCode) AccessKey(v string) HTMLCode {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlCode) Aria(k string, v interface{}) HTMLCode {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlCode) Class(v string) HTMLCode {
	e.setAttr("class", v)
	return e
}

func (e *htmlCode) ContentEditable(v bool) HTMLCode {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlCode) DataSet(k string, v interface{}) HTMLCode {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlCode) Dir(v string) HTMLCode {
	e.setAttr("dir", v)
	return e
}

func (e *htmlCode) Draggable(v bool) HTMLCode {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlCode) Hidden(v bool) HTMLCode {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlCode) ID(v string) HTMLCode {
	e.setAttr("id", v)
	return e
}

func (e *htmlCode) Lang(v string) HTMLCode {
	e.setAttr("lang", v)
	return e
}

func (e *htmlCode) Spellcheck(v bool) HTMLCode {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlCode) Style(k, v string) HTMLCode {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlCode) TabIndex(v int) HTMLCode {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlCode) Title(v string) HTMLCode {
	e.setAttr("title", v)
	return e
}

func (e *htmlCode) OnBlur(h EventHandler) HTMLCode {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlCode) OnChange(h EventHandler) HTMLCode {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlCode) OnClick(h EventHandler) HTMLCode {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlCode) OnContextMenu(h EventHandler) HTMLCode {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlCode) OnCopy(h EventHandler) HTMLCode {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlCode) OnCut(h EventHandler) HTMLCode {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlCode) OnDblClick(h EventHandler) HTMLCode {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlCode) OnDrag(h EventHandler) HTMLCode {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlCode) OnDragEnd(h EventHandler) HTMLCode {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlCode) OnDragEnter(h EventHandler) HTMLCode {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlCode) OnDragLeave(h EventHandler) HTMLCode {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlCode) OnDragOver(h EventHandler) HTMLCode {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlCode) OnDragStart(h EventHandler) HTMLCode {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlCode) OnDrop(h EventHandler) HTMLCode {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlCode) OnFocus(h EventHandler) HTMLCode {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlCode) OnInput(h EventHandler) HTMLCode {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlCode) OnInvalid(h EventHandler) HTMLCode {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlCode) OnKeyDown(h EventHandler) HTMLCode {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlCode) OnKeyPress(h EventHandler) HTMLCode {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlCode) OnKeyup(h EventHandler) HTMLCode {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlCode) OnMouseDown(h EventHandler) HTMLCode {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlCode) OnMouseMove(h EventHandler) HTMLCode {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlCode) OnMouseOut(h EventHandler) HTMLCode {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlCode) OnMouseOver(h EventHandler) HTMLCode {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlCode) OnMouseUp(h EventHandler) HTMLCode {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlCode) OnPaste(h EventHandler) HTMLCode {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlCode) OnReset(h EventHandler) HTMLCode {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlCode) OnScroll(h EventHandler) HTMLCode {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlCode) OnSearch(h EventHandler) HTMLCode {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlCode) OnSelect(h EventHandler) HTMLCode {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlCode) OnSubmit(h EventHandler) HTMLCode {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlCode) OnWheel(h EventHandler) HTMLCode {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLCol is the interface that describes a <col> HTML element.
type HTMLCol interface {
	UI

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLCol

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLCol

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLCol

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLCol

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLCol

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLCol

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLCol

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLCol

	// ID specifies a unique id for an element.
	ID(v string) HTMLCol

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLCol

	// Span specifies the number of columns to span.
	Span(v int) HTMLCol

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLCol

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLCol

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLCol

	// Title specifies extra information about an element.
	Title(v string) HTMLCol

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLCol

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLCol

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLCol

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLCol

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLCol

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLCol

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLCol

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLCol

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLCol

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLCol

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLCol

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLCol

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLCol

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLCol

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLCol

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLCol

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLCol

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLCol

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLCol

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLCol

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLCol

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLCol

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLCol

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLCol

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLCol

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLCol

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLCol

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLCol

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLCol

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLCol

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLCol

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLCol
}

// Col returns an HTML element that specifies column properties for each column within a colgroup element.
func Col() HTMLCol {
	e := &htmlCol{
		elem: elem{
			tag:         "col",
			selfClosing: true,
		},
	}

	return e
}

type htmlCol struct {
	elem
}

func (e *htmlCol) AccessKey(v string) HTMLCol {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlCol) Aria(k string, v interface{}) HTMLCol {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlCol) Class(v string) HTMLCol {
	e.setAttr("class", v)
	return e
}

func (e *htmlCol) ContentEditable(v bool) HTMLCol {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlCol) DataSet(k string, v interface{}) HTMLCol {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlCol) Dir(v string) HTMLCol {
	e.setAttr("dir", v)
	return e
}

func (e *htmlCol) Draggable(v bool) HTMLCol {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlCol) Hidden(v bool) HTMLCol {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlCol) ID(v string) HTMLCol {
	e.setAttr("id", v)
	return e
}

func (e *htmlCol) Lang(v string) HTMLCol {
	e.setAttr("lang", v)
	return e
}

func (e *htmlCol) Span(v int) HTMLCol {
	e.setAttr("span", v)
	return e
}

func (e *htmlCol) Spellcheck(v bool) HTMLCol {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlCol) Style(k, v string) HTMLCol {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlCol) TabIndex(v int) HTMLCol {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlCol) Title(v string) HTMLCol {
	e.setAttr("title", v)
	return e
}

func (e *htmlCol) OnBlur(h EventHandler) HTMLCol {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlCol) OnChange(h EventHandler) HTMLCol {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlCol) OnClick(h EventHandler) HTMLCol {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlCol) OnContextMenu(h EventHandler) HTMLCol {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlCol) OnCopy(h EventHandler) HTMLCol {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlCol) OnCut(h EventHandler) HTMLCol {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlCol) OnDblClick(h EventHandler) HTMLCol {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlCol) OnDrag(h EventHandler) HTMLCol {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlCol) OnDragEnd(h EventHandler) HTMLCol {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlCol) OnDragEnter(h EventHandler) HTMLCol {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlCol) OnDragLeave(h EventHandler) HTMLCol {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlCol) OnDragOver(h EventHandler) HTMLCol {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlCol) OnDragStart(h EventHandler) HTMLCol {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlCol) OnDrop(h EventHandler) HTMLCol {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlCol) OnFocus(h EventHandler) HTMLCol {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlCol) OnInput(h EventHandler) HTMLCol {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlCol) OnInvalid(h EventHandler) HTMLCol {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlCol) OnKeyDown(h EventHandler) HTMLCol {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlCol) OnKeyPress(h EventHandler) HTMLCol {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlCol) OnKeyup(h EventHandler) HTMLCol {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlCol) OnMouseDown(h EventHandler) HTMLCol {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlCol) OnMouseMove(h EventHandler) HTMLCol {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlCol) OnMouseOut(h EventHandler) HTMLCol {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlCol) OnMouseOver(h EventHandler) HTMLCol {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlCol) OnMouseUp(h EventHandler) HTMLCol {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlCol) OnPaste(h EventHandler) HTMLCol {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlCol) OnReset(h EventHandler) HTMLCol {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlCol) OnScroll(h EventHandler) HTMLCol {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlCol) OnSearch(h EventHandler) HTMLCol {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlCol) OnSelect(h EventHandler) HTMLCol {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlCol) OnSubmit(h EventHandler) HTMLCol {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlCol) OnWheel(h EventHandler) HTMLCol {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLColGroup is the interface that describes a <colgroup> HTML element.
type HTMLColGroup interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLColGroup

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLColGroup

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLColGroup

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLColGroup

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLColGroup

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLColGroup

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLColGroup

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLColGroup

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLColGroup

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLColGroup

	// ID specifies a unique id for an element.
	ID(v string) HTMLColGroup

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLColGroup

	// Span specifies the number of columns to span.
	Span(v int) HTMLColGroup

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLColGroup

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLColGroup

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLColGroup

	// Title specifies extra information about an element.
	Title(v string) HTMLColGroup

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLColGroup

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLColGroup

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLColGroup

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLColGroup

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLColGroup

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLColGroup

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLColGroup

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLColGroup

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLColGroup

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLColGroup

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLColGroup

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLColGroup

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLColGroup

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLColGroup

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLColGroup

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLColGroup

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLColGroup

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLColGroup

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLColGroup

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLColGroup

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLColGroup

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLColGroup

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLColGroup

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLColGroup

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLColGroup

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLColGroup

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLColGroup

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLColGroup

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLColGroup

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLColGroup

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLColGroup

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLColGroup
}

// ColGroup returns an HTML element that specifies a group of one or more columns in a table for formatting.
func ColGroup() HTMLColGroup {
	e := &htmlColGroup{
		elem: elem{
			tag:         "colgroup",
			selfClosing: false,
		},
	}

	return e
}

type htmlColGroup struct {
	elem
}

func (e *htmlColGroup) Body(elems ...UI) HTMLColGroup {
	e.setBody(elems...)
	return e
}

func (e *htmlColGroup) Text(v interface{}) HTMLColGroup {
	return e.Body(Text(v))
}

func (e *htmlColGroup) AccessKey(v string) HTMLColGroup {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlColGroup) Aria(k string, v interface{}) HTMLColGroup {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlColGroup) Class(v string) HTMLColGroup {
	e.setAttr("class", v)
	return e
}

func (e *htmlColGroup) ContentEditable(v bool) HTMLColGroup {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlColGroup) DataSet(k string, v interface{}) HTMLColGroup {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlColGroup) Dir(v string) HTMLColGroup {
	e.setAttr("dir", v)
	return e
}

func (e *htmlColGroup) Draggable(v bool) HTMLColGroup {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlColGroup) Hidden(v bool) HTMLColGroup {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlColGroup) ID(v string) HTMLColGroup {
	e.setAttr("id", v)
	return e
}

func (e *htmlColGroup) Lang(v string) HTMLColGroup {
	e.setAttr("lang", v)
	return e
}

func (e *htmlColGroup) Span(v int) HTMLColGroup {
	e.setAttr("span", v)
	return e
}

func (e *htmlColGroup) Spellcheck(v bool) HTMLColGroup {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlColGroup) Style(k, v string) HTMLColGroup {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlColGroup) TabIndex(v int) HTMLColGroup {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlColGroup) Title(v string) HTMLColGroup {
	e.setAttr("title", v)
	return e
}

func (e *htmlColGroup) OnBlur(h EventHandler) HTMLColGroup {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlColGroup) OnChange(h EventHandler) HTMLColGroup {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlColGroup) OnClick(h EventHandler) HTMLColGroup {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlColGroup) OnContextMenu(h EventHandler) HTMLColGroup {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlColGroup) OnCopy(h EventHandler) HTMLColGroup {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlColGroup) OnCut(h EventHandler) HTMLColGroup {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlColGroup) OnDblClick(h EventHandler) HTMLColGroup {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlColGroup) OnDrag(h EventHandler) HTMLColGroup {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlColGroup) OnDragEnd(h EventHandler) HTMLColGroup {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlColGroup) OnDragEnter(h EventHandler) HTMLColGroup {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlColGroup) OnDragLeave(h EventHandler) HTMLColGroup {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlColGroup) OnDragOver(h EventHandler) HTMLColGroup {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlColGroup) OnDragStart(h EventHandler) HTMLColGroup {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlColGroup) OnDrop(h EventHandler) HTMLColGroup {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlColGroup) OnFocus(h EventHandler) HTMLColGroup {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlColGroup) OnInput(h EventHandler) HTMLColGroup {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlColGroup) OnInvalid(h EventHandler) HTMLColGroup {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlColGroup) OnKeyDown(h EventHandler) HTMLColGroup {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlColGroup) OnKeyPress(h EventHandler) HTMLColGroup {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlColGroup) OnKeyup(h EventHandler) HTMLColGroup {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlColGroup) OnMouseDown(h EventHandler) HTMLColGroup {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlColGroup) OnMouseMove(h EventHandler) HTMLColGroup {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlColGroup) OnMouseOut(h EventHandler) HTMLColGroup {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlColGroup) OnMouseOver(h EventHandler) HTMLColGroup {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlColGroup) OnMouseUp(h EventHandler) HTMLColGroup {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlColGroup) OnPaste(h EventHandler) HTMLColGroup {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlColGroup) OnReset(h EventHandler) HTMLColGroup {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlColGroup) OnScroll(h EventHandler) HTMLColGroup {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlColGroup) OnSearch(h EventHandler) HTMLColGroup {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlColGroup) OnSelect(h EventHandler) HTMLColGroup {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlColGroup) OnSubmit(h EventHandler) HTMLColGroup {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlColGroup) OnWheel(h EventHandler) HTMLColGroup {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLData is the interface that describes a <data> HTML element.
type HTMLData interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLData

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLData

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLData

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLData

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLData

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLData

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLData

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLData

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLData

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLData

	// ID specifies a unique id for an element.
	ID(v string) HTMLData

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLData

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLData

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLData

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLData

	// Title specifies extra information about an element.
	Title(v string) HTMLData

	// Value specifies the value of the element.
	Value(v interface{}) HTMLData
}

// Data returns an HTML element that links the given content with a machine-readable translation.
func Data() HTMLData {
	e := &htmlData{
		elem: elem{
			tag:         "data",
			selfClosing: false,
		},
	}

	return e
}

type htmlData struct {
	elem
}

func (e *htmlData) Body(elems ...UI) HTMLData {
	e.setBody(elems...)
	return e
}

func (e *htmlData) Text(v interface{}) HTMLData {
	return e.Body(Text(v))
}

func (e *htmlData) AccessKey(v string) HTMLData {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlData) Aria(k string, v interface{}) HTMLData {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlData) Class(v string) HTMLData {
	e.setAttr("class", v)
	return e
}

func (e *htmlData) ContentEditable(v bool) HTMLData {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlData) DataSet(k string, v interface{}) HTMLData {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlData) Dir(v string) HTMLData {
	e.setAttr("dir", v)
	return e
}

func (e *htmlData) Draggable(v bool) HTMLData {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlData) Hidden(v bool) HTMLData {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlData) ID(v string) HTMLData {
	e.setAttr("id", v)
	return e
}

func (e *htmlData) Lang(v string) HTMLData {
	e.setAttr("lang", v)
	return e
}

func (e *htmlData) Spellcheck(v bool) HTMLData {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlData) Style(k, v string) HTMLData {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlData) TabIndex(v int) HTMLData {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlData) Title(v string) HTMLData {
	e.setAttr("title", v)
	return e
}

func (e *htmlData) Value(v interface{}) HTMLData {
	e.setAttr("value", v)
	return e
}

// HTMLDataList is the interface that describes a <datalist> HTML element.
type HTMLDataList interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLDataList

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLDataList

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLDataList

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLDataList

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLDataList

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLDataList

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLDataList

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLDataList

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLDataList

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLDataList

	// ID specifies a unique id for an element.
	ID(v string) HTMLDataList

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLDataList

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLDataList

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLDataList

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLDataList

	// Title specifies extra information about an element.
	Title(v string) HTMLDataList

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLDataList

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLDataList

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLDataList

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLDataList

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLDataList

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLDataList

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLDataList

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLDataList

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLDataList

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLDataList

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLDataList

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLDataList

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLDataList

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLDataList

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLDataList

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLDataList

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLDataList

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLDataList

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLDataList

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLDataList

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLDataList

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLDataList

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLDataList

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLDataList

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLDataList

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLDataList

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLDataList

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLDataList

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLDataList

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLDataList

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLDataList

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLDataList
}

// DataList returns an HTML element that specifies a list of pre-defined options for input controls.
func DataList() HTMLDataList {
	e := &htmlDataList{
		elem: elem{
			tag:         "datalist",
			selfClosing: false,
		},
	}

	return e
}

type htmlDataList struct {
	elem
}

func (e *htmlDataList) Body(elems ...UI) HTMLDataList {
	e.setBody(elems...)
	return e
}

func (e *htmlDataList) Text(v interface{}) HTMLDataList {
	return e.Body(Text(v))
}

func (e *htmlDataList) AccessKey(v string) HTMLDataList {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlDataList) Aria(k string, v interface{}) HTMLDataList {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlDataList) Class(v string) HTMLDataList {
	e.setAttr("class", v)
	return e
}

func (e *htmlDataList) ContentEditable(v bool) HTMLDataList {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlDataList) DataSet(k string, v interface{}) HTMLDataList {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlDataList) Dir(v string) HTMLDataList {
	e.setAttr("dir", v)
	return e
}

func (e *htmlDataList) Draggable(v bool) HTMLDataList {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlDataList) Hidden(v bool) HTMLDataList {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlDataList) ID(v string) HTMLDataList {
	e.setAttr("id", v)
	return e
}

func (e *htmlDataList) Lang(v string) HTMLDataList {
	e.setAttr("lang", v)
	return e
}

func (e *htmlDataList) Spellcheck(v bool) HTMLDataList {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlDataList) Style(k, v string) HTMLDataList {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlDataList) TabIndex(v int) HTMLDataList {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlDataList) Title(v string) HTMLDataList {
	e.setAttr("title", v)
	return e
}

func (e *htmlDataList) OnBlur(h EventHandler) HTMLDataList {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlDataList) OnChange(h EventHandler) HTMLDataList {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlDataList) OnClick(h EventHandler) HTMLDataList {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlDataList) OnContextMenu(h EventHandler) HTMLDataList {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlDataList) OnCopy(h EventHandler) HTMLDataList {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlDataList) OnCut(h EventHandler) HTMLDataList {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlDataList) OnDblClick(h EventHandler) HTMLDataList {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlDataList) OnDrag(h EventHandler) HTMLDataList {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlDataList) OnDragEnd(h EventHandler) HTMLDataList {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlDataList) OnDragEnter(h EventHandler) HTMLDataList {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlDataList) OnDragLeave(h EventHandler) HTMLDataList {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlDataList) OnDragOver(h EventHandler) HTMLDataList {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlDataList) OnDragStart(h EventHandler) HTMLDataList {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlDataList) OnDrop(h EventHandler) HTMLDataList {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlDataList) OnFocus(h EventHandler) HTMLDataList {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlDataList) OnInput(h EventHandler) HTMLDataList {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlDataList) OnInvalid(h EventHandler) HTMLDataList {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlDataList) OnKeyDown(h EventHandler) HTMLDataList {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlDataList) OnKeyPress(h EventHandler) HTMLDataList {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlDataList) OnKeyup(h EventHandler) HTMLDataList {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlDataList) OnMouseDown(h EventHandler) HTMLDataList {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlDataList) OnMouseMove(h EventHandler) HTMLDataList {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlDataList) OnMouseOut(h EventHandler) HTMLDataList {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlDataList) OnMouseOver(h EventHandler) HTMLDataList {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlDataList) OnMouseUp(h EventHandler) HTMLDataList {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlDataList) OnPaste(h EventHandler) HTMLDataList {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlDataList) OnReset(h EventHandler) HTMLDataList {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlDataList) OnScroll(h EventHandler) HTMLDataList {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlDataList) OnSearch(h EventHandler) HTMLDataList {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlDataList) OnSelect(h EventHandler) HTMLDataList {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlDataList) OnSubmit(h EventHandler) HTMLDataList {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlDataList) OnWheel(h EventHandler) HTMLDataList {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLDd is the interface that describes a <dd> HTML element.
type HTMLDd interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLDd

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLDd

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLDd

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLDd

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLDd

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLDd

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLDd

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLDd

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLDd

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLDd

	// ID specifies a unique id for an element.
	ID(v string) HTMLDd

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLDd

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLDd

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLDd

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLDd

	// Title specifies extra information about an element.
	Title(v string) HTMLDd

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLDd

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLDd

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLDd

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLDd

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLDd

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLDd

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLDd

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLDd

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLDd

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLDd

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLDd

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLDd

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLDd

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLDd

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLDd

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLDd

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLDd

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLDd

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLDd

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLDd

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLDd

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLDd

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLDd

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLDd

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLDd

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLDd

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLDd

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLDd

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLDd

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLDd

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLDd

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLDd
}

// Dd returns an HTML element that defines a description/value of a term in a description list.
func Dd() HTMLDd {
	e := &htmlDd{
		elem: elem{
			tag:         "dd",
			selfClosing: false,
		},
	}

	return e
}

type htmlDd struct {
	elem
}

func (e *htmlDd) Body(elems ...UI) HTMLDd {
	e.setBody(elems...)
	return e
}

func (e *htmlDd) Text(v interface{}) HTMLDd {
	return e.Body(Text(v))
}

func (e *htmlDd) AccessKey(v string) HTMLDd {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlDd) Aria(k string, v interface{}) HTMLDd {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlDd) Class(v string) HTMLDd {
	e.setAttr("class", v)
	return e
}

func (e *htmlDd) ContentEditable(v bool) HTMLDd {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlDd) DataSet(k string, v interface{}) HTMLDd {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlDd) Dir(v string) HTMLDd {
	e.setAttr("dir", v)
	return e
}

func (e *htmlDd) Draggable(v bool) HTMLDd {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlDd) Hidden(v bool) HTMLDd {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlDd) ID(v string) HTMLDd {
	e.setAttr("id", v)
	return e
}

func (e *htmlDd) Lang(v string) HTMLDd {
	e.setAttr("lang", v)
	return e
}

func (e *htmlDd) Spellcheck(v bool) HTMLDd {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlDd) Style(k, v string) HTMLDd {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlDd) TabIndex(v int) HTMLDd {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlDd) Title(v string) HTMLDd {
	e.setAttr("title", v)
	return e
}

func (e *htmlDd) OnBlur(h EventHandler) HTMLDd {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlDd) OnChange(h EventHandler) HTMLDd {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlDd) OnClick(h EventHandler) HTMLDd {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlDd) OnContextMenu(h EventHandler) HTMLDd {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlDd) OnCopy(h EventHandler) HTMLDd {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlDd) OnCut(h EventHandler) HTMLDd {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlDd) OnDblClick(h EventHandler) HTMLDd {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlDd) OnDrag(h EventHandler) HTMLDd {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlDd) OnDragEnd(h EventHandler) HTMLDd {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlDd) OnDragEnter(h EventHandler) HTMLDd {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlDd) OnDragLeave(h EventHandler) HTMLDd {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlDd) OnDragOver(h EventHandler) HTMLDd {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlDd) OnDragStart(h EventHandler) HTMLDd {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlDd) OnDrop(h EventHandler) HTMLDd {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlDd) OnFocus(h EventHandler) HTMLDd {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlDd) OnInput(h EventHandler) HTMLDd {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlDd) OnInvalid(h EventHandler) HTMLDd {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlDd) OnKeyDown(h EventHandler) HTMLDd {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlDd) OnKeyPress(h EventHandler) HTMLDd {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlDd) OnKeyup(h EventHandler) HTMLDd {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlDd) OnMouseDown(h EventHandler) HTMLDd {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlDd) OnMouseMove(h EventHandler) HTMLDd {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlDd) OnMouseOut(h EventHandler) HTMLDd {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlDd) OnMouseOver(h EventHandler) HTMLDd {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlDd) OnMouseUp(h EventHandler) HTMLDd {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlDd) OnPaste(h EventHandler) HTMLDd {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlDd) OnReset(h EventHandler) HTMLDd {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlDd) OnScroll(h EventHandler) HTMLDd {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlDd) OnSearch(h EventHandler) HTMLDd {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlDd) OnSelect(h EventHandler) HTMLDd {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlDd) OnSubmit(h EventHandler) HTMLDd {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlDd) OnWheel(h EventHandler) HTMLDd {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLDel is the interface that describes a <del> HTML element.
type HTMLDel interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLDel

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLDel

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLDel

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLDel

	// Cite specifies a URL which explains the quote/deleted/inserted text.
	Cite(v string) HTMLDel

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLDel

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLDel

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLDel

	// DateTime specifies the date and time.
	DateTime(v string) HTMLDel

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLDel

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLDel

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLDel

	// ID specifies a unique id for an element.
	ID(v string) HTMLDel

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLDel

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLDel

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLDel

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLDel

	// Title specifies extra information about an element.
	Title(v string) HTMLDel

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLDel

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLDel

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLDel

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLDel

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLDel

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLDel

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLDel

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLDel

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLDel

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLDel

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLDel

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLDel

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLDel

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLDel

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLDel

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLDel

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLDel

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLDel

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLDel

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLDel

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLDel

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLDel

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLDel

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLDel

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLDel

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLDel

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLDel

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLDel

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLDel

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLDel

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLDel

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLDel
}

// Del returns an HTML element that defines text that has been deleted from a document.
func Del() HTMLDel {
	e := &htmlDel{
		elem: elem{
			tag:         "del",
			selfClosing: false,
		},
	}

	return e
}

type htmlDel struct {
	elem
}

func (e *htmlDel) Body(elems ...UI) HTMLDel {
	e.setBody(elems...)
	return e
}

func (e *htmlDel) Text(v interface{}) HTMLDel {
	return e.Body(Text(v))
}

func (e *htmlDel) AccessKey(v string) HTMLDel {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlDel) Aria(k string, v interface{}) HTMLDel {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlDel) Cite(v string) HTMLDel {
	e.setAttr("cite", StaticResource(v))
	return e
}

func (e *htmlDel) Class(v string) HTMLDel {
	e.setAttr("class", v)
	return e
}

func (e *htmlDel) ContentEditable(v bool) HTMLDel {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlDel) DataSet(k string, v interface{}) HTMLDel {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlDel) DateTime(v string) HTMLDel {
	e.setAttr("datetime", v)
	return e
}

func (e *htmlDel) Dir(v string) HTMLDel {
	e.setAttr("dir", v)
	return e
}

func (e *htmlDel) Draggable(v bool) HTMLDel {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlDel) Hidden(v bool) HTMLDel {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlDel) ID(v string) HTMLDel {
	e.setAttr("id", v)
	return e
}

func (e *htmlDel) Lang(v string) HTMLDel {
	e.setAttr("lang", v)
	return e
}

func (e *htmlDel) Spellcheck(v bool) HTMLDel {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlDel) Style(k, v string) HTMLDel {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlDel) TabIndex(v int) HTMLDel {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlDel) Title(v string) HTMLDel {
	e.setAttr("title", v)
	return e
}

func (e *htmlDel) OnBlur(h EventHandler) HTMLDel {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlDel) OnChange(h EventHandler) HTMLDel {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlDel) OnClick(h EventHandler) HTMLDel {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlDel) OnContextMenu(h EventHandler) HTMLDel {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlDel) OnCopy(h EventHandler) HTMLDel {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlDel) OnCut(h EventHandler) HTMLDel {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlDel) OnDblClick(h EventHandler) HTMLDel {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlDel) OnDrag(h EventHandler) HTMLDel {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlDel) OnDragEnd(h EventHandler) HTMLDel {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlDel) OnDragEnter(h EventHandler) HTMLDel {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlDel) OnDragLeave(h EventHandler) HTMLDel {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlDel) OnDragOver(h EventHandler) HTMLDel {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlDel) OnDragStart(h EventHandler) HTMLDel {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlDel) OnDrop(h EventHandler) HTMLDel {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlDel) OnFocus(h EventHandler) HTMLDel {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlDel) OnInput(h EventHandler) HTMLDel {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlDel) OnInvalid(h EventHandler) HTMLDel {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlDel) OnKeyDown(h EventHandler) HTMLDel {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlDel) OnKeyPress(h EventHandler) HTMLDel {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlDel) OnKeyup(h EventHandler) HTMLDel {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlDel) OnMouseDown(h EventHandler) HTMLDel {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlDel) OnMouseMove(h EventHandler) HTMLDel {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlDel) OnMouseOut(h EventHandler) HTMLDel {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlDel) OnMouseOver(h EventHandler) HTMLDel {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlDel) OnMouseUp(h EventHandler) HTMLDel {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlDel) OnPaste(h EventHandler) HTMLDel {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlDel) OnReset(h EventHandler) HTMLDel {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlDel) OnScroll(h EventHandler) HTMLDel {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlDel) OnSearch(h EventHandler) HTMLDel {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlDel) OnSelect(h EventHandler) HTMLDel {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlDel) OnSubmit(h EventHandler) HTMLDel {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlDel) OnWheel(h EventHandler) HTMLDel {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLDetails is the interface that describes a <details> HTML element.
type HTMLDetails interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLDetails

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLDetails

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLDetails

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLDetails

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLDetails

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLDetails

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLDetails

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLDetails

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLDetails

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLDetails

	// ID specifies a unique id for an element.
	ID(v string) HTMLDetails

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLDetails

	// Open specifies that the details should be visible (open) to the user.
	Open(v bool) HTMLDetails

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLDetails

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLDetails

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLDetails

	// Title specifies extra information about an element.
	Title(v string) HTMLDetails

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLDetails

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLDetails

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLDetails

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLDetails

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLDetails

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLDetails

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLDetails

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLDetails

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLDetails

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLDetails

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLDetails

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLDetails

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLDetails

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLDetails

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLDetails

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLDetails

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLDetails

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLDetails

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLDetails

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLDetails

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLDetails

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLDetails

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLDetails

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLDetails

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLDetails

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLDetails

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLDetails

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLDetails

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLDetails

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLDetails

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLDetails

	// OnToggle calls the given handler when the user opens or closes the details element.
	OnToggle(h EventHandler) HTMLDetails

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLDetails
}

// Details returns an HTML element that defines additional details that the user can view or hide.
func Details() HTMLDetails {
	e := &htmlDetails{
		elem: elem{
			tag:         "details",
			selfClosing: false,
		},
	}

	return e
}

type htmlDetails struct {
	elem
}

func (e *htmlDetails) Body(elems ...UI) HTMLDetails {
	e.setBody(elems...)
	return e
}

func (e *htmlDetails) Text(v interface{}) HTMLDetails {
	return e.Body(Text(v))
}

func (e *htmlDetails) AccessKey(v string) HTMLDetails {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlDetails) Aria(k string, v interface{}) HTMLDetails {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlDetails) Class(v string) HTMLDetails {
	e.setAttr("class", v)
	return e
}

func (e *htmlDetails) ContentEditable(v bool) HTMLDetails {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlDetails) DataSet(k string, v interface{}) HTMLDetails {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlDetails) Dir(v string) HTMLDetails {
	e.setAttr("dir", v)
	return e
}

func (e *htmlDetails) Draggable(v bool) HTMLDetails {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlDetails) Hidden(v bool) HTMLDetails {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlDetails) ID(v string) HTMLDetails {
	e.setAttr("id", v)
	return e
}

func (e *htmlDetails) Lang(v string) HTMLDetails {
	e.setAttr("lang", v)
	return e
}

func (e *htmlDetails) Open(v bool) HTMLDetails {
	e.setAttr("open", v)
	return e
}

func (e *htmlDetails) Spellcheck(v bool) HTMLDetails {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlDetails) Style(k, v string) HTMLDetails {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlDetails) TabIndex(v int) HTMLDetails {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlDetails) Title(v string) HTMLDetails {
	e.setAttr("title", v)
	return e
}

func (e *htmlDetails) OnBlur(h EventHandler) HTMLDetails {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlDetails) OnChange(h EventHandler) HTMLDetails {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlDetails) OnClick(h EventHandler) HTMLDetails {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlDetails) OnContextMenu(h EventHandler) HTMLDetails {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlDetails) OnCopy(h EventHandler) HTMLDetails {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlDetails) OnCut(h EventHandler) HTMLDetails {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlDetails) OnDblClick(h EventHandler) HTMLDetails {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlDetails) OnDrag(h EventHandler) HTMLDetails {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlDetails) OnDragEnd(h EventHandler) HTMLDetails {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlDetails) OnDragEnter(h EventHandler) HTMLDetails {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlDetails) OnDragLeave(h EventHandler) HTMLDetails {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlDetails) OnDragOver(h EventHandler) HTMLDetails {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlDetails) OnDragStart(h EventHandler) HTMLDetails {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlDetails) OnDrop(h EventHandler) HTMLDetails {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlDetails) OnFocus(h EventHandler) HTMLDetails {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlDetails) OnInput(h EventHandler) HTMLDetails {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlDetails) OnInvalid(h EventHandler) HTMLDetails {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlDetails) OnKeyDown(h EventHandler) HTMLDetails {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlDetails) OnKeyPress(h EventHandler) HTMLDetails {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlDetails) OnKeyup(h EventHandler) HTMLDetails {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlDetails) OnMouseDown(h EventHandler) HTMLDetails {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlDetails) OnMouseMove(h EventHandler) HTMLDetails {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlDetails) OnMouseOut(h EventHandler) HTMLDetails {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlDetails) OnMouseOver(h EventHandler) HTMLDetails {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlDetails) OnMouseUp(h EventHandler) HTMLDetails {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlDetails) OnPaste(h EventHandler) HTMLDetails {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlDetails) OnReset(h EventHandler) HTMLDetails {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlDetails) OnScroll(h EventHandler) HTMLDetails {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlDetails) OnSearch(h EventHandler) HTMLDetails {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlDetails) OnSelect(h EventHandler) HTMLDetails {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlDetails) OnSubmit(h EventHandler) HTMLDetails {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlDetails) OnToggle(h EventHandler) HTMLDetails {
	e.setEventHandler("toggle", h)
	return e
}

func (e *htmlDetails) OnWheel(h EventHandler) HTMLDetails {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLDfn is the interface that describes a <dfn> HTML element.
type HTMLDfn interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLDfn

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLDfn

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLDfn

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLDfn

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLDfn

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLDfn

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLDfn

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLDfn

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLDfn

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLDfn

	// ID specifies a unique id for an element.
	ID(v string) HTMLDfn

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLDfn

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLDfn

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLDfn

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLDfn

	// Title specifies extra information about an element.
	Title(v string) HTMLDfn

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLDfn

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLDfn

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLDfn

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLDfn

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLDfn

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLDfn

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLDfn

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLDfn

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLDfn

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLDfn

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLDfn

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLDfn

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLDfn

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLDfn

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLDfn

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLDfn

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLDfn

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLDfn

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLDfn

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLDfn

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLDfn

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLDfn

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLDfn

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLDfn

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLDfn

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLDfn

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLDfn

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLDfn

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLDfn

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLDfn

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLDfn

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLDfn
}

// Dfn returns an HTML element that represents the defining instance of a term.
func Dfn() HTMLDfn {
	e := &htmlDfn{
		elem: elem{
			tag:         "dfn",
			selfClosing: false,
		},
	}

	return e
}

type htmlDfn struct {
	elem
}

func (e *htmlDfn) Body(elems ...UI) HTMLDfn {
	e.setBody(elems...)
	return e
}

func (e *htmlDfn) Text(v interface{}) HTMLDfn {
	return e.Body(Text(v))
}

func (e *htmlDfn) AccessKey(v string) HTMLDfn {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlDfn) Aria(k string, v interface{}) HTMLDfn {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlDfn) Class(v string) HTMLDfn {
	e.setAttr("class", v)
	return e
}

func (e *htmlDfn) ContentEditable(v bool) HTMLDfn {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlDfn) DataSet(k string, v interface{}) HTMLDfn {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlDfn) Dir(v string) HTMLDfn {
	e.setAttr("dir", v)
	return e
}

func (e *htmlDfn) Draggable(v bool) HTMLDfn {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlDfn) Hidden(v bool) HTMLDfn {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlDfn) ID(v string) HTMLDfn {
	e.setAttr("id", v)
	return e
}

func (e *htmlDfn) Lang(v string) HTMLDfn {
	e.setAttr("lang", v)
	return e
}

func (e *htmlDfn) Spellcheck(v bool) HTMLDfn {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlDfn) Style(k, v string) HTMLDfn {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlDfn) TabIndex(v int) HTMLDfn {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlDfn) Title(v string) HTMLDfn {
	e.setAttr("title", v)
	return e
}

func (e *htmlDfn) OnBlur(h EventHandler) HTMLDfn {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlDfn) OnChange(h EventHandler) HTMLDfn {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlDfn) OnClick(h EventHandler) HTMLDfn {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlDfn) OnContextMenu(h EventHandler) HTMLDfn {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlDfn) OnCopy(h EventHandler) HTMLDfn {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlDfn) OnCut(h EventHandler) HTMLDfn {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlDfn) OnDblClick(h EventHandler) HTMLDfn {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlDfn) OnDrag(h EventHandler) HTMLDfn {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlDfn) OnDragEnd(h EventHandler) HTMLDfn {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlDfn) OnDragEnter(h EventHandler) HTMLDfn {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlDfn) OnDragLeave(h EventHandler) HTMLDfn {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlDfn) OnDragOver(h EventHandler) HTMLDfn {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlDfn) OnDragStart(h EventHandler) HTMLDfn {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlDfn) OnDrop(h EventHandler) HTMLDfn {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlDfn) OnFocus(h EventHandler) HTMLDfn {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlDfn) OnInput(h EventHandler) HTMLDfn {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlDfn) OnInvalid(h EventHandler) HTMLDfn {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlDfn) OnKeyDown(h EventHandler) HTMLDfn {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlDfn) OnKeyPress(h EventHandler) HTMLDfn {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlDfn) OnKeyup(h EventHandler) HTMLDfn {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlDfn) OnMouseDown(h EventHandler) HTMLDfn {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlDfn) OnMouseMove(h EventHandler) HTMLDfn {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlDfn) OnMouseOut(h EventHandler) HTMLDfn {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlDfn) OnMouseOver(h EventHandler) HTMLDfn {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlDfn) OnMouseUp(h EventHandler) HTMLDfn {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlDfn) OnPaste(h EventHandler) HTMLDfn {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlDfn) OnReset(h EventHandler) HTMLDfn {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlDfn) OnScroll(h EventHandler) HTMLDfn {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlDfn) OnSearch(h EventHandler) HTMLDfn {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlDfn) OnSelect(h EventHandler) HTMLDfn {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlDfn) OnSubmit(h EventHandler) HTMLDfn {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlDfn) OnWheel(h EventHandler) HTMLDfn {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLDialog is the interface that describes a <dialog> HTML element.
type HTMLDialog interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLDialog

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLDialog

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLDialog

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLDialog

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLDialog

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLDialog

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLDialog

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLDialog

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLDialog

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLDialog

	// ID specifies a unique id for an element.
	ID(v string) HTMLDialog

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLDialog

	// Open specifies that the details should be visible (open) to the user.
	Open(v bool) HTMLDialog

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLDialog

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLDialog

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLDialog

	// Title specifies extra information about an element.
	Title(v string) HTMLDialog

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLDialog

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLDialog

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLDialog

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLDialog

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLDialog

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLDialog

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLDialog

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLDialog

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLDialog

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLDialog

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLDialog

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLDialog

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLDialog

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLDialog

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLDialog

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLDialog

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLDialog

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLDialog

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLDialog

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLDialog

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLDialog

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLDialog

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLDialog

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLDialog

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLDialog

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLDialog

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLDialog

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLDialog

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLDialog

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLDialog

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLDialog

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLDialog
}

// Dialog returns an HTML element that defines a dialog box or window.
func Dialog() HTMLDialog {
	e := &htmlDialog{
		elem: elem{
			tag:         "dialog",
			selfClosing: false,
		},
	}

	return e
}

type htmlDialog struct {
	elem
}

func (e *htmlDialog) Body(elems ...UI) HTMLDialog {
	e.setBody(elems...)
	return e
}

func (e *htmlDialog) Text(v interface{}) HTMLDialog {
	return e.Body(Text(v))
}

func (e *htmlDialog) AccessKey(v string) HTMLDialog {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlDialog) Aria(k string, v interface{}) HTMLDialog {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlDialog) Class(v string) HTMLDialog {
	e.setAttr("class", v)
	return e
}

func (e *htmlDialog) ContentEditable(v bool) HTMLDialog {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlDialog) DataSet(k string, v interface{}) HTMLDialog {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlDialog) Dir(v string) HTMLDialog {
	e.setAttr("dir", v)
	return e
}

func (e *htmlDialog) Draggable(v bool) HTMLDialog {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlDialog) Hidden(v bool) HTMLDialog {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlDialog) ID(v string) HTMLDialog {
	e.setAttr("id", v)
	return e
}

func (e *htmlDialog) Lang(v string) HTMLDialog {
	e.setAttr("lang", v)
	return e
}

func (e *htmlDialog) Open(v bool) HTMLDialog {
	e.setAttr("open", v)
	return e
}

func (e *htmlDialog) Spellcheck(v bool) HTMLDialog {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlDialog) Style(k, v string) HTMLDialog {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlDialog) TabIndex(v int) HTMLDialog {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlDialog) Title(v string) HTMLDialog {
	e.setAttr("title", v)
	return e
}

func (e *htmlDialog) OnBlur(h EventHandler) HTMLDialog {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlDialog) OnChange(h EventHandler) HTMLDialog {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlDialog) OnClick(h EventHandler) HTMLDialog {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlDialog) OnContextMenu(h EventHandler) HTMLDialog {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlDialog) OnCopy(h EventHandler) HTMLDialog {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlDialog) OnCut(h EventHandler) HTMLDialog {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlDialog) OnDblClick(h EventHandler) HTMLDialog {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlDialog) OnDrag(h EventHandler) HTMLDialog {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlDialog) OnDragEnd(h EventHandler) HTMLDialog {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlDialog) OnDragEnter(h EventHandler) HTMLDialog {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlDialog) OnDragLeave(h EventHandler) HTMLDialog {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlDialog) OnDragOver(h EventHandler) HTMLDialog {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlDialog) OnDragStart(h EventHandler) HTMLDialog {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlDialog) OnDrop(h EventHandler) HTMLDialog {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlDialog) OnFocus(h EventHandler) HTMLDialog {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlDialog) OnInput(h EventHandler) HTMLDialog {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlDialog) OnInvalid(h EventHandler) HTMLDialog {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlDialog) OnKeyDown(h EventHandler) HTMLDialog {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlDialog) OnKeyPress(h EventHandler) HTMLDialog {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlDialog) OnKeyup(h EventHandler) HTMLDialog {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlDialog) OnMouseDown(h EventHandler) HTMLDialog {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlDialog) OnMouseMove(h EventHandler) HTMLDialog {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlDialog) OnMouseOut(h EventHandler) HTMLDialog {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlDialog) OnMouseOver(h EventHandler) HTMLDialog {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlDialog) OnMouseUp(h EventHandler) HTMLDialog {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlDialog) OnPaste(h EventHandler) HTMLDialog {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlDialog) OnReset(h EventHandler) HTMLDialog {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlDialog) OnScroll(h EventHandler) HTMLDialog {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlDialog) OnSearch(h EventHandler) HTMLDialog {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlDialog) OnSelect(h EventHandler) HTMLDialog {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlDialog) OnSubmit(h EventHandler) HTMLDialog {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlDialog) OnWheel(h EventHandler) HTMLDialog {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLDiv is the interface that describes a <div> HTML element.
type HTMLDiv interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLDiv

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLDiv

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLDiv

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLDiv

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLDiv

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLDiv

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLDiv

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLDiv

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLDiv

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLDiv

	// ID specifies a unique id for an element.
	ID(v string) HTMLDiv

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLDiv

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLDiv

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLDiv

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLDiv

	// Title specifies extra information about an element.
	Title(v string) HTMLDiv

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLDiv

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLDiv

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLDiv

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLDiv

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLDiv

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLDiv

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLDiv

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLDiv

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLDiv

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLDiv

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLDiv

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLDiv

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLDiv

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLDiv

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLDiv

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLDiv

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLDiv

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLDiv

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLDiv

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLDiv

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLDiv

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLDiv

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLDiv

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLDiv

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLDiv

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLDiv

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLDiv

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLDiv

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLDiv

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLDiv

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLDiv

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLDiv
}

// Div returns an HTML element that defines a section in a document.
func Div() HTMLDiv {
	e := &htmlDiv{
		elem: elem{
			tag:         "div",
			selfClosing: false,
		},
	}

	return e
}

type htmlDiv struct {
	elem
}

func (e *htmlDiv) Body(elems ...UI) HTMLDiv {
	e.setBody(elems...)
	return e
}

func (e *htmlDiv) Text(v interface{}) HTMLDiv {
	return e.Body(Text(v))
}

func (e *htmlDiv) AccessKey(v string) HTMLDiv {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlDiv) Aria(k string, v interface{}) HTMLDiv {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlDiv) Class(v string) HTMLDiv {
	e.setAttr("class", v)
	return e
}

func (e *htmlDiv) ContentEditable(v bool) HTMLDiv {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlDiv) DataSet(k string, v interface{}) HTMLDiv {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlDiv) Dir(v string) HTMLDiv {
	e.setAttr("dir", v)
	return e
}

func (e *htmlDiv) Draggable(v bool) HTMLDiv {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlDiv) Hidden(v bool) HTMLDiv {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlDiv) ID(v string) HTMLDiv {
	e.setAttr("id", v)
	return e
}

func (e *htmlDiv) Lang(v string) HTMLDiv {
	e.setAttr("lang", v)
	return e
}

func (e *htmlDiv) Spellcheck(v bool) HTMLDiv {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlDiv) Style(k, v string) HTMLDiv {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlDiv) TabIndex(v int) HTMLDiv {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlDiv) Title(v string) HTMLDiv {
	e.setAttr("title", v)
	return e
}

func (e *htmlDiv) OnBlur(h EventHandler) HTMLDiv {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlDiv) OnChange(h EventHandler) HTMLDiv {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlDiv) OnClick(h EventHandler) HTMLDiv {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlDiv) OnContextMenu(h EventHandler) HTMLDiv {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlDiv) OnCopy(h EventHandler) HTMLDiv {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlDiv) OnCut(h EventHandler) HTMLDiv {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlDiv) OnDblClick(h EventHandler) HTMLDiv {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlDiv) OnDrag(h EventHandler) HTMLDiv {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlDiv) OnDragEnd(h EventHandler) HTMLDiv {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlDiv) OnDragEnter(h EventHandler) HTMLDiv {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlDiv) OnDragLeave(h EventHandler) HTMLDiv {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlDiv) OnDragOver(h EventHandler) HTMLDiv {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlDiv) OnDragStart(h EventHandler) HTMLDiv {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlDiv) OnDrop(h EventHandler) HTMLDiv {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlDiv) OnFocus(h EventHandler) HTMLDiv {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlDiv) OnInput(h EventHandler) HTMLDiv {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlDiv) OnInvalid(h EventHandler) HTMLDiv {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlDiv) OnKeyDown(h EventHandler) HTMLDiv {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlDiv) OnKeyPress(h EventHandler) HTMLDiv {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlDiv) OnKeyup(h EventHandler) HTMLDiv {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlDiv) OnMouseDown(h EventHandler) HTMLDiv {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlDiv) OnMouseMove(h EventHandler) HTMLDiv {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlDiv) OnMouseOut(h EventHandler) HTMLDiv {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlDiv) OnMouseOver(h EventHandler) HTMLDiv {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlDiv) OnMouseUp(h EventHandler) HTMLDiv {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlDiv) OnPaste(h EventHandler) HTMLDiv {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlDiv) OnReset(h EventHandler) HTMLDiv {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlDiv) OnScroll(h EventHandler) HTMLDiv {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlDiv) OnSearch(h EventHandler) HTMLDiv {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlDiv) OnSelect(h EventHandler) HTMLDiv {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlDiv) OnSubmit(h EventHandler) HTMLDiv {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlDiv) OnWheel(h EventHandler) HTMLDiv {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLDl is the interface that describes a <dl> HTML element.
type HTMLDl interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLDl

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLDl

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLDl

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLDl

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLDl

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLDl

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLDl

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLDl

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLDl

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLDl

	// ID specifies a unique id for an element.
	ID(v string) HTMLDl

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLDl

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLDl

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLDl

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLDl

	// Title specifies extra information about an element.
	Title(v string) HTMLDl

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLDl

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLDl

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLDl

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLDl

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLDl

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLDl

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLDl

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLDl

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLDl

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLDl

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLDl

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLDl

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLDl

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLDl

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLDl

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLDl

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLDl

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLDl

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLDl

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLDl

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLDl

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLDl

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLDl

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLDl

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLDl

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLDl

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLDl

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLDl

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLDl

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLDl

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLDl

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLDl
}

// Dl returns an HTML element that defines a description list.
func Dl() HTMLDl {
	e := &htmlDl{
		elem: elem{
			tag:         "dl",
			selfClosing: false,
		},
	}

	return e
}

type htmlDl struct {
	elem
}

func (e *htmlDl) Body(elems ...UI) HTMLDl {
	e.setBody(elems...)
	return e
}

func (e *htmlDl) Text(v interface{}) HTMLDl {
	return e.Body(Text(v))
}

func (e *htmlDl) AccessKey(v string) HTMLDl {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlDl) Aria(k string, v interface{}) HTMLDl {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlDl) Class(v string) HTMLDl {
	e.setAttr("class", v)
	return e
}

func (e *htmlDl) ContentEditable(v bool) HTMLDl {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlDl) DataSet(k string, v interface{}) HTMLDl {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlDl) Dir(v string) HTMLDl {
	e.setAttr("dir", v)
	return e
}

func (e *htmlDl) Draggable(v bool) HTMLDl {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlDl) Hidden(v bool) HTMLDl {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlDl) ID(v string) HTMLDl {
	e.setAttr("id", v)
	return e
}

func (e *htmlDl) Lang(v string) HTMLDl {
	e.setAttr("lang", v)
	return e
}

func (e *htmlDl) Spellcheck(v bool) HTMLDl {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlDl) Style(k, v string) HTMLDl {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlDl) TabIndex(v int) HTMLDl {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlDl) Title(v string) HTMLDl {
	e.setAttr("title", v)
	return e
}

func (e *htmlDl) OnBlur(h EventHandler) HTMLDl {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlDl) OnChange(h EventHandler) HTMLDl {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlDl) OnClick(h EventHandler) HTMLDl {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlDl) OnContextMenu(h EventHandler) HTMLDl {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlDl) OnCopy(h EventHandler) HTMLDl {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlDl) OnCut(h EventHandler) HTMLDl {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlDl) OnDblClick(h EventHandler) HTMLDl {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlDl) OnDrag(h EventHandler) HTMLDl {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlDl) OnDragEnd(h EventHandler) HTMLDl {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlDl) OnDragEnter(h EventHandler) HTMLDl {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlDl) OnDragLeave(h EventHandler) HTMLDl {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlDl) OnDragOver(h EventHandler) HTMLDl {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlDl) OnDragStart(h EventHandler) HTMLDl {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlDl) OnDrop(h EventHandler) HTMLDl {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlDl) OnFocus(h EventHandler) HTMLDl {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlDl) OnInput(h EventHandler) HTMLDl {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlDl) OnInvalid(h EventHandler) HTMLDl {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlDl) OnKeyDown(h EventHandler) HTMLDl {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlDl) OnKeyPress(h EventHandler) HTMLDl {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlDl) OnKeyup(h EventHandler) HTMLDl {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlDl) OnMouseDown(h EventHandler) HTMLDl {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlDl) OnMouseMove(h EventHandler) HTMLDl {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlDl) OnMouseOut(h EventHandler) HTMLDl {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlDl) OnMouseOver(h EventHandler) HTMLDl {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlDl) OnMouseUp(h EventHandler) HTMLDl {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlDl) OnPaste(h EventHandler) HTMLDl {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlDl) OnReset(h EventHandler) HTMLDl {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlDl) OnScroll(h EventHandler) HTMLDl {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlDl) OnSearch(h EventHandler) HTMLDl {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlDl) OnSelect(h EventHandler) HTMLDl {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlDl) OnSubmit(h EventHandler) HTMLDl {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlDl) OnWheel(h EventHandler) HTMLDl {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLDt is the interface that describes a <dt> HTML element.
type HTMLDt interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLDt

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLDt

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLDt

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLDt

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLDt

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLDt

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLDt

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLDt

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLDt

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLDt

	// ID specifies a unique id for an element.
	ID(v string) HTMLDt

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLDt

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLDt

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLDt

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLDt

	// Title specifies extra information about an element.
	Title(v string) HTMLDt

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLDt

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLDt

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLDt

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLDt

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLDt

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLDt

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLDt

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLDt

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLDt

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLDt

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLDt

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLDt

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLDt

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLDt

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLDt

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLDt

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLDt

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLDt

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLDt

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLDt

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLDt

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLDt

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLDt

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLDt

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLDt

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLDt

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLDt

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLDt

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLDt

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLDt

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLDt

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLDt
}

// Dt returns an HTML element that defines a term/name in a description list.
func Dt() HTMLDt {
	e := &htmlDt{
		elem: elem{
			tag:         "dt",
			selfClosing: false,
		},
	}

	return e
}

type htmlDt struct {
	elem
}

func (e *htmlDt) Body(elems ...UI) HTMLDt {
	e.setBody(elems...)
	return e
}

func (e *htmlDt) Text(v interface{}) HTMLDt {
	return e.Body(Text(v))
}

func (e *htmlDt) AccessKey(v string) HTMLDt {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlDt) Aria(k string, v interface{}) HTMLDt {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlDt) Class(v string) HTMLDt {
	e.setAttr("class", v)
	return e
}

func (e *htmlDt) ContentEditable(v bool) HTMLDt {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlDt) DataSet(k string, v interface{}) HTMLDt {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlDt) Dir(v string) HTMLDt {
	e.setAttr("dir", v)
	return e
}

func (e *htmlDt) Draggable(v bool) HTMLDt {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlDt) Hidden(v bool) HTMLDt {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlDt) ID(v string) HTMLDt {
	e.setAttr("id", v)
	return e
}

func (e *htmlDt) Lang(v string) HTMLDt {
	e.setAttr("lang", v)
	return e
}

func (e *htmlDt) Spellcheck(v bool) HTMLDt {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlDt) Style(k, v string) HTMLDt {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlDt) TabIndex(v int) HTMLDt {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlDt) Title(v string) HTMLDt {
	e.setAttr("title", v)
	return e
}

func (e *htmlDt) OnBlur(h EventHandler) HTMLDt {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlDt) OnChange(h EventHandler) HTMLDt {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlDt) OnClick(h EventHandler) HTMLDt {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlDt) OnContextMenu(h EventHandler) HTMLDt {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlDt) OnCopy(h EventHandler) HTMLDt {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlDt) OnCut(h EventHandler) HTMLDt {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlDt) OnDblClick(h EventHandler) HTMLDt {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlDt) OnDrag(h EventHandler) HTMLDt {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlDt) OnDragEnd(h EventHandler) HTMLDt {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlDt) OnDragEnter(h EventHandler) HTMLDt {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlDt) OnDragLeave(h EventHandler) HTMLDt {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlDt) OnDragOver(h EventHandler) HTMLDt {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlDt) OnDragStart(h EventHandler) HTMLDt {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlDt) OnDrop(h EventHandler) HTMLDt {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlDt) OnFocus(h EventHandler) HTMLDt {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlDt) OnInput(h EventHandler) HTMLDt {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlDt) OnInvalid(h EventHandler) HTMLDt {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlDt) OnKeyDown(h EventHandler) HTMLDt {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlDt) OnKeyPress(h EventHandler) HTMLDt {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlDt) OnKeyup(h EventHandler) HTMLDt {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlDt) OnMouseDown(h EventHandler) HTMLDt {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlDt) OnMouseMove(h EventHandler) HTMLDt {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlDt) OnMouseOut(h EventHandler) HTMLDt {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlDt) OnMouseOver(h EventHandler) HTMLDt {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlDt) OnMouseUp(h EventHandler) HTMLDt {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlDt) OnPaste(h EventHandler) HTMLDt {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlDt) OnReset(h EventHandler) HTMLDt {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlDt) OnScroll(h EventHandler) HTMLDt {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlDt) OnSearch(h EventHandler) HTMLDt {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlDt) OnSelect(h EventHandler) HTMLDt {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlDt) OnSubmit(h EventHandler) HTMLDt {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlDt) OnWheel(h EventHandler) HTMLDt {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLEm is the interface that describes a <em> HTML element.
type HTMLEm interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLEm

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLEm

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLEm

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLEm

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLEm

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLEm

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLEm

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLEm

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLEm

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLEm

	// ID specifies a unique id for an element.
	ID(v string) HTMLEm

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLEm

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLEm

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLEm

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLEm

	// Title specifies extra information about an element.
	Title(v string) HTMLEm

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLEm

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLEm

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLEm

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLEm

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLEm

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLEm

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLEm

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLEm

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLEm

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLEm

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLEm

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLEm

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLEm

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLEm

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLEm

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLEm

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLEm

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLEm

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLEm

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLEm

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLEm

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLEm

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLEm

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLEm

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLEm

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLEm

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLEm

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLEm

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLEm

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLEm

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLEm

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLEm
}

// Em returns an HTML element that defines emphasized text.
func Em() HTMLEm {
	e := &htmlEm{
		elem: elem{
			tag:         "em",
			selfClosing: false,
		},
	}

	return e
}

type htmlEm struct {
	elem
}

func (e *htmlEm) Body(elems ...UI) HTMLEm {
	e.setBody(elems...)
	return e
}

func (e *htmlEm) Text(v interface{}) HTMLEm {
	return e.Body(Text(v))
}

func (e *htmlEm) AccessKey(v string) HTMLEm {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlEm) Aria(k string, v interface{}) HTMLEm {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlEm) Class(v string) HTMLEm {
	e.setAttr("class", v)
	return e
}

func (e *htmlEm) ContentEditable(v bool) HTMLEm {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlEm) DataSet(k string, v interface{}) HTMLEm {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlEm) Dir(v string) HTMLEm {
	e.setAttr("dir", v)
	return e
}

func (e *htmlEm) Draggable(v bool) HTMLEm {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlEm) Hidden(v bool) HTMLEm {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlEm) ID(v string) HTMLEm {
	e.setAttr("id", v)
	return e
}

func (e *htmlEm) Lang(v string) HTMLEm {
	e.setAttr("lang", v)
	return e
}

func (e *htmlEm) Spellcheck(v bool) HTMLEm {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlEm) Style(k, v string) HTMLEm {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlEm) TabIndex(v int) HTMLEm {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlEm) Title(v string) HTMLEm {
	e.setAttr("title", v)
	return e
}

func (e *htmlEm) OnBlur(h EventHandler) HTMLEm {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlEm) OnChange(h EventHandler) HTMLEm {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlEm) OnClick(h EventHandler) HTMLEm {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlEm) OnContextMenu(h EventHandler) HTMLEm {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlEm) OnCopy(h EventHandler) HTMLEm {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlEm) OnCut(h EventHandler) HTMLEm {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlEm) OnDblClick(h EventHandler) HTMLEm {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlEm) OnDrag(h EventHandler) HTMLEm {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlEm) OnDragEnd(h EventHandler) HTMLEm {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlEm) OnDragEnter(h EventHandler) HTMLEm {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlEm) OnDragLeave(h EventHandler) HTMLEm {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlEm) OnDragOver(h EventHandler) HTMLEm {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlEm) OnDragStart(h EventHandler) HTMLEm {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlEm) OnDrop(h EventHandler) HTMLEm {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlEm) OnFocus(h EventHandler) HTMLEm {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlEm) OnInput(h EventHandler) HTMLEm {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlEm) OnInvalid(h EventHandler) HTMLEm {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlEm) OnKeyDown(h EventHandler) HTMLEm {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlEm) OnKeyPress(h EventHandler) HTMLEm {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlEm) OnKeyup(h EventHandler) HTMLEm {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlEm) OnMouseDown(h EventHandler) HTMLEm {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlEm) OnMouseMove(h EventHandler) HTMLEm {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlEm) OnMouseOut(h EventHandler) HTMLEm {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlEm) OnMouseOver(h EventHandler) HTMLEm {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlEm) OnMouseUp(h EventHandler) HTMLEm {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlEm) OnPaste(h EventHandler) HTMLEm {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlEm) OnReset(h EventHandler) HTMLEm {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlEm) OnScroll(h EventHandler) HTMLEm {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlEm) OnSearch(h EventHandler) HTMLEm {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlEm) OnSelect(h EventHandler) HTMLEm {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlEm) OnSubmit(h EventHandler) HTMLEm {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlEm) OnWheel(h EventHandler) HTMLEm {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLEmbed is the interface that describes a <embed> HTML element.
type HTMLEmbed interface {
	UI

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLEmbed

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLEmbed

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLEmbed

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLEmbed

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLEmbed

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLEmbed

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLEmbed

	// Height specifies the height of the element (in pixels).
	Height(v int) HTMLEmbed

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLEmbed

	// ID specifies a unique id for an element.
	ID(v string) HTMLEmbed

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLEmbed

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLEmbed

	// Src specifies the URL of the media file.
	Src(v string) HTMLEmbed

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLEmbed

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLEmbed

	// Title specifies extra information about an element.
	Title(v string) HTMLEmbed

	// Type specifies the type of element.
	Type(v string) HTMLEmbed

	// Width specifies the width of the element.
	Width(v int) HTMLEmbed

	// OnAbort calls the given handler on abort.
	OnAbort(h EventHandler) HTMLEmbed

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLEmbed

	// OnCanPlay calls the given handler when a file is ready to start playing (when it has buffered enough to begin).
	OnCanPlay(h EventHandler) HTMLEmbed

	// OnCanPlayThrough calls the given handler when a file can be played all the way to the end without pausing for buffering.
	OnCanPlayThrough(h EventHandler) HTMLEmbed

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLEmbed

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLEmbed

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLEmbed

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLEmbed

	// OnCueChange calls the given handler when the cue changes in a track element.
	OnCueChange(h EventHandler) HTMLEmbed

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLEmbed

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLEmbed

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLEmbed

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLEmbed

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLEmbed

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLEmbed

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLEmbed

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLEmbed

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLEmbed

	// OnDurationChange calls the given handler when the length of the media changes.
	OnDurationChange(h EventHandler) HTMLEmbed

	// OnEmptied calls the given handler when something bad happens and the file is suddenly unavailable (like unexpectedly disconnects).
	OnEmptied(h EventHandler) HTMLEmbed

	// OnEnded calls the given handler when the media has reach the end.
	OnEnded(h EventHandler) HTMLEmbed

	// OnError calls the given handler when an error occurs.
	OnError(h EventHandler) HTMLEmbed

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLEmbed

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLEmbed

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLEmbed

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLEmbed

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLEmbed

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLEmbed

	// OnLoadStart calls the given handler just as the file begins to load before anything is actually loaded.
	OnLoadStart(h EventHandler) HTMLEmbed

	// OnLoadedData calls the given handler when media data is loaded.
	OnLoadedData(h EventHandler) HTMLEmbed

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLEmbed

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLEmbed

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLEmbed

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLEmbed

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLEmbed

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLEmbed

	// OnPause calls the given handler when the media is paused either by the user or programmatically.
	OnPause(h EventHandler) HTMLEmbed

	// OnPlay calls the given handler when the media is ready to start playing.
	OnPlay(h EventHandler) HTMLEmbed

	// OnPlaying calls the given handler when the media actually has started playing.
	OnPlaying(h EventHandler) HTMLEmbed

	// OnProgress calls the given handler when the browser is in the process of getting the media data.
	OnProgress(h EventHandler) HTMLEmbed

	// OnRateChange calls the given handler each time the playback rate changes (like when a user switches to a slow motion or fast forward mode).
	OnRateChange(h EventHandler) HTMLEmbed

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLEmbed

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLEmbed

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLEmbed

	// OnSeeked calls the given handler when the seeking attribute is set to false indicating that seeking has ended.
	OnSeeked(h EventHandler) HTMLEmbed

	// OnSeeking calls the given handler when the seeking attribute is set to true indicating that seeking is active.
	OnSeeking(h EventHandler) HTMLEmbed

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLEmbed

	// OnStalled calls the given handler when the browser is unable to fetch the media data for whatever reason.
	OnStalled(h EventHandler) HTMLEmbed

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLEmbed

	// OnSuspend calls the given handler when fetching the media data is stopped before it is completely loaded for whatever reason.
	OnSuspend(h EventHandler) HTMLEmbed

	// OnTimeUpdate calls the given handler when the playing position has changed (like when the user fast forwards to a different point in the media).
	OnTimeUpdate(h EventHandler) HTMLEmbed

	// OnVolumeChange calls the given handler each time the volume is changed which (includes setting the volume to "mute").
	OnVolumeChange(h EventHandler) HTMLEmbed

	// OnWaiting calls the given handler when the media has paused but is expected to resume (like when the media pauses to buffer more data).
	OnWaiting(h EventHandler) HTMLEmbed

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLEmbed

	// OnloadedMetaData calls the given handler when meta data (like dimensions and duration) are loaded.
	OnloadedMetaData(h EventHandler) HTMLEmbed
}

// Embed returns an HTML element that defines a container for an external (non-HTML) application.
func Embed() HTMLEmbed {
	e := &htmlEmbed{
		elem: elem{
			tag:         "embed",
			selfClosing: true,
		},
	}

	return e
}

type htmlEmbed struct {
	elem
}

func (e *htmlEmbed) AccessKey(v string) HTMLEmbed {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlEmbed) Aria(k string, v interface{}) HTMLEmbed {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlEmbed) Class(v string) HTMLEmbed {
	e.setAttr("class", v)
	return e
}

func (e *htmlEmbed) ContentEditable(v bool) HTMLEmbed {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlEmbed) DataSet(k string, v interface{}) HTMLEmbed {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlEmbed) Dir(v string) HTMLEmbed {
	e.setAttr("dir", v)
	return e
}

func (e *htmlEmbed) Draggable(v bool) HTMLEmbed {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlEmbed) Height(v int) HTMLEmbed {
	e.setAttr("height", v)
	return e
}

func (e *htmlEmbed) Hidden(v bool) HTMLEmbed {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlEmbed) ID(v string) HTMLEmbed {
	e.setAttr("id", v)
	return e
}

func (e *htmlEmbed) Lang(v string) HTMLEmbed {
	e.setAttr("lang", v)
	return e
}

func (e *htmlEmbed) Spellcheck(v bool) HTMLEmbed {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlEmbed) Src(v string) HTMLEmbed {
	e.setAttr("src", StaticResource(v))
	return e
}

func (e *htmlEmbed) Style(k, v string) HTMLEmbed {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlEmbed) TabIndex(v int) HTMLEmbed {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlEmbed) Title(v string) HTMLEmbed {
	e.setAttr("title", v)
	return e
}

func (e *htmlEmbed) Type(v string) HTMLEmbed {
	e.setAttr("type", v)
	return e
}

func (e *htmlEmbed) Width(v int) HTMLEmbed {
	e.setAttr("width", v)
	return e
}

func (e *htmlEmbed) OnAbort(h EventHandler) HTMLEmbed {
	e.setEventHandler("abort", h)
	return e
}

func (e *htmlEmbed) OnBlur(h EventHandler) HTMLEmbed {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlEmbed) OnCanPlay(h EventHandler) HTMLEmbed {
	e.setEventHandler("canplay", h)
	return e
}

func (e *htmlEmbed) OnCanPlayThrough(h EventHandler) HTMLEmbed {
	e.setEventHandler("canplaythrough", h)
	return e
}

func (e *htmlEmbed) OnChange(h EventHandler) HTMLEmbed {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlEmbed) OnClick(h EventHandler) HTMLEmbed {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlEmbed) OnContextMenu(h EventHandler) HTMLEmbed {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlEmbed) OnCopy(h EventHandler) HTMLEmbed {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlEmbed) OnCueChange(h EventHandler) HTMLEmbed {
	e.setEventHandler("cuechange", h)
	return e
}

func (e *htmlEmbed) OnCut(h EventHandler) HTMLEmbed {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlEmbed) OnDblClick(h EventHandler) HTMLEmbed {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlEmbed) OnDrag(h EventHandler) HTMLEmbed {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlEmbed) OnDragEnd(h EventHandler) HTMLEmbed {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlEmbed) OnDragEnter(h EventHandler) HTMLEmbed {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlEmbed) OnDragLeave(h EventHandler) HTMLEmbed {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlEmbed) OnDragOver(h EventHandler) HTMLEmbed {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlEmbed) OnDragStart(h EventHandler) HTMLEmbed {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlEmbed) OnDrop(h EventHandler) HTMLEmbed {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlEmbed) OnDurationChange(h EventHandler) HTMLEmbed {
	e.setEventHandler("durationchange", h)
	return e
}

func (e *htmlEmbed) OnEmptied(h EventHandler) HTMLEmbed {
	e.setEventHandler("emptied", h)
	return e
}

func (e *htmlEmbed) OnEnded(h EventHandler) HTMLEmbed {
	e.setEventHandler("ended", h)
	return e
}

func (e *htmlEmbed) OnError(h EventHandler) HTMLEmbed {
	e.setEventHandler("error", h)
	return e
}

func (e *htmlEmbed) OnFocus(h EventHandler) HTMLEmbed {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlEmbed) OnInput(h EventHandler) HTMLEmbed {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlEmbed) OnInvalid(h EventHandler) HTMLEmbed {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlEmbed) OnKeyDown(h EventHandler) HTMLEmbed {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlEmbed) OnKeyPress(h EventHandler) HTMLEmbed {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlEmbed) OnKeyup(h EventHandler) HTMLEmbed {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlEmbed) OnLoadStart(h EventHandler) HTMLEmbed {
	e.setEventHandler("loadstart", h)
	return e
}

func (e *htmlEmbed) OnLoadedData(h EventHandler) HTMLEmbed {
	e.setEventHandler("loadeddata", h)
	return e
}

func (e *htmlEmbed) OnMouseDown(h EventHandler) HTMLEmbed {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlEmbed) OnMouseMove(h EventHandler) HTMLEmbed {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlEmbed) OnMouseOut(h EventHandler) HTMLEmbed {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlEmbed) OnMouseOver(h EventHandler) HTMLEmbed {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlEmbed) OnMouseUp(h EventHandler) HTMLEmbed {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlEmbed) OnPaste(h EventHandler) HTMLEmbed {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlEmbed) OnPause(h EventHandler) HTMLEmbed {
	e.setEventHandler("pause", h)
	return e
}

func (e *htmlEmbed) OnPlay(h EventHandler) HTMLEmbed {
	e.setEventHandler("play", h)
	return e
}

func (e *htmlEmbed) OnPlaying(h EventHandler) HTMLEmbed {
	e.setEventHandler("playing", h)
	return e
}

func (e *htmlEmbed) OnProgress(h EventHandler) HTMLEmbed {
	e.setEventHandler("progress", h)
	return e
}

func (e *htmlEmbed) OnRateChange(h EventHandler) HTMLEmbed {
	e.setEventHandler("ratechange", h)
	return e
}

func (e *htmlEmbed) OnReset(h EventHandler) HTMLEmbed {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlEmbed) OnScroll(h EventHandler) HTMLEmbed {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlEmbed) OnSearch(h EventHandler) HTMLEmbed {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlEmbed) OnSeeked(h EventHandler) HTMLEmbed {
	e.setEventHandler("seeked", h)
	return e
}

func (e *htmlEmbed) OnSeeking(h EventHandler) HTMLEmbed {
	e.setEventHandler("seeking", h)
	return e
}

func (e *htmlEmbed) OnSelect(h EventHandler) HTMLEmbed {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlEmbed) OnStalled(h EventHandler) HTMLEmbed {
	e.setEventHandler("stalled", h)
	return e
}

func (e *htmlEmbed) OnSubmit(h EventHandler) HTMLEmbed {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlEmbed) OnSuspend(h EventHandler) HTMLEmbed {
	e.setEventHandler("suspend", h)
	return e
}

func (e *htmlEmbed) OnTimeUpdate(h EventHandler) HTMLEmbed {
	e.setEventHandler("timeupdate", h)
	return e
}

func (e *htmlEmbed) OnVolumeChange(h EventHandler) HTMLEmbed {
	e.setEventHandler("volumechange", h)
	return e
}

func (e *htmlEmbed) OnWaiting(h EventHandler) HTMLEmbed {
	e.setEventHandler("waiting", h)
	return e
}

func (e *htmlEmbed) OnWheel(h EventHandler) HTMLEmbed {
	e.setEventHandler("wheel", h)
	return e
}

func (e *htmlEmbed) OnloadedMetaData(h EventHandler) HTMLEmbed {
	e.setEventHandler("loadedmetadata", h)
	return e
}

// HTMLFieldSet is the interface that describes a <fieldset> HTML element.
type HTMLFieldSet interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLFieldSet

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLFieldSet

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLFieldSet

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLFieldSet

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLFieldSet

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLFieldSet

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLFieldSet

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLFieldSet

	// Disabled specifies that the specified element/group of elements should be disabled.
	Disabled(v bool) HTMLFieldSet

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLFieldSet

	// Form specifies the name of the form the element belongs to.
	Form(v string) HTMLFieldSet

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLFieldSet

	// ID specifies a unique id for an element.
	ID(v string) HTMLFieldSet

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLFieldSet

	// Name specifies the name of the element.
	Name(v string) HTMLFieldSet

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLFieldSet

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLFieldSet

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLFieldSet

	// Title specifies extra information about an element.
	Title(v string) HTMLFieldSet

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLFieldSet

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLFieldSet

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLFieldSet

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLFieldSet

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLFieldSet

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLFieldSet

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLFieldSet

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLFieldSet

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLFieldSet

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLFieldSet

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLFieldSet

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLFieldSet

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLFieldSet

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLFieldSet

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLFieldSet

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLFieldSet

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLFieldSet

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLFieldSet

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLFieldSet

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLFieldSet

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLFieldSet

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLFieldSet

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLFieldSet

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLFieldSet

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLFieldSet

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLFieldSet

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLFieldSet

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLFieldSet

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLFieldSet

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLFieldSet

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLFieldSet

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLFieldSet
}

// FieldSet returns an HTML element that groups related elements in a form.
func FieldSet() HTMLFieldSet {
	e := &htmlFieldSet{
		elem: elem{
			tag:         "fieldset",
			selfClosing: false,
		},
	}

	return e
}

type htmlFieldSet struct {
	elem
}

func (e *htmlFieldSet) Body(elems ...UI) HTMLFieldSet {
	e.setBody(elems...)
	return e
}

func (e *htmlFieldSet) Text(v interface{}) HTMLFieldSet {
	return e.Body(Text(v))
}

func (e *htmlFieldSet) AccessKey(v string) HTMLFieldSet {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlFieldSet) Aria(k string, v interface{}) HTMLFieldSet {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlFieldSet) Class(v string) HTMLFieldSet {
	e.setAttr("class", v)
	return e
}

func (e *htmlFieldSet) ContentEditable(v bool) HTMLFieldSet {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlFieldSet) DataSet(k string, v interface{}) HTMLFieldSet {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlFieldSet) Dir(v string) HTMLFieldSet {
	e.setAttr("dir", v)
	return e
}

func (e *htmlFieldSet) Disabled(v bool) HTMLFieldSet {
	e.setAttr("disabled", v)
	return e
}

func (e *htmlFieldSet) Draggable(v bool) HTMLFieldSet {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlFieldSet) Form(v string) HTMLFieldSet {
	e.setAttr("form", v)
	return e
}

func (e *htmlFieldSet) Hidden(v bool) HTMLFieldSet {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlFieldSet) ID(v string) HTMLFieldSet {
	e.setAttr("id", v)
	return e
}

func (e *htmlFieldSet) Lang(v string) HTMLFieldSet {
	e.setAttr("lang", v)
	return e
}

func (e *htmlFieldSet) Name(v string) HTMLFieldSet {
	e.setAttr("name", v)
	return e
}

func (e *htmlFieldSet) Spellcheck(v bool) HTMLFieldSet {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlFieldSet) Style(k, v string) HTMLFieldSet {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlFieldSet) TabIndex(v int) HTMLFieldSet {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlFieldSet) Title(v string) HTMLFieldSet {
	e.setAttr("title", v)
	return e
}

func (e *htmlFieldSet) OnBlur(h EventHandler) HTMLFieldSet {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlFieldSet) OnChange(h EventHandler) HTMLFieldSet {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlFieldSet) OnClick(h EventHandler) HTMLFieldSet {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlFieldSet) OnContextMenu(h EventHandler) HTMLFieldSet {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlFieldSet) OnCopy(h EventHandler) HTMLFieldSet {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlFieldSet) OnCut(h EventHandler) HTMLFieldSet {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlFieldSet) OnDblClick(h EventHandler) HTMLFieldSet {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlFieldSet) OnDrag(h EventHandler) HTMLFieldSet {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlFieldSet) OnDragEnd(h EventHandler) HTMLFieldSet {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlFieldSet) OnDragEnter(h EventHandler) HTMLFieldSet {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlFieldSet) OnDragLeave(h EventHandler) HTMLFieldSet {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlFieldSet) OnDragOver(h EventHandler) HTMLFieldSet {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlFieldSet) OnDragStart(h EventHandler) HTMLFieldSet {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlFieldSet) OnDrop(h EventHandler) HTMLFieldSet {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlFieldSet) OnFocus(h EventHandler) HTMLFieldSet {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlFieldSet) OnInput(h EventHandler) HTMLFieldSet {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlFieldSet) OnInvalid(h EventHandler) HTMLFieldSet {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlFieldSet) OnKeyDown(h EventHandler) HTMLFieldSet {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlFieldSet) OnKeyPress(h EventHandler) HTMLFieldSet {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlFieldSet) OnKeyup(h EventHandler) HTMLFieldSet {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlFieldSet) OnMouseDown(h EventHandler) HTMLFieldSet {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlFieldSet) OnMouseMove(h EventHandler) HTMLFieldSet {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlFieldSet) OnMouseOut(h EventHandler) HTMLFieldSet {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlFieldSet) OnMouseOver(h EventHandler) HTMLFieldSet {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlFieldSet) OnMouseUp(h EventHandler) HTMLFieldSet {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlFieldSet) OnPaste(h EventHandler) HTMLFieldSet {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlFieldSet) OnReset(h EventHandler) HTMLFieldSet {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlFieldSet) OnScroll(h EventHandler) HTMLFieldSet {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlFieldSet) OnSearch(h EventHandler) HTMLFieldSet {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlFieldSet) OnSelect(h EventHandler) HTMLFieldSet {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlFieldSet) OnSubmit(h EventHandler) HTMLFieldSet {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlFieldSet) OnWheel(h EventHandler) HTMLFieldSet {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLFigCaption is the interface that describes a <figcaption> HTML element.
type HTMLFigCaption interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLFigCaption

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLFigCaption

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLFigCaption

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLFigCaption

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLFigCaption

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLFigCaption

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLFigCaption

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLFigCaption

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLFigCaption

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLFigCaption

	// ID specifies a unique id for an element.
	ID(v string) HTMLFigCaption

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLFigCaption

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLFigCaption

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLFigCaption

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLFigCaption

	// Title specifies extra information about an element.
	Title(v string) HTMLFigCaption

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLFigCaption

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLFigCaption

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLFigCaption

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLFigCaption

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLFigCaption

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLFigCaption

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLFigCaption

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLFigCaption

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLFigCaption

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLFigCaption

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLFigCaption

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLFigCaption

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLFigCaption

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLFigCaption

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLFigCaption

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLFigCaption

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLFigCaption

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLFigCaption

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLFigCaption

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLFigCaption

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLFigCaption

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLFigCaption

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLFigCaption

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLFigCaption

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLFigCaption

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLFigCaption

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLFigCaption

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLFigCaption

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLFigCaption

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLFigCaption

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLFigCaption

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLFigCaption
}

// FigCaption returns an HTML element that defines a caption for a figure element.
func FigCaption() HTMLFigCaption {
	e := &htmlFigCaption{
		elem: elem{
			tag:         "figcaption",
			selfClosing: false,
		},
	}

	return e
}

type htmlFigCaption struct {
	elem
}

func (e *htmlFigCaption) Body(elems ...UI) HTMLFigCaption {
	e.setBody(elems...)
	return e
}

func (e *htmlFigCaption) Text(v interface{}) HTMLFigCaption {
	return e.Body(Text(v))
}

func (e *htmlFigCaption) AccessKey(v string) HTMLFigCaption {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlFigCaption) Aria(k string, v interface{}) HTMLFigCaption {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlFigCaption) Class(v string) HTMLFigCaption {
	e.setAttr("class", v)
	return e
}

func (e *htmlFigCaption) ContentEditable(v bool) HTMLFigCaption {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlFigCaption) DataSet(k string, v interface{}) HTMLFigCaption {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlFigCaption) Dir(v string) HTMLFigCaption {
	e.setAttr("dir", v)
	return e
}

func (e *htmlFigCaption) Draggable(v bool) HTMLFigCaption {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlFigCaption) Hidden(v bool) HTMLFigCaption {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlFigCaption) ID(v string) HTMLFigCaption {
	e.setAttr("id", v)
	return e
}

func (e *htmlFigCaption) Lang(v string) HTMLFigCaption {
	e.setAttr("lang", v)
	return e
}

func (e *htmlFigCaption) Spellcheck(v bool) HTMLFigCaption {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlFigCaption) Style(k, v string) HTMLFigCaption {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlFigCaption) TabIndex(v int) HTMLFigCaption {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlFigCaption) Title(v string) HTMLFigCaption {
	e.setAttr("title", v)
	return e
}

func (e *htmlFigCaption) OnBlur(h EventHandler) HTMLFigCaption {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlFigCaption) OnChange(h EventHandler) HTMLFigCaption {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlFigCaption) OnClick(h EventHandler) HTMLFigCaption {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlFigCaption) OnContextMenu(h EventHandler) HTMLFigCaption {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlFigCaption) OnCopy(h EventHandler) HTMLFigCaption {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlFigCaption) OnCut(h EventHandler) HTMLFigCaption {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlFigCaption) OnDblClick(h EventHandler) HTMLFigCaption {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlFigCaption) OnDrag(h EventHandler) HTMLFigCaption {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlFigCaption) OnDragEnd(h EventHandler) HTMLFigCaption {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlFigCaption) OnDragEnter(h EventHandler) HTMLFigCaption {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlFigCaption) OnDragLeave(h EventHandler) HTMLFigCaption {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlFigCaption) OnDragOver(h EventHandler) HTMLFigCaption {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlFigCaption) OnDragStart(h EventHandler) HTMLFigCaption {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlFigCaption) OnDrop(h EventHandler) HTMLFigCaption {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlFigCaption) OnFocus(h EventHandler) HTMLFigCaption {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlFigCaption) OnInput(h EventHandler) HTMLFigCaption {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlFigCaption) OnInvalid(h EventHandler) HTMLFigCaption {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlFigCaption) OnKeyDown(h EventHandler) HTMLFigCaption {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlFigCaption) OnKeyPress(h EventHandler) HTMLFigCaption {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlFigCaption) OnKeyup(h EventHandler) HTMLFigCaption {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlFigCaption) OnMouseDown(h EventHandler) HTMLFigCaption {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlFigCaption) OnMouseMove(h EventHandler) HTMLFigCaption {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlFigCaption) OnMouseOut(h EventHandler) HTMLFigCaption {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlFigCaption) OnMouseOver(h EventHandler) HTMLFigCaption {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlFigCaption) OnMouseUp(h EventHandler) HTMLFigCaption {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlFigCaption) OnPaste(h EventHandler) HTMLFigCaption {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlFigCaption) OnReset(h EventHandler) HTMLFigCaption {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlFigCaption) OnScroll(h EventHandler) HTMLFigCaption {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlFigCaption) OnSearch(h EventHandler) HTMLFigCaption {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlFigCaption) OnSelect(h EventHandler) HTMLFigCaption {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlFigCaption) OnSubmit(h EventHandler) HTMLFigCaption {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlFigCaption) OnWheel(h EventHandler) HTMLFigCaption {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLFigure is the interface that describes a <figure> HTML element.
type HTMLFigure interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLFigure

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLFigure

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLFigure

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLFigure

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLFigure

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLFigure

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLFigure

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLFigure

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLFigure

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLFigure

	// ID specifies a unique id for an element.
	ID(v string) HTMLFigure

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLFigure

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLFigure

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLFigure

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLFigure

	// Title specifies extra information about an element.
	Title(v string) HTMLFigure

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLFigure

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLFigure

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLFigure

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLFigure

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLFigure

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLFigure

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLFigure

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLFigure

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLFigure

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLFigure

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLFigure

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLFigure

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLFigure

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLFigure

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLFigure

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLFigure

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLFigure

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLFigure

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLFigure

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLFigure

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLFigure

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLFigure

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLFigure

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLFigure

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLFigure

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLFigure

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLFigure

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLFigure

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLFigure

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLFigure

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLFigure

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLFigure
}

// Figure returns an HTML element that specifies self-contained content.
func Figure() HTMLFigure {
	e := &htmlFigure{
		elem: elem{
			tag:         "figure",
			selfClosing: false,
		},
	}

	return e
}

type htmlFigure struct {
	elem
}

func (e *htmlFigure) Body(elems ...UI) HTMLFigure {
	e.setBody(elems...)
	return e
}

func (e *htmlFigure) Text(v interface{}) HTMLFigure {
	return e.Body(Text(v))
}

func (e *htmlFigure) AccessKey(v string) HTMLFigure {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlFigure) Aria(k string, v interface{}) HTMLFigure {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlFigure) Class(v string) HTMLFigure {
	e.setAttr("class", v)
	return e
}

func (e *htmlFigure) ContentEditable(v bool) HTMLFigure {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlFigure) DataSet(k string, v interface{}) HTMLFigure {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlFigure) Dir(v string) HTMLFigure {
	e.setAttr("dir", v)
	return e
}

func (e *htmlFigure) Draggable(v bool) HTMLFigure {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlFigure) Hidden(v bool) HTMLFigure {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlFigure) ID(v string) HTMLFigure {
	e.setAttr("id", v)
	return e
}

func (e *htmlFigure) Lang(v string) HTMLFigure {
	e.setAttr("lang", v)
	return e
}

func (e *htmlFigure) Spellcheck(v bool) HTMLFigure {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlFigure) Style(k, v string) HTMLFigure {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlFigure) TabIndex(v int) HTMLFigure {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlFigure) Title(v string) HTMLFigure {
	e.setAttr("title", v)
	return e
}

func (e *htmlFigure) OnBlur(h EventHandler) HTMLFigure {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlFigure) OnChange(h EventHandler) HTMLFigure {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlFigure) OnClick(h EventHandler) HTMLFigure {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlFigure) OnContextMenu(h EventHandler) HTMLFigure {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlFigure) OnCopy(h EventHandler) HTMLFigure {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlFigure) OnCut(h EventHandler) HTMLFigure {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlFigure) OnDblClick(h EventHandler) HTMLFigure {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlFigure) OnDrag(h EventHandler) HTMLFigure {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlFigure) OnDragEnd(h EventHandler) HTMLFigure {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlFigure) OnDragEnter(h EventHandler) HTMLFigure {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlFigure) OnDragLeave(h EventHandler) HTMLFigure {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlFigure) OnDragOver(h EventHandler) HTMLFigure {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlFigure) OnDragStart(h EventHandler) HTMLFigure {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlFigure) OnDrop(h EventHandler) HTMLFigure {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlFigure) OnFocus(h EventHandler) HTMLFigure {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlFigure) OnInput(h EventHandler) HTMLFigure {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlFigure) OnInvalid(h EventHandler) HTMLFigure {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlFigure) OnKeyDown(h EventHandler) HTMLFigure {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlFigure) OnKeyPress(h EventHandler) HTMLFigure {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlFigure) OnKeyup(h EventHandler) HTMLFigure {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlFigure) OnMouseDown(h EventHandler) HTMLFigure {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlFigure) OnMouseMove(h EventHandler) HTMLFigure {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlFigure) OnMouseOut(h EventHandler) HTMLFigure {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlFigure) OnMouseOver(h EventHandler) HTMLFigure {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlFigure) OnMouseUp(h EventHandler) HTMLFigure {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlFigure) OnPaste(h EventHandler) HTMLFigure {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlFigure) OnReset(h EventHandler) HTMLFigure {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlFigure) OnScroll(h EventHandler) HTMLFigure {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlFigure) OnSearch(h EventHandler) HTMLFigure {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlFigure) OnSelect(h EventHandler) HTMLFigure {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlFigure) OnSubmit(h EventHandler) HTMLFigure {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlFigure) OnWheel(h EventHandler) HTMLFigure {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLFooter is the interface that describes a <footer> HTML element.
type HTMLFooter interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLFooter

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLFooter

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLFooter

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLFooter

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLFooter

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLFooter

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLFooter

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLFooter

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLFooter

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLFooter

	// ID specifies a unique id for an element.
	ID(v string) HTMLFooter

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLFooter

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLFooter

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLFooter

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLFooter

	// Title specifies extra information about an element.
	Title(v string) HTMLFooter

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLFooter

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLFooter

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLFooter

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLFooter

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLFooter

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLFooter

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLFooter

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLFooter

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLFooter

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLFooter

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLFooter

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLFooter

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLFooter

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLFooter

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLFooter

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLFooter

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLFooter

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLFooter

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLFooter

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLFooter

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLFooter

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLFooter

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLFooter

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLFooter

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLFooter

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLFooter

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLFooter

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLFooter

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLFooter

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLFooter

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLFooter

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLFooter
}

// Footer returns an HTML element that defines a footer for a document or section.
func Footer() HTMLFooter {
	e := &htmlFooter{
		elem: elem{
			tag:         "footer",
			selfClosing: false,
		},
	}

	return e
}

type htmlFooter struct {
	elem
}

func (e *htmlFooter) Body(elems ...UI) HTMLFooter {
	e.setBody(elems...)
	return e
}

func (e *htmlFooter) Text(v interface{}) HTMLFooter {
	return e.Body(Text(v))
}

func (e *htmlFooter) AccessKey(v string) HTMLFooter {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlFooter) Aria(k string, v interface{}) HTMLFooter {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlFooter) Class(v string) HTMLFooter {
	e.setAttr("class", v)
	return e
}

func (e *htmlFooter) ContentEditable(v bool) HTMLFooter {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlFooter) DataSet(k string, v interface{}) HTMLFooter {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlFooter) Dir(v string) HTMLFooter {
	e.setAttr("dir", v)
	return e
}

func (e *htmlFooter) Draggable(v bool) HTMLFooter {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlFooter) Hidden(v bool) HTMLFooter {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlFooter) ID(v string) HTMLFooter {
	e.setAttr("id", v)
	return e
}

func (e *htmlFooter) Lang(v string) HTMLFooter {
	e.setAttr("lang", v)
	return e
}

func (e *htmlFooter) Spellcheck(v bool) HTMLFooter {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlFooter) Style(k, v string) HTMLFooter {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlFooter) TabIndex(v int) HTMLFooter {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlFooter) Title(v string) HTMLFooter {
	e.setAttr("title", v)
	return e
}

func (e *htmlFooter) OnBlur(h EventHandler) HTMLFooter {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlFooter) OnChange(h EventHandler) HTMLFooter {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlFooter) OnClick(h EventHandler) HTMLFooter {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlFooter) OnContextMenu(h EventHandler) HTMLFooter {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlFooter) OnCopy(h EventHandler) HTMLFooter {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlFooter) OnCut(h EventHandler) HTMLFooter {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlFooter) OnDblClick(h EventHandler) HTMLFooter {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlFooter) OnDrag(h EventHandler) HTMLFooter {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlFooter) OnDragEnd(h EventHandler) HTMLFooter {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlFooter) OnDragEnter(h EventHandler) HTMLFooter {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlFooter) OnDragLeave(h EventHandler) HTMLFooter {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlFooter) OnDragOver(h EventHandler) HTMLFooter {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlFooter) OnDragStart(h EventHandler) HTMLFooter {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlFooter) OnDrop(h EventHandler) HTMLFooter {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlFooter) OnFocus(h EventHandler) HTMLFooter {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlFooter) OnInput(h EventHandler) HTMLFooter {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlFooter) OnInvalid(h EventHandler) HTMLFooter {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlFooter) OnKeyDown(h EventHandler) HTMLFooter {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlFooter) OnKeyPress(h EventHandler) HTMLFooter {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlFooter) OnKeyup(h EventHandler) HTMLFooter {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlFooter) OnMouseDown(h EventHandler) HTMLFooter {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlFooter) OnMouseMove(h EventHandler) HTMLFooter {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlFooter) OnMouseOut(h EventHandler) HTMLFooter {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlFooter) OnMouseOver(h EventHandler) HTMLFooter {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlFooter) OnMouseUp(h EventHandler) HTMLFooter {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlFooter) OnPaste(h EventHandler) HTMLFooter {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlFooter) OnReset(h EventHandler) HTMLFooter {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlFooter) OnScroll(h EventHandler) HTMLFooter {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlFooter) OnSearch(h EventHandler) HTMLFooter {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlFooter) OnSelect(h EventHandler) HTMLFooter {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlFooter) OnSubmit(h EventHandler) HTMLFooter {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlFooter) OnWheel(h EventHandler) HTMLFooter {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLForm is the interface that describes a <form> HTML element.
type HTMLForm interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLForm

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLForm

	// AcceptCharset specifies the character encodings that are to be used for the form submission.
	AcceptCharset(v string) HTMLForm

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLForm

	// Action specifies where to send the form-data when a form is submitted.
	Action(v string) HTMLForm

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLForm

	// AutoComplete specifies whether the element should have autocomplete enabled.
	AutoComplete(v bool) HTMLForm

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLForm

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLForm

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLForm

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLForm

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLForm

	// EncType specifies how the form-data should be encoded when submitting it to the server (only for post method).
	EncType(v string) HTMLForm

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLForm

	// ID specifies a unique id for an element.
	ID(v string) HTMLForm

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLForm

	// Method specifies the HTTP method to use when sending form-data.
	Method(v string) HTMLForm

	// Name specifies the name of the element.
	Name(v string) HTMLForm

	// NoValidate specifies that the form should not be validated when submitted.
	NoValidate(v bool) HTMLForm

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLForm

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLForm

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLForm

	// Target specifies the target for where to open the linked document or where to submit the form.
	Target(v string) HTMLForm

	// Title specifies extra information about an element.
	Title(v string) HTMLForm

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLForm

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLForm

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLForm

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLForm

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLForm

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLForm

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLForm

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLForm

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLForm

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLForm

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLForm

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLForm

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLForm

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLForm

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLForm

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLForm

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLForm

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLForm

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLForm

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLForm

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLForm

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLForm

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLForm

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLForm

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLForm

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLForm

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLForm

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLForm

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLForm

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLForm

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLForm

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLForm
}

// Form returns an HTML element that defines an HTML form for user input.
func Form() HTMLForm {
	e := &htmlForm{
		elem: elem{
			tag:         "form",
			selfClosing: false,
		},
	}

	return e
}

type htmlForm struct {
	elem
}

func (e *htmlForm) Body(elems ...UI) HTMLForm {
	e.setBody(elems...)
	return e
}

func (e *htmlForm) Text(v interface{}) HTMLForm {
	return e.Body(Text(v))
}

func (e *htmlForm) AcceptCharset(v string) HTMLForm {
	e.setAttr("acceptcharset", v)
	return e
}

func (e *htmlForm) AccessKey(v string) HTMLForm {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlForm) Action(v string) HTMLForm {
	e.setAttr("action", v)
	return e
}

func (e *htmlForm) Aria(k string, v interface{}) HTMLForm {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlForm) AutoComplete(v bool) HTMLForm {
	s := "off"
	if v {
		s = "on"
	}

	e.setAttr("autocomplete", s)
	return e
}

func (e *htmlForm) Class(v string) HTMLForm {
	e.setAttr("class", v)
	return e
}

func (e *htmlForm) ContentEditable(v bool) HTMLForm {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlForm) DataSet(k string, v interface{}) HTMLForm {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlForm) Dir(v string) HTMLForm {
	e.setAttr("dir", v)
	return e
}

func (e *htmlForm) Draggable(v bool) HTMLForm {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlForm) EncType(v string) HTMLForm {
	e.setAttr("enctype", v)
	return e
}

func (e *htmlForm) Hidden(v bool) HTMLForm {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlForm) ID(v string) HTMLForm {
	e.setAttr("id", v)
	return e
}

func (e *htmlForm) Lang(v string) HTMLForm {
	e.setAttr("lang", v)
	return e
}

func (e *htmlForm) Method(v string) HTMLForm {
	e.setAttr("method", v)
	return e
}

func (e *htmlForm) Name(v string) HTMLForm {
	e.setAttr("name", v)
	return e
}

func (e *htmlForm) NoValidate(v bool) HTMLForm {
	e.setAttr("novalidate", v)
	return e
}

func (e *htmlForm) Spellcheck(v bool) HTMLForm {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlForm) Style(k, v string) HTMLForm {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlForm) TabIndex(v int) HTMLForm {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlForm) Target(v string) HTMLForm {
	e.setAttr("target", v)
	return e
}

func (e *htmlForm) Title(v string) HTMLForm {
	e.setAttr("title", v)
	return e
}

func (e *htmlForm) OnBlur(h EventHandler) HTMLForm {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlForm) OnChange(h EventHandler) HTMLForm {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlForm) OnClick(h EventHandler) HTMLForm {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlForm) OnContextMenu(h EventHandler) HTMLForm {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlForm) OnCopy(h EventHandler) HTMLForm {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlForm) OnCut(h EventHandler) HTMLForm {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlForm) OnDblClick(h EventHandler) HTMLForm {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlForm) OnDrag(h EventHandler) HTMLForm {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlForm) OnDragEnd(h EventHandler) HTMLForm {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlForm) OnDragEnter(h EventHandler) HTMLForm {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlForm) OnDragLeave(h EventHandler) HTMLForm {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlForm) OnDragOver(h EventHandler) HTMLForm {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlForm) OnDragStart(h EventHandler) HTMLForm {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlForm) OnDrop(h EventHandler) HTMLForm {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlForm) OnFocus(h EventHandler) HTMLForm {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlForm) OnInput(h EventHandler) HTMLForm {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlForm) OnInvalid(h EventHandler) HTMLForm {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlForm) OnKeyDown(h EventHandler) HTMLForm {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlForm) OnKeyPress(h EventHandler) HTMLForm {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlForm) OnKeyup(h EventHandler) HTMLForm {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlForm) OnMouseDown(h EventHandler) HTMLForm {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlForm) OnMouseMove(h EventHandler) HTMLForm {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlForm) OnMouseOut(h EventHandler) HTMLForm {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlForm) OnMouseOver(h EventHandler) HTMLForm {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlForm) OnMouseUp(h EventHandler) HTMLForm {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlForm) OnPaste(h EventHandler) HTMLForm {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlForm) OnReset(h EventHandler) HTMLForm {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlForm) OnScroll(h EventHandler) HTMLForm {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlForm) OnSearch(h EventHandler) HTMLForm {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlForm) OnSelect(h EventHandler) HTMLForm {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlForm) OnSubmit(h EventHandler) HTMLForm {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlForm) OnWheel(h EventHandler) HTMLForm {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLH1 is the interface that describes a <h1> HTML element.
type HTMLH1 interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLH1

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLH1

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLH1

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLH1

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLH1

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLH1

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLH1

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLH1

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLH1

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLH1

	// ID specifies a unique id for an element.
	ID(v string) HTMLH1

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLH1

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLH1

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLH1

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLH1

	// Title specifies extra information about an element.
	Title(v string) HTMLH1

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLH1

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLH1

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLH1

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLH1

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLH1

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLH1

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLH1

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLH1

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLH1

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLH1

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLH1

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLH1

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLH1

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLH1

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLH1

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLH1

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLH1

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLH1

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLH1

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLH1

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLH1

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLH1

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLH1

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLH1

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLH1

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLH1

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLH1

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLH1

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLH1

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLH1

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLH1

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLH1
}

// H1 returns an HTML element that defines HTML heading.
func H1() HTMLH1 {
	e := &htmlH1{
		elem: elem{
			tag:         "h1",
			selfClosing: false,
		},
	}

	return e
}

type htmlH1 struct {
	elem
}

func (e *htmlH1) Body(elems ...UI) HTMLH1 {
	e.setBody(elems...)
	return e
}

func (e *htmlH1) Text(v interface{}) HTMLH1 {
	return e.Body(Text(v))
}

func (e *htmlH1) AccessKey(v string) HTMLH1 {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlH1) Aria(k string, v interface{}) HTMLH1 {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlH1) Class(v string) HTMLH1 {
	e.setAttr("class", v)
	return e
}

func (e *htmlH1) ContentEditable(v bool) HTMLH1 {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlH1) DataSet(k string, v interface{}) HTMLH1 {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlH1) Dir(v string) HTMLH1 {
	e.setAttr("dir", v)
	return e
}

func (e *htmlH1) Draggable(v bool) HTMLH1 {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlH1) Hidden(v bool) HTMLH1 {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlH1) ID(v string) HTMLH1 {
	e.setAttr("id", v)
	return e
}

func (e *htmlH1) Lang(v string) HTMLH1 {
	e.setAttr("lang", v)
	return e
}

func (e *htmlH1) Spellcheck(v bool) HTMLH1 {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlH1) Style(k, v string) HTMLH1 {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlH1) TabIndex(v int) HTMLH1 {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlH1) Title(v string) HTMLH1 {
	e.setAttr("title", v)
	return e
}

func (e *htmlH1) OnBlur(h EventHandler) HTMLH1 {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlH1) OnChange(h EventHandler) HTMLH1 {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlH1) OnClick(h EventHandler) HTMLH1 {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlH1) OnContextMenu(h EventHandler) HTMLH1 {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlH1) OnCopy(h EventHandler) HTMLH1 {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlH1) OnCut(h EventHandler) HTMLH1 {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlH1) OnDblClick(h EventHandler) HTMLH1 {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlH1) OnDrag(h EventHandler) HTMLH1 {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlH1) OnDragEnd(h EventHandler) HTMLH1 {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlH1) OnDragEnter(h EventHandler) HTMLH1 {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlH1) OnDragLeave(h EventHandler) HTMLH1 {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlH1) OnDragOver(h EventHandler) HTMLH1 {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlH1) OnDragStart(h EventHandler) HTMLH1 {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlH1) OnDrop(h EventHandler) HTMLH1 {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlH1) OnFocus(h EventHandler) HTMLH1 {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlH1) OnInput(h EventHandler) HTMLH1 {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlH1) OnInvalid(h EventHandler) HTMLH1 {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlH1) OnKeyDown(h EventHandler) HTMLH1 {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlH1) OnKeyPress(h EventHandler) HTMLH1 {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlH1) OnKeyup(h EventHandler) HTMLH1 {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlH1) OnMouseDown(h EventHandler) HTMLH1 {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlH1) OnMouseMove(h EventHandler) HTMLH1 {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlH1) OnMouseOut(h EventHandler) HTMLH1 {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlH1) OnMouseOver(h EventHandler) HTMLH1 {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlH1) OnMouseUp(h EventHandler) HTMLH1 {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlH1) OnPaste(h EventHandler) HTMLH1 {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlH1) OnReset(h EventHandler) HTMLH1 {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlH1) OnScroll(h EventHandler) HTMLH1 {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlH1) OnSearch(h EventHandler) HTMLH1 {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlH1) OnSelect(h EventHandler) HTMLH1 {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlH1) OnSubmit(h EventHandler) HTMLH1 {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlH1) OnWheel(h EventHandler) HTMLH1 {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLH2 is the interface that describes a <h2> HTML element.
type HTMLH2 interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLH2

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLH2

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLH2

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLH2

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLH2

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLH2

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLH2

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLH2

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLH2

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLH2

	// ID specifies a unique id for an element.
	ID(v string) HTMLH2

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLH2

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLH2

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLH2

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLH2

	// Title specifies extra information about an element.
	Title(v string) HTMLH2

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLH2

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLH2

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLH2

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLH2

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLH2

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLH2

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLH2

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLH2

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLH2

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLH2

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLH2

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLH2

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLH2

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLH2

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLH2

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLH2

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLH2

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLH2

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLH2

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLH2

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLH2

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLH2

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLH2

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLH2

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLH2

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLH2

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLH2

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLH2

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLH2

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLH2

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLH2

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLH2
}

// H2 returns an HTML element that defines HTML heading.
func H2() HTMLH2 {
	e := &htmlH2{
		elem: elem{
			tag:         "h2",
			selfClosing: false,
		},
	}

	return e
}

type htmlH2 struct {
	elem
}

func (e *htmlH2) Body(elems ...UI) HTMLH2 {
	e.setBody(elems...)
	return e
}

func (e *htmlH2) Text(v interface{}) HTMLH2 {
	return e.Body(Text(v))
}

func (e *htmlH2) AccessKey(v string) HTMLH2 {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlH2) Aria(k string, v interface{}) HTMLH2 {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlH2) Class(v string) HTMLH2 {
	e.setAttr("class", v)
	return e
}

func (e *htmlH2) ContentEditable(v bool) HTMLH2 {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlH2) DataSet(k string, v interface{}) HTMLH2 {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlH2) Dir(v string) HTMLH2 {
	e.setAttr("dir", v)
	return e
}

func (e *htmlH2) Draggable(v bool) HTMLH2 {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlH2) Hidden(v bool) HTMLH2 {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlH2) ID(v string) HTMLH2 {
	e.setAttr("id", v)
	return e
}

func (e *htmlH2) Lang(v string) HTMLH2 {
	e.setAttr("lang", v)
	return e
}

func (e *htmlH2) Spellcheck(v bool) HTMLH2 {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlH2) Style(k, v string) HTMLH2 {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlH2) TabIndex(v int) HTMLH2 {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlH2) Title(v string) HTMLH2 {
	e.setAttr("title", v)
	return e
}

func (e *htmlH2) OnBlur(h EventHandler) HTMLH2 {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlH2) OnChange(h EventHandler) HTMLH2 {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlH2) OnClick(h EventHandler) HTMLH2 {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlH2) OnContextMenu(h EventHandler) HTMLH2 {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlH2) OnCopy(h EventHandler) HTMLH2 {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlH2) OnCut(h EventHandler) HTMLH2 {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlH2) OnDblClick(h EventHandler) HTMLH2 {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlH2) OnDrag(h EventHandler) HTMLH2 {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlH2) OnDragEnd(h EventHandler) HTMLH2 {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlH2) OnDragEnter(h EventHandler) HTMLH2 {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlH2) OnDragLeave(h EventHandler) HTMLH2 {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlH2) OnDragOver(h EventHandler) HTMLH2 {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlH2) OnDragStart(h EventHandler) HTMLH2 {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlH2) OnDrop(h EventHandler) HTMLH2 {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlH2) OnFocus(h EventHandler) HTMLH2 {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlH2) OnInput(h EventHandler) HTMLH2 {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlH2) OnInvalid(h EventHandler) HTMLH2 {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlH2) OnKeyDown(h EventHandler) HTMLH2 {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlH2) OnKeyPress(h EventHandler) HTMLH2 {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlH2) OnKeyup(h EventHandler) HTMLH2 {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlH2) OnMouseDown(h EventHandler) HTMLH2 {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlH2) OnMouseMove(h EventHandler) HTMLH2 {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlH2) OnMouseOut(h EventHandler) HTMLH2 {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlH2) OnMouseOver(h EventHandler) HTMLH2 {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlH2) OnMouseUp(h EventHandler) HTMLH2 {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlH2) OnPaste(h EventHandler) HTMLH2 {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlH2) OnReset(h EventHandler) HTMLH2 {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlH2) OnScroll(h EventHandler) HTMLH2 {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlH2) OnSearch(h EventHandler) HTMLH2 {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlH2) OnSelect(h EventHandler) HTMLH2 {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlH2) OnSubmit(h EventHandler) HTMLH2 {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlH2) OnWheel(h EventHandler) HTMLH2 {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLH3 is the interface that describes a <h3> HTML element.
type HTMLH3 interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLH3

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLH3

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLH3

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLH3

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLH3

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLH3

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLH3

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLH3

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLH3

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLH3

	// ID specifies a unique id for an element.
	ID(v string) HTMLH3

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLH3

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLH3

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLH3

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLH3

	// Title specifies extra information about an element.
	Title(v string) HTMLH3

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLH3

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLH3

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLH3

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLH3

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLH3

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLH3

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLH3

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLH3

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLH3

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLH3

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLH3

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLH3

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLH3

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLH3

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLH3

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLH3

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLH3

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLH3

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLH3

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLH3

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLH3

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLH3

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLH3

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLH3

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLH3

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLH3

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLH3

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLH3

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLH3

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLH3

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLH3

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLH3
}

// H3 returns an HTML element that defines HTML heading.
func H3() HTMLH3 {
	e := &htmlH3{
		elem: elem{
			tag:         "h3",
			selfClosing: false,
		},
	}

	return e
}

type htmlH3 struct {
	elem
}

func (e *htmlH3) Body(elems ...UI) HTMLH3 {
	e.setBody(elems...)
	return e
}

func (e *htmlH3) Text(v interface{}) HTMLH3 {
	return e.Body(Text(v))
}

func (e *htmlH3) AccessKey(v string) HTMLH3 {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlH3) Aria(k string, v interface{}) HTMLH3 {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlH3) Class(v string) HTMLH3 {
	e.setAttr("class", v)
	return e
}

func (e *htmlH3) ContentEditable(v bool) HTMLH3 {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlH3) DataSet(k string, v interface{}) HTMLH3 {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlH3) Dir(v string) HTMLH3 {
	e.setAttr("dir", v)
	return e
}

func (e *htmlH3) Draggable(v bool) HTMLH3 {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlH3) Hidden(v bool) HTMLH3 {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlH3) ID(v string) HTMLH3 {
	e.setAttr("id", v)
	return e
}

func (e *htmlH3) Lang(v string) HTMLH3 {
	e.setAttr("lang", v)
	return e
}

func (e *htmlH3) Spellcheck(v bool) HTMLH3 {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlH3) Style(k, v string) HTMLH3 {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlH3) TabIndex(v int) HTMLH3 {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlH3) Title(v string) HTMLH3 {
	e.setAttr("title", v)
	return e
}

func (e *htmlH3) OnBlur(h EventHandler) HTMLH3 {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlH3) OnChange(h EventHandler) HTMLH3 {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlH3) OnClick(h EventHandler) HTMLH3 {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlH3) OnContextMenu(h EventHandler) HTMLH3 {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlH3) OnCopy(h EventHandler) HTMLH3 {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlH3) OnCut(h EventHandler) HTMLH3 {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlH3) OnDblClick(h EventHandler) HTMLH3 {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlH3) OnDrag(h EventHandler) HTMLH3 {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlH3) OnDragEnd(h EventHandler) HTMLH3 {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlH3) OnDragEnter(h EventHandler) HTMLH3 {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlH3) OnDragLeave(h EventHandler) HTMLH3 {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlH3) OnDragOver(h EventHandler) HTMLH3 {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlH3) OnDragStart(h EventHandler) HTMLH3 {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlH3) OnDrop(h EventHandler) HTMLH3 {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlH3) OnFocus(h EventHandler) HTMLH3 {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlH3) OnInput(h EventHandler) HTMLH3 {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlH3) OnInvalid(h EventHandler) HTMLH3 {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlH3) OnKeyDown(h EventHandler) HTMLH3 {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlH3) OnKeyPress(h EventHandler) HTMLH3 {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlH3) OnKeyup(h EventHandler) HTMLH3 {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlH3) OnMouseDown(h EventHandler) HTMLH3 {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlH3) OnMouseMove(h EventHandler) HTMLH3 {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlH3) OnMouseOut(h EventHandler) HTMLH3 {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlH3) OnMouseOver(h EventHandler) HTMLH3 {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlH3) OnMouseUp(h EventHandler) HTMLH3 {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlH3) OnPaste(h EventHandler) HTMLH3 {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlH3) OnReset(h EventHandler) HTMLH3 {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlH3) OnScroll(h EventHandler) HTMLH3 {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlH3) OnSearch(h EventHandler) HTMLH3 {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlH3) OnSelect(h EventHandler) HTMLH3 {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlH3) OnSubmit(h EventHandler) HTMLH3 {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlH3) OnWheel(h EventHandler) HTMLH3 {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLH4 is the interface that describes a <h4> HTML element.
type HTMLH4 interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLH4

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLH4

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLH4

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLH4

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLH4

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLH4

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLH4

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLH4

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLH4

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLH4

	// ID specifies a unique id for an element.
	ID(v string) HTMLH4

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLH4

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLH4

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLH4

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLH4

	// Title specifies extra information about an element.
	Title(v string) HTMLH4

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLH4

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLH4

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLH4

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLH4

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLH4

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLH4

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLH4

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLH4

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLH4

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLH4

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLH4

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLH4

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLH4

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLH4

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLH4

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLH4

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLH4

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLH4

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLH4

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLH4

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLH4

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLH4

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLH4

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLH4

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLH4

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLH4

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLH4

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLH4

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLH4

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLH4

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLH4

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLH4
}

// H4 returns an HTML element that defines HTML heading.
func H4() HTMLH4 {
	e := &htmlH4{
		elem: elem{
			tag:         "h4",
			selfClosing: false,
		},
	}

	return e
}

type htmlH4 struct {
	elem
}

func (e *htmlH4) Body(elems ...UI) HTMLH4 {
	e.setBody(elems...)
	return e
}

func (e *htmlH4) Text(v interface{}) HTMLH4 {
	return e.Body(Text(v))
}

func (e *htmlH4) AccessKey(v string) HTMLH4 {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlH4) Aria(k string, v interface{}) HTMLH4 {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlH4) Class(v string) HTMLH4 {
	e.setAttr("class", v)
	return e
}

func (e *htmlH4) ContentEditable(v bool) HTMLH4 {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlH4) DataSet(k string, v interface{}) HTMLH4 {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlH4) Dir(v string) HTMLH4 {
	e.setAttr("dir", v)
	return e
}

func (e *htmlH4) Draggable(v bool) HTMLH4 {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlH4) Hidden(v bool) HTMLH4 {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlH4) ID(v string) HTMLH4 {
	e.setAttr("id", v)
	return e
}

func (e *htmlH4) Lang(v string) HTMLH4 {
	e.setAttr("lang", v)
	return e
}

func (e *htmlH4) Spellcheck(v bool) HTMLH4 {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlH4) Style(k, v string) HTMLH4 {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlH4) TabIndex(v int) HTMLH4 {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlH4) Title(v string) HTMLH4 {
	e.setAttr("title", v)
	return e
}

func (e *htmlH4) OnBlur(h EventHandler) HTMLH4 {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlH4) OnChange(h EventHandler) HTMLH4 {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlH4) OnClick(h EventHandler) HTMLH4 {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlH4) OnContextMenu(h EventHandler) HTMLH4 {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlH4) OnCopy(h EventHandler) HTMLH4 {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlH4) OnCut(h EventHandler) HTMLH4 {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlH4) OnDblClick(h EventHandler) HTMLH4 {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlH4) OnDrag(h EventHandler) HTMLH4 {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlH4) OnDragEnd(h EventHandler) HTMLH4 {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlH4) OnDragEnter(h EventHandler) HTMLH4 {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlH4) OnDragLeave(h EventHandler) HTMLH4 {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlH4) OnDragOver(h EventHandler) HTMLH4 {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlH4) OnDragStart(h EventHandler) HTMLH4 {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlH4) OnDrop(h EventHandler) HTMLH4 {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlH4) OnFocus(h EventHandler) HTMLH4 {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlH4) OnInput(h EventHandler) HTMLH4 {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlH4) OnInvalid(h EventHandler) HTMLH4 {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlH4) OnKeyDown(h EventHandler) HTMLH4 {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlH4) OnKeyPress(h EventHandler) HTMLH4 {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlH4) OnKeyup(h EventHandler) HTMLH4 {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlH4) OnMouseDown(h EventHandler) HTMLH4 {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlH4) OnMouseMove(h EventHandler) HTMLH4 {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlH4) OnMouseOut(h EventHandler) HTMLH4 {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlH4) OnMouseOver(h EventHandler) HTMLH4 {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlH4) OnMouseUp(h EventHandler) HTMLH4 {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlH4) OnPaste(h EventHandler) HTMLH4 {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlH4) OnReset(h EventHandler) HTMLH4 {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlH4) OnScroll(h EventHandler) HTMLH4 {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlH4) OnSearch(h EventHandler) HTMLH4 {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlH4) OnSelect(h EventHandler) HTMLH4 {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlH4) OnSubmit(h EventHandler) HTMLH4 {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlH4) OnWheel(h EventHandler) HTMLH4 {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLH5 is the interface that describes a <h5> HTML element.
type HTMLH5 interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLH5

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLH5

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLH5

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLH5

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLH5

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLH5

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLH5

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLH5

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLH5

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLH5

	// ID specifies a unique id for an element.
	ID(v string) HTMLH5

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLH5

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLH5

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLH5

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLH5

	// Title specifies extra information about an element.
	Title(v string) HTMLH5

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLH5

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLH5

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLH5

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLH5

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLH5

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLH5

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLH5

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLH5

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLH5

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLH5

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLH5

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLH5

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLH5

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLH5

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLH5

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLH5

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLH5

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLH5

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLH5

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLH5

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLH5

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLH5

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLH5

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLH5

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLH5

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLH5

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLH5

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLH5

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLH5

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLH5

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLH5

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLH5
}

// H5 returns an HTML element that defines HTML heading.
func H5() HTMLH5 {
	e := &htmlH5{
		elem: elem{
			tag:         "h5",
			selfClosing: false,
		},
	}

	return e
}

type htmlH5 struct {
	elem
}

func (e *htmlH5) Body(elems ...UI) HTMLH5 {
	e.setBody(elems...)
	return e
}

func (e *htmlH5) Text(v interface{}) HTMLH5 {
	return e.Body(Text(v))
}

func (e *htmlH5) AccessKey(v string) HTMLH5 {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlH5) Aria(k string, v interface{}) HTMLH5 {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlH5) Class(v string) HTMLH5 {
	e.setAttr("class", v)
	return e
}

func (e *htmlH5) ContentEditable(v bool) HTMLH5 {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlH5) DataSet(k string, v interface{}) HTMLH5 {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlH5) Dir(v string) HTMLH5 {
	e.setAttr("dir", v)
	return e
}

func (e *htmlH5) Draggable(v bool) HTMLH5 {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlH5) Hidden(v bool) HTMLH5 {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlH5) ID(v string) HTMLH5 {
	e.setAttr("id", v)
	return e
}

func (e *htmlH5) Lang(v string) HTMLH5 {
	e.setAttr("lang", v)
	return e
}

func (e *htmlH5) Spellcheck(v bool) HTMLH5 {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlH5) Style(k, v string) HTMLH5 {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlH5) TabIndex(v int) HTMLH5 {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlH5) Title(v string) HTMLH5 {
	e.setAttr("title", v)
	return e
}

func (e *htmlH5) OnBlur(h EventHandler) HTMLH5 {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlH5) OnChange(h EventHandler) HTMLH5 {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlH5) OnClick(h EventHandler) HTMLH5 {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlH5) OnContextMenu(h EventHandler) HTMLH5 {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlH5) OnCopy(h EventHandler) HTMLH5 {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlH5) OnCut(h EventHandler) HTMLH5 {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlH5) OnDblClick(h EventHandler) HTMLH5 {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlH5) OnDrag(h EventHandler) HTMLH5 {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlH5) OnDragEnd(h EventHandler) HTMLH5 {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlH5) OnDragEnter(h EventHandler) HTMLH5 {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlH5) OnDragLeave(h EventHandler) HTMLH5 {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlH5) OnDragOver(h EventHandler) HTMLH5 {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlH5) OnDragStart(h EventHandler) HTMLH5 {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlH5) OnDrop(h EventHandler) HTMLH5 {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlH5) OnFocus(h EventHandler) HTMLH5 {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlH5) OnInput(h EventHandler) HTMLH5 {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlH5) OnInvalid(h EventHandler) HTMLH5 {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlH5) OnKeyDown(h EventHandler) HTMLH5 {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlH5) OnKeyPress(h EventHandler) HTMLH5 {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlH5) OnKeyup(h EventHandler) HTMLH5 {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlH5) OnMouseDown(h EventHandler) HTMLH5 {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlH5) OnMouseMove(h EventHandler) HTMLH5 {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlH5) OnMouseOut(h EventHandler) HTMLH5 {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlH5) OnMouseOver(h EventHandler) HTMLH5 {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlH5) OnMouseUp(h EventHandler) HTMLH5 {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlH5) OnPaste(h EventHandler) HTMLH5 {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlH5) OnReset(h EventHandler) HTMLH5 {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlH5) OnScroll(h EventHandler) HTMLH5 {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlH5) OnSearch(h EventHandler) HTMLH5 {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlH5) OnSelect(h EventHandler) HTMLH5 {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlH5) OnSubmit(h EventHandler) HTMLH5 {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlH5) OnWheel(h EventHandler) HTMLH5 {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLH6 is the interface that describes a <h6> HTML element.
type HTMLH6 interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLH6

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLH6

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLH6

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLH6

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLH6

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLH6

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLH6

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLH6

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLH6

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLH6

	// ID specifies a unique id for an element.
	ID(v string) HTMLH6

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLH6

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLH6

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLH6

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLH6

	// Title specifies extra information about an element.
	Title(v string) HTMLH6

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLH6

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLH6

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLH6

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLH6

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLH6

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLH6

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLH6

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLH6

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLH6

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLH6

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLH6

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLH6

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLH6

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLH6

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLH6

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLH6

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLH6

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLH6

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLH6

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLH6

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLH6

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLH6

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLH6

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLH6

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLH6

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLH6

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLH6

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLH6

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLH6

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLH6

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLH6

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLH6
}

// H6 returns an HTML element that defines HTML heading.
func H6() HTMLH6 {
	e := &htmlH6{
		elem: elem{
			tag:         "h6",
			selfClosing: false,
		},
	}

	return e
}

type htmlH6 struct {
	elem
}

func (e *htmlH6) Body(elems ...UI) HTMLH6 {
	e.setBody(elems...)
	return e
}

func (e *htmlH6) Text(v interface{}) HTMLH6 {
	return e.Body(Text(v))
}

func (e *htmlH6) AccessKey(v string) HTMLH6 {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlH6) Aria(k string, v interface{}) HTMLH6 {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlH6) Class(v string) HTMLH6 {
	e.setAttr("class", v)
	return e
}

func (e *htmlH6) ContentEditable(v bool) HTMLH6 {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlH6) DataSet(k string, v interface{}) HTMLH6 {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlH6) Dir(v string) HTMLH6 {
	e.setAttr("dir", v)
	return e
}

func (e *htmlH6) Draggable(v bool) HTMLH6 {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlH6) Hidden(v bool) HTMLH6 {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlH6) ID(v string) HTMLH6 {
	e.setAttr("id", v)
	return e
}

func (e *htmlH6) Lang(v string) HTMLH6 {
	e.setAttr("lang", v)
	return e
}

func (e *htmlH6) Spellcheck(v bool) HTMLH6 {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlH6) Style(k, v string) HTMLH6 {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlH6) TabIndex(v int) HTMLH6 {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlH6) Title(v string) HTMLH6 {
	e.setAttr("title", v)
	return e
}

func (e *htmlH6) OnBlur(h EventHandler) HTMLH6 {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlH6) OnChange(h EventHandler) HTMLH6 {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlH6) OnClick(h EventHandler) HTMLH6 {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlH6) OnContextMenu(h EventHandler) HTMLH6 {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlH6) OnCopy(h EventHandler) HTMLH6 {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlH6) OnCut(h EventHandler) HTMLH6 {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlH6) OnDblClick(h EventHandler) HTMLH6 {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlH6) OnDrag(h EventHandler) HTMLH6 {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlH6) OnDragEnd(h EventHandler) HTMLH6 {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlH6) OnDragEnter(h EventHandler) HTMLH6 {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlH6) OnDragLeave(h EventHandler) HTMLH6 {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlH6) OnDragOver(h EventHandler) HTMLH6 {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlH6) OnDragStart(h EventHandler) HTMLH6 {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlH6) OnDrop(h EventHandler) HTMLH6 {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlH6) OnFocus(h EventHandler) HTMLH6 {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlH6) OnInput(h EventHandler) HTMLH6 {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlH6) OnInvalid(h EventHandler) HTMLH6 {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlH6) OnKeyDown(h EventHandler) HTMLH6 {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlH6) OnKeyPress(h EventHandler) HTMLH6 {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlH6) OnKeyup(h EventHandler) HTMLH6 {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlH6) OnMouseDown(h EventHandler) HTMLH6 {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlH6) OnMouseMove(h EventHandler) HTMLH6 {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlH6) OnMouseOut(h EventHandler) HTMLH6 {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlH6) OnMouseOver(h EventHandler) HTMLH6 {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlH6) OnMouseUp(h EventHandler) HTMLH6 {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlH6) OnPaste(h EventHandler) HTMLH6 {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlH6) OnReset(h EventHandler) HTMLH6 {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlH6) OnScroll(h EventHandler) HTMLH6 {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlH6) OnSearch(h EventHandler) HTMLH6 {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlH6) OnSelect(h EventHandler) HTMLH6 {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlH6) OnSubmit(h EventHandler) HTMLH6 {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlH6) OnWheel(h EventHandler) HTMLH6 {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLHead is the interface that describes a <head> HTML element.
type HTMLHead interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLHead

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLHead

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLHead

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLHead

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLHead

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLHead

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLHead

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLHead

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLHead

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLHead

	// ID specifies a unique id for an element.
	ID(v string) HTMLHead

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLHead

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLHead

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLHead

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLHead

	// Title specifies extra information about an element.
	Title(v string) HTMLHead
}

// Head returns an HTML element that defines information about the document.
func Head() HTMLHead {
	e := &htmlHead{
		elem: elem{
			tag:         "head",
			selfClosing: false,
		},
	}

	return e
}

type htmlHead struct {
	elem
}

func (e *htmlHead) Body(elems ...UI) HTMLHead {
	e.setBody(elems...)
	return e
}

func (e *htmlHead) Text(v interface{}) HTMLHead {
	return e.Body(Text(v))
}

func (e *htmlHead) AccessKey(v string) HTMLHead {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlHead) Aria(k string, v interface{}) HTMLHead {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlHead) Class(v string) HTMLHead {
	e.setAttr("class", v)
	return e
}

func (e *htmlHead) ContentEditable(v bool) HTMLHead {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlHead) DataSet(k string, v interface{}) HTMLHead {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlHead) Dir(v string) HTMLHead {
	e.setAttr("dir", v)
	return e
}

func (e *htmlHead) Draggable(v bool) HTMLHead {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlHead) Hidden(v bool) HTMLHead {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlHead) ID(v string) HTMLHead {
	e.setAttr("id", v)
	return e
}

func (e *htmlHead) Lang(v string) HTMLHead {
	e.setAttr("lang", v)
	return e
}

func (e *htmlHead) Spellcheck(v bool) HTMLHead {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlHead) Style(k, v string) HTMLHead {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlHead) TabIndex(v int) HTMLHead {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlHead) Title(v string) HTMLHead {
	e.setAttr("title", v)
	return e
}

// HTMLHeader is the interface that describes a <header> HTML element.
type HTMLHeader interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLHeader

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLHeader

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLHeader

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLHeader

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLHeader

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLHeader

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLHeader

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLHeader

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLHeader

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLHeader

	// ID specifies a unique id for an element.
	ID(v string) HTMLHeader

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLHeader

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLHeader

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLHeader

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLHeader

	// Title specifies extra information about an element.
	Title(v string) HTMLHeader

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLHeader

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLHeader

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLHeader

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLHeader

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLHeader

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLHeader

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLHeader

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLHeader

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLHeader

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLHeader

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLHeader

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLHeader

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLHeader

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLHeader

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLHeader

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLHeader

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLHeader

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLHeader

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLHeader

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLHeader

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLHeader

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLHeader

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLHeader

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLHeader

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLHeader

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLHeader

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLHeader

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLHeader

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLHeader

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLHeader

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLHeader

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLHeader
}

// Header returns an HTML element that defines a header for a document or section.
func Header() HTMLHeader {
	e := &htmlHeader{
		elem: elem{
			tag:         "header",
			selfClosing: false,
		},
	}

	return e
}

type htmlHeader struct {
	elem
}

func (e *htmlHeader) Body(elems ...UI) HTMLHeader {
	e.setBody(elems...)
	return e
}

func (e *htmlHeader) Text(v interface{}) HTMLHeader {
	return e.Body(Text(v))
}

func (e *htmlHeader) AccessKey(v string) HTMLHeader {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlHeader) Aria(k string, v interface{}) HTMLHeader {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlHeader) Class(v string) HTMLHeader {
	e.setAttr("class", v)
	return e
}

func (e *htmlHeader) ContentEditable(v bool) HTMLHeader {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlHeader) DataSet(k string, v interface{}) HTMLHeader {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlHeader) Dir(v string) HTMLHeader {
	e.setAttr("dir", v)
	return e
}

func (e *htmlHeader) Draggable(v bool) HTMLHeader {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlHeader) Hidden(v bool) HTMLHeader {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlHeader) ID(v string) HTMLHeader {
	e.setAttr("id", v)
	return e
}

func (e *htmlHeader) Lang(v string) HTMLHeader {
	e.setAttr("lang", v)
	return e
}

func (e *htmlHeader) Spellcheck(v bool) HTMLHeader {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlHeader) Style(k, v string) HTMLHeader {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlHeader) TabIndex(v int) HTMLHeader {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlHeader) Title(v string) HTMLHeader {
	e.setAttr("title", v)
	return e
}

func (e *htmlHeader) OnBlur(h EventHandler) HTMLHeader {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlHeader) OnChange(h EventHandler) HTMLHeader {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlHeader) OnClick(h EventHandler) HTMLHeader {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlHeader) OnContextMenu(h EventHandler) HTMLHeader {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlHeader) OnCopy(h EventHandler) HTMLHeader {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlHeader) OnCut(h EventHandler) HTMLHeader {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlHeader) OnDblClick(h EventHandler) HTMLHeader {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlHeader) OnDrag(h EventHandler) HTMLHeader {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlHeader) OnDragEnd(h EventHandler) HTMLHeader {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlHeader) OnDragEnter(h EventHandler) HTMLHeader {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlHeader) OnDragLeave(h EventHandler) HTMLHeader {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlHeader) OnDragOver(h EventHandler) HTMLHeader {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlHeader) OnDragStart(h EventHandler) HTMLHeader {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlHeader) OnDrop(h EventHandler) HTMLHeader {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlHeader) OnFocus(h EventHandler) HTMLHeader {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlHeader) OnInput(h EventHandler) HTMLHeader {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlHeader) OnInvalid(h EventHandler) HTMLHeader {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlHeader) OnKeyDown(h EventHandler) HTMLHeader {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlHeader) OnKeyPress(h EventHandler) HTMLHeader {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlHeader) OnKeyup(h EventHandler) HTMLHeader {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlHeader) OnMouseDown(h EventHandler) HTMLHeader {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlHeader) OnMouseMove(h EventHandler) HTMLHeader {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlHeader) OnMouseOut(h EventHandler) HTMLHeader {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlHeader) OnMouseOver(h EventHandler) HTMLHeader {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlHeader) OnMouseUp(h EventHandler) HTMLHeader {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlHeader) OnPaste(h EventHandler) HTMLHeader {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlHeader) OnReset(h EventHandler) HTMLHeader {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlHeader) OnScroll(h EventHandler) HTMLHeader {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlHeader) OnSearch(h EventHandler) HTMLHeader {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlHeader) OnSelect(h EventHandler) HTMLHeader {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlHeader) OnSubmit(h EventHandler) HTMLHeader {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlHeader) OnWheel(h EventHandler) HTMLHeader {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLHr is the interface that describes a <hr> HTML element.
type HTMLHr interface {
	UI

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLHr

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLHr

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLHr

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLHr

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLHr

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLHr

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLHr

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLHr

	// ID specifies a unique id for an element.
	ID(v string) HTMLHr

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLHr

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLHr

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLHr

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLHr

	// Title specifies extra information about an element.
	Title(v string) HTMLHr

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLHr

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLHr

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLHr

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLHr

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLHr

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLHr

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLHr

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLHr

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLHr

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLHr

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLHr

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLHr

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLHr

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLHr

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLHr

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLHr

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLHr

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLHr

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLHr

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLHr

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLHr

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLHr

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLHr

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLHr

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLHr

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLHr

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLHr

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLHr

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLHr

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLHr

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLHr

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLHr
}

// Hr returns an HTML element that defines a thematic change in the content.
func Hr() HTMLHr {
	e := &htmlHr{
		elem: elem{
			tag:         "hr",
			selfClosing: true,
		},
	}

	return e
}

type htmlHr struct {
	elem
}

func (e *htmlHr) AccessKey(v string) HTMLHr {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlHr) Aria(k string, v interface{}) HTMLHr {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlHr) Class(v string) HTMLHr {
	e.setAttr("class", v)
	return e
}

func (e *htmlHr) ContentEditable(v bool) HTMLHr {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlHr) DataSet(k string, v interface{}) HTMLHr {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlHr) Dir(v string) HTMLHr {
	e.setAttr("dir", v)
	return e
}

func (e *htmlHr) Draggable(v bool) HTMLHr {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlHr) Hidden(v bool) HTMLHr {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlHr) ID(v string) HTMLHr {
	e.setAttr("id", v)
	return e
}

func (e *htmlHr) Lang(v string) HTMLHr {
	e.setAttr("lang", v)
	return e
}

func (e *htmlHr) Spellcheck(v bool) HTMLHr {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlHr) Style(k, v string) HTMLHr {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlHr) TabIndex(v int) HTMLHr {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlHr) Title(v string) HTMLHr {
	e.setAttr("title", v)
	return e
}

func (e *htmlHr) OnBlur(h EventHandler) HTMLHr {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlHr) OnChange(h EventHandler) HTMLHr {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlHr) OnClick(h EventHandler) HTMLHr {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlHr) OnContextMenu(h EventHandler) HTMLHr {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlHr) OnCopy(h EventHandler) HTMLHr {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlHr) OnCut(h EventHandler) HTMLHr {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlHr) OnDblClick(h EventHandler) HTMLHr {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlHr) OnDrag(h EventHandler) HTMLHr {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlHr) OnDragEnd(h EventHandler) HTMLHr {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlHr) OnDragEnter(h EventHandler) HTMLHr {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlHr) OnDragLeave(h EventHandler) HTMLHr {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlHr) OnDragOver(h EventHandler) HTMLHr {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlHr) OnDragStart(h EventHandler) HTMLHr {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlHr) OnDrop(h EventHandler) HTMLHr {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlHr) OnFocus(h EventHandler) HTMLHr {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlHr) OnInput(h EventHandler) HTMLHr {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlHr) OnInvalid(h EventHandler) HTMLHr {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlHr) OnKeyDown(h EventHandler) HTMLHr {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlHr) OnKeyPress(h EventHandler) HTMLHr {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlHr) OnKeyup(h EventHandler) HTMLHr {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlHr) OnMouseDown(h EventHandler) HTMLHr {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlHr) OnMouseMove(h EventHandler) HTMLHr {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlHr) OnMouseOut(h EventHandler) HTMLHr {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlHr) OnMouseOver(h EventHandler) HTMLHr {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlHr) OnMouseUp(h EventHandler) HTMLHr {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlHr) OnPaste(h EventHandler) HTMLHr {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlHr) OnReset(h EventHandler) HTMLHr {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlHr) OnScroll(h EventHandler) HTMLHr {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlHr) OnSearch(h EventHandler) HTMLHr {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlHr) OnSelect(h EventHandler) HTMLHr {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlHr) OnSubmit(h EventHandler) HTMLHr {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlHr) OnWheel(h EventHandler) HTMLHr {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLHtml is the interface that describes a <html> HTML element.
type HTMLHtml interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLHtml

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLHtml

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLHtml

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLHtml

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLHtml

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLHtml

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLHtml

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLHtml

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLHtml

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLHtml

	// ID specifies a unique id for an element.
	ID(v string) HTMLHtml

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLHtml

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLHtml

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLHtml

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLHtml

	// Title specifies extra information about an element.
	Title(v string) HTMLHtml
}

// Html returns an HTML element that defines the root of an HTML document.
func Html() HTMLHtml {
	e := &htmlHtml{
		elem: elem{
			tag:         "html",
			selfClosing: false,
		},
	}

	return e
}

type htmlHtml struct {
	elem
}

func (e *htmlHtml) Body(elems ...UI) HTMLHtml {
	e.setBody(elems...)
	return e
}

func (e *htmlHtml) Text(v interface{}) HTMLHtml {
	return e.Body(Text(v))
}

func (e *htmlHtml) AccessKey(v string) HTMLHtml {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlHtml) Aria(k string, v interface{}) HTMLHtml {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlHtml) Class(v string) HTMLHtml {
	e.setAttr("class", v)
	return e
}

func (e *htmlHtml) ContentEditable(v bool) HTMLHtml {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlHtml) DataSet(k string, v interface{}) HTMLHtml {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlHtml) Dir(v string) HTMLHtml {
	e.setAttr("dir", v)
	return e
}

func (e *htmlHtml) Draggable(v bool) HTMLHtml {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlHtml) Hidden(v bool) HTMLHtml {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlHtml) ID(v string) HTMLHtml {
	e.setAttr("id", v)
	return e
}

func (e *htmlHtml) Lang(v string) HTMLHtml {
	e.setAttr("lang", v)
	return e
}

func (e *htmlHtml) Spellcheck(v bool) HTMLHtml {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlHtml) Style(k, v string) HTMLHtml {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlHtml) TabIndex(v int) HTMLHtml {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlHtml) Title(v string) HTMLHtml {
	e.setAttr("title", v)
	return e
}

// HTMLI is the interface that describes a <i> HTML element.
type HTMLI interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLI

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLI

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLI

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLI

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLI

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLI

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLI

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLI

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLI

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLI

	// ID specifies a unique id for an element.
	ID(v string) HTMLI

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLI

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLI

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLI

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLI

	// Title specifies extra information about an element.
	Title(v string) HTMLI

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLI

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLI

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLI

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLI

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLI

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLI

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLI

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLI

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLI

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLI

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLI

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLI

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLI

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLI

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLI

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLI

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLI

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLI

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLI

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLI

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLI

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLI

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLI

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLI

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLI

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLI

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLI

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLI

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLI

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLI

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLI

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLI
}

// I returns an HTML element that defines a part of text in an alternate voice or mood.
func I() HTMLI {
	e := &htmlI{
		elem: elem{
			tag:         "i",
			selfClosing: false,
		},
	}

	return e
}

type htmlI struct {
	elem
}

func (e *htmlI) Body(elems ...UI) HTMLI {
	e.setBody(elems...)
	return e
}

func (e *htmlI) Text(v interface{}) HTMLI {
	return e.Body(Text(v))
}

func (e *htmlI) AccessKey(v string) HTMLI {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlI) Aria(k string, v interface{}) HTMLI {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlI) Class(v string) HTMLI {
	e.setAttr("class", v)
	return e
}

func (e *htmlI) ContentEditable(v bool) HTMLI {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlI) DataSet(k string, v interface{}) HTMLI {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlI) Dir(v string) HTMLI {
	e.setAttr("dir", v)
	return e
}

func (e *htmlI) Draggable(v bool) HTMLI {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlI) Hidden(v bool) HTMLI {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlI) ID(v string) HTMLI {
	e.setAttr("id", v)
	return e
}

func (e *htmlI) Lang(v string) HTMLI {
	e.setAttr("lang", v)
	return e
}

func (e *htmlI) Spellcheck(v bool) HTMLI {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlI) Style(k, v string) HTMLI {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlI) TabIndex(v int) HTMLI {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlI) Title(v string) HTMLI {
	e.setAttr("title", v)
	return e
}

func (e *htmlI) OnBlur(h EventHandler) HTMLI {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlI) OnChange(h EventHandler) HTMLI {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlI) OnClick(h EventHandler) HTMLI {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlI) OnContextMenu(h EventHandler) HTMLI {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlI) OnCopy(h EventHandler) HTMLI {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlI) OnCut(h EventHandler) HTMLI {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlI) OnDblClick(h EventHandler) HTMLI {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlI) OnDrag(h EventHandler) HTMLI {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlI) OnDragEnd(h EventHandler) HTMLI {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlI) OnDragEnter(h EventHandler) HTMLI {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlI) OnDragLeave(h EventHandler) HTMLI {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlI) OnDragOver(h EventHandler) HTMLI {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlI) OnDragStart(h EventHandler) HTMLI {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlI) OnDrop(h EventHandler) HTMLI {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlI) OnFocus(h EventHandler) HTMLI {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlI) OnInput(h EventHandler) HTMLI {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlI) OnInvalid(h EventHandler) HTMLI {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlI) OnKeyDown(h EventHandler) HTMLI {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlI) OnKeyPress(h EventHandler) HTMLI {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlI) OnKeyup(h EventHandler) HTMLI {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlI) OnMouseDown(h EventHandler) HTMLI {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlI) OnMouseMove(h EventHandler) HTMLI {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlI) OnMouseOut(h EventHandler) HTMLI {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlI) OnMouseOver(h EventHandler) HTMLI {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlI) OnMouseUp(h EventHandler) HTMLI {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlI) OnPaste(h EventHandler) HTMLI {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlI) OnReset(h EventHandler) HTMLI {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlI) OnScroll(h EventHandler) HTMLI {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlI) OnSearch(h EventHandler) HTMLI {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlI) OnSelect(h EventHandler) HTMLI {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlI) OnSubmit(h EventHandler) HTMLI {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlI) OnWheel(h EventHandler) HTMLI {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLIFrame is the interface that describes a <iframe> HTML element.
type HTMLIFrame interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLIFrame

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLIFrame

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLIFrame

	// Allow specifies a feature policy. Can be called multiple times to set multiple policies.
	Allow(v string) HTMLIFrame

	// AllowFullscreen reports whether an iframe can activate fullscreen mode.
	AllowFullscreen(v bool) HTMLIFrame

	// AllowPaymentRequest reports whether an iframe should be allowed to invoke the Payment Request API
	AllowPaymentRequest(v bool) HTMLIFrame

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLIFrame

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLIFrame

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLIFrame

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLIFrame

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLIFrame

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLIFrame

	// Height specifies the height of the element (in pixels).
	Height(v int) HTMLIFrame

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLIFrame

	// ID specifies a unique id for an element.
	ID(v string) HTMLIFrame

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLIFrame

	// Name specifies the name of the element.
	Name(v string) HTMLIFrame

	// ReferrerPolicy specifies how much/which referrer information that will be sent when processing the iframe attributes
	ReferrerPolicy(v string) HTMLIFrame

	// Sandbox enables an extra set of restrictions for the content in an iframe.
	Sandbox(v interface{}) HTMLIFrame

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLIFrame

	// Src specifies the URL of the media file.
	Src(v string) HTMLIFrame

	// SrcDoc specifies the HTML content of the page to show in the iframe.
	SrcDoc(v string) HTMLIFrame

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLIFrame

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLIFrame

	// Title specifies extra information about an element.
	Title(v string) HTMLIFrame

	// Width specifies the width of the element.
	Width(v int) HTMLIFrame

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLIFrame

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLIFrame

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLIFrame

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLIFrame

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLIFrame

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLIFrame

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLIFrame

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLIFrame

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLIFrame

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLIFrame

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLIFrame

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLIFrame

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLIFrame

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLIFrame

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLIFrame

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLIFrame

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLIFrame

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLIFrame

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLIFrame

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLIFrame

	// OnLoad calls the given handler after the element is finished loading.
	OnLoad(h EventHandler) HTMLIFrame

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLIFrame

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLIFrame

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLIFrame

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLIFrame

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLIFrame

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLIFrame

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLIFrame

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLIFrame

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLIFrame

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLIFrame

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLIFrame

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLIFrame
}

// IFrame returns an HTML element that defines an inline frame.
func IFrame() HTMLIFrame {
	e := &htmlIFrame{
		elem: elem{
			tag:         "iframe",
			selfClosing: false,
		},
	}

	return e
}

type htmlIFrame struct {
	elem
}

func (e *htmlIFrame) Body(elems ...UI) HTMLIFrame {
	e.setBody(elems...)
	return e
}

func (e *htmlIFrame) Text(v interface{}) HTMLIFrame {
	return e.Body(Text(v))
}

func (e *htmlIFrame) AccessKey(v string) HTMLIFrame {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlIFrame) Allow(v string) HTMLIFrame {
	e.setAttr("allow", v)
	return e
}

func (e *htmlIFrame) AllowFullscreen(v bool) HTMLIFrame {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("allowfullscreen", s)
	return e
}

func (e *htmlIFrame) AllowPaymentRequest(v bool) HTMLIFrame {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("allowpaymentrequest", s)
	return e
}

func (e *htmlIFrame) Aria(k string, v interface{}) HTMLIFrame {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlIFrame) Class(v string) HTMLIFrame {
	e.setAttr("class", v)
	return e
}

func (e *htmlIFrame) ContentEditable(v bool) HTMLIFrame {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlIFrame) DataSet(k string, v interface{}) HTMLIFrame {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlIFrame) Dir(v string) HTMLIFrame {
	e.setAttr("dir", v)
	return e
}

func (e *htmlIFrame) Draggable(v bool) HTMLIFrame {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlIFrame) Height(v int) HTMLIFrame {
	e.setAttr("height", v)
	return e
}

func (e *htmlIFrame) Hidden(v bool) HTMLIFrame {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlIFrame) ID(v string) HTMLIFrame {
	e.setAttr("id", v)
	return e
}

func (e *htmlIFrame) Lang(v string) HTMLIFrame {
	e.setAttr("lang", v)
	return e
}

func (e *htmlIFrame) Name(v string) HTMLIFrame {
	e.setAttr("name", v)
	return e
}

func (e *htmlIFrame) ReferrerPolicy(v string) HTMLIFrame {
	e.setAttr("referrerpolicy", v)
	return e
}

func (e *htmlIFrame) Sandbox(v interface{}) HTMLIFrame {
	e.setAttr("sandbox", v)
	return e
}

func (e *htmlIFrame) Spellcheck(v bool) HTMLIFrame {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlIFrame) Src(v string) HTMLIFrame {
	e.setAttr("src", StaticResource(v))
	return e
}

func (e *htmlIFrame) SrcDoc(v string) HTMLIFrame {
	e.setAttr("srcdoc", v)
	return e
}

func (e *htmlIFrame) Style(k, v string) HTMLIFrame {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlIFrame) TabIndex(v int) HTMLIFrame {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlIFrame) Title(v string) HTMLIFrame {
	e.setAttr("title", v)
	return e
}

func (e *htmlIFrame) Width(v int) HTMLIFrame {
	e.setAttr("width", v)
	return e
}

func (e *htmlIFrame) OnBlur(h EventHandler) HTMLIFrame {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlIFrame) OnChange(h EventHandler) HTMLIFrame {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlIFrame) OnClick(h EventHandler) HTMLIFrame {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlIFrame) OnContextMenu(h EventHandler) HTMLIFrame {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlIFrame) OnCopy(h EventHandler) HTMLIFrame {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlIFrame) OnCut(h EventHandler) HTMLIFrame {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlIFrame) OnDblClick(h EventHandler) HTMLIFrame {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlIFrame) OnDrag(h EventHandler) HTMLIFrame {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlIFrame) OnDragEnd(h EventHandler) HTMLIFrame {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlIFrame) OnDragEnter(h EventHandler) HTMLIFrame {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlIFrame) OnDragLeave(h EventHandler) HTMLIFrame {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlIFrame) OnDragOver(h EventHandler) HTMLIFrame {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlIFrame) OnDragStart(h EventHandler) HTMLIFrame {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlIFrame) OnDrop(h EventHandler) HTMLIFrame {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlIFrame) OnFocus(h EventHandler) HTMLIFrame {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlIFrame) OnInput(h EventHandler) HTMLIFrame {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlIFrame) OnInvalid(h EventHandler) HTMLIFrame {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlIFrame) OnKeyDown(h EventHandler) HTMLIFrame {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlIFrame) OnKeyPress(h EventHandler) HTMLIFrame {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlIFrame) OnKeyup(h EventHandler) HTMLIFrame {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlIFrame) OnLoad(h EventHandler) HTMLIFrame {
	e.setEventHandler("load", h)
	return e
}

func (e *htmlIFrame) OnMouseDown(h EventHandler) HTMLIFrame {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlIFrame) OnMouseMove(h EventHandler) HTMLIFrame {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlIFrame) OnMouseOut(h EventHandler) HTMLIFrame {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlIFrame) OnMouseOver(h EventHandler) HTMLIFrame {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlIFrame) OnMouseUp(h EventHandler) HTMLIFrame {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlIFrame) OnPaste(h EventHandler) HTMLIFrame {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlIFrame) OnReset(h EventHandler) HTMLIFrame {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlIFrame) OnScroll(h EventHandler) HTMLIFrame {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlIFrame) OnSearch(h EventHandler) HTMLIFrame {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlIFrame) OnSelect(h EventHandler) HTMLIFrame {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlIFrame) OnSubmit(h EventHandler) HTMLIFrame {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlIFrame) OnWheel(h EventHandler) HTMLIFrame {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLImg is the interface that describes a <img> HTML element.
type HTMLImg interface {
	UI

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLImg

	// Alt specifies an alternate text when the original element fails to display.
	Alt(v string) HTMLImg

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLImg

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLImg

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLImg

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLImg

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLImg

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLImg

	// Height specifies the height of the element (in pixels).
	Height(v int) HTMLImg

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLImg

	// ID specifies a unique id for an element.
	ID(v string) HTMLImg

	// IsMap specifies an image as a server-side image-map.
	IsMap(v bool) HTMLImg

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLImg

	// Sizes specifies the size of the linked resource.
	Sizes(v string) HTMLImg

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLImg

	// Src specifies the URL of the media file.
	Src(v string) HTMLImg

	// SrcSet specifies the URL of the image to use in different situations.
	SrcSet(v string) HTMLImg

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLImg

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLImg

	// Title specifies extra information about an element.
	Title(v string) HTMLImg

	// UseMap specifies an image as a client-side image-map.
	UseMap(v string) HTMLImg

	// Width specifies the width of the element.
	Width(v int) HTMLImg

	// OnAbort calls the given handler on abort.
	OnAbort(h EventHandler) HTMLImg

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLImg

	// OnCanPlay calls the given handler when a file is ready to start playing (when it has buffered enough to begin).
	OnCanPlay(h EventHandler) HTMLImg

	// OnCanPlayThrough calls the given handler when a file can be played all the way to the end without pausing for buffering.
	OnCanPlayThrough(h EventHandler) HTMLImg

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLImg

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLImg

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLImg

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLImg

	// OnCueChange calls the given handler when the cue changes in a track element.
	OnCueChange(h EventHandler) HTMLImg

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLImg

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLImg

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLImg

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLImg

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLImg

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLImg

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLImg

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLImg

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLImg

	// OnDurationChange calls the given handler when the length of the media changes.
	OnDurationChange(h EventHandler) HTMLImg

	// OnEmptied calls the given handler when something bad happens and the file is suddenly unavailable (like unexpectedly disconnects).
	OnEmptied(h EventHandler) HTMLImg

	// OnEnded calls the given handler when the media has reach the end.
	OnEnded(h EventHandler) HTMLImg

	// OnError calls the given handler when an error occurs.
	OnError(h EventHandler) HTMLImg

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLImg

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLImg

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLImg

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLImg

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLImg

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLImg

	// OnLoad calls the given handler after the element is finished loading.
	OnLoad(h EventHandler) HTMLImg

	// OnLoadStart calls the given handler just as the file begins to load before anything is actually loaded.
	OnLoadStart(h EventHandler) HTMLImg

	// OnLoadedData calls the given handler when media data is loaded.
	OnLoadedData(h EventHandler) HTMLImg

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLImg

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLImg

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLImg

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLImg

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLImg

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLImg

	// OnPause calls the given handler when the media is paused either by the user or programmatically.
	OnPause(h EventHandler) HTMLImg

	// OnPlay calls the given handler when the media is ready to start playing.
	OnPlay(h EventHandler) HTMLImg

	// OnPlaying calls the given handler when the media actually has started playing.
	OnPlaying(h EventHandler) HTMLImg

	// OnProgress calls the given handler when the browser is in the process of getting the media data.
	OnProgress(h EventHandler) HTMLImg

	// OnRateChange calls the given handler each time the playback rate changes (like when a user switches to a slow motion or fast forward mode).
	OnRateChange(h EventHandler) HTMLImg

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLImg

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLImg

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLImg

	// OnSeeked calls the given handler when the seeking attribute is set to false indicating that seeking has ended.
	OnSeeked(h EventHandler) HTMLImg

	// OnSeeking calls the given handler when the seeking attribute is set to true indicating that seeking is active.
	OnSeeking(h EventHandler) HTMLImg

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLImg

	// OnStalled calls the given handler when the browser is unable to fetch the media data for whatever reason.
	OnStalled(h EventHandler) HTMLImg

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLImg

	// OnSuspend calls the given handler when fetching the media data is stopped before it is completely loaded for whatever reason.
	OnSuspend(h EventHandler) HTMLImg

	// OnTimeUpdate calls the given handler when the playing position has changed (like when the user fast forwards to a different point in the media).
	OnTimeUpdate(h EventHandler) HTMLImg

	// OnVolumeChange calls the given handler each time the volume is changed which (includes setting the volume to "mute").
	OnVolumeChange(h EventHandler) HTMLImg

	// OnWaiting calls the given handler when the media has paused but is expected to resume (like when the media pauses to buffer more data).
	OnWaiting(h EventHandler) HTMLImg

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLImg

	// OnloadedMetaData calls the given handler when meta data (like dimensions and duration) are loaded.
	OnloadedMetaData(h EventHandler) HTMLImg
}

// Img returns an HTML element that defines an image.
func Img() HTMLImg {
	e := &htmlImg{
		elem: elem{
			tag:         "img",
			selfClosing: true,
		},
	}

	return e
}

type htmlImg struct {
	elem
}

func (e *htmlImg) AccessKey(v string) HTMLImg {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlImg) Alt(v string) HTMLImg {
	e.setAttr("alt", v)
	return e
}

func (e *htmlImg) Aria(k string, v interface{}) HTMLImg {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlImg) Class(v string) HTMLImg {
	e.setAttr("class", v)
	return e
}

func (e *htmlImg) ContentEditable(v bool) HTMLImg {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlImg) DataSet(k string, v interface{}) HTMLImg {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlImg) Dir(v string) HTMLImg {
	e.setAttr("dir", v)
	return e
}

func (e *htmlImg) Draggable(v bool) HTMLImg {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlImg) Height(v int) HTMLImg {
	e.setAttr("height", v)
	return e
}

func (e *htmlImg) Hidden(v bool) HTMLImg {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlImg) ID(v string) HTMLImg {
	e.setAttr("id", v)
	return e
}

func (e *htmlImg) IsMap(v bool) HTMLImg {
	e.setAttr("ismap", v)
	return e
}

func (e *htmlImg) Lang(v string) HTMLImg {
	e.setAttr("lang", v)
	return e
}

func (e *htmlImg) Sizes(v string) HTMLImg {
	e.setAttr("sizes", v)
	return e
}

func (e *htmlImg) Spellcheck(v bool) HTMLImg {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlImg) Src(v string) HTMLImg {
	e.setAttr("src", StaticResource(v))
	return e
}

func (e *htmlImg) SrcSet(v string) HTMLImg {
	e.setAttr("srcset", StaticResource(v))
	return e
}

func (e *htmlImg) Style(k, v string) HTMLImg {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlImg) TabIndex(v int) HTMLImg {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlImg) Title(v string) HTMLImg {
	e.setAttr("title", v)
	return e
}

func (e *htmlImg) UseMap(v string) HTMLImg {
	e.setAttr("usemap", v)
	return e
}

func (e *htmlImg) Width(v int) HTMLImg {
	e.setAttr("width", v)
	return e
}

func (e *htmlImg) OnAbort(h EventHandler) HTMLImg {
	e.setEventHandler("abort", h)
	return e
}

func (e *htmlImg) OnBlur(h EventHandler) HTMLImg {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlImg) OnCanPlay(h EventHandler) HTMLImg {
	e.setEventHandler("canplay", h)
	return e
}

func (e *htmlImg) OnCanPlayThrough(h EventHandler) HTMLImg {
	e.setEventHandler("canplaythrough", h)
	return e
}

func (e *htmlImg) OnChange(h EventHandler) HTMLImg {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlImg) OnClick(h EventHandler) HTMLImg {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlImg) OnContextMenu(h EventHandler) HTMLImg {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlImg) OnCopy(h EventHandler) HTMLImg {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlImg) OnCueChange(h EventHandler) HTMLImg {
	e.setEventHandler("cuechange", h)
	return e
}

func (e *htmlImg) OnCut(h EventHandler) HTMLImg {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlImg) OnDblClick(h EventHandler) HTMLImg {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlImg) OnDrag(h EventHandler) HTMLImg {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlImg) OnDragEnd(h EventHandler) HTMLImg {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlImg) OnDragEnter(h EventHandler) HTMLImg {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlImg) OnDragLeave(h EventHandler) HTMLImg {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlImg) OnDragOver(h EventHandler) HTMLImg {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlImg) OnDragStart(h EventHandler) HTMLImg {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlImg) OnDrop(h EventHandler) HTMLImg {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlImg) OnDurationChange(h EventHandler) HTMLImg {
	e.setEventHandler("durationchange", h)
	return e
}

func (e *htmlImg) OnEmptied(h EventHandler) HTMLImg {
	e.setEventHandler("emptied", h)
	return e
}

func (e *htmlImg) OnEnded(h EventHandler) HTMLImg {
	e.setEventHandler("ended", h)
	return e
}

func (e *htmlImg) OnError(h EventHandler) HTMLImg {
	e.setEventHandler("error", h)
	return e
}

func (e *htmlImg) OnFocus(h EventHandler) HTMLImg {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlImg) OnInput(h EventHandler) HTMLImg {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlImg) OnInvalid(h EventHandler) HTMLImg {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlImg) OnKeyDown(h EventHandler) HTMLImg {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlImg) OnKeyPress(h EventHandler) HTMLImg {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlImg) OnKeyup(h EventHandler) HTMLImg {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlImg) OnLoad(h EventHandler) HTMLImg {
	e.setEventHandler("load", h)
	return e
}

func (e *htmlImg) OnLoadStart(h EventHandler) HTMLImg {
	e.setEventHandler("loadstart", h)
	return e
}

func (e *htmlImg) OnLoadedData(h EventHandler) HTMLImg {
	e.setEventHandler("loadeddata", h)
	return e
}

func (e *htmlImg) OnMouseDown(h EventHandler) HTMLImg {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlImg) OnMouseMove(h EventHandler) HTMLImg {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlImg) OnMouseOut(h EventHandler) HTMLImg {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlImg) OnMouseOver(h EventHandler) HTMLImg {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlImg) OnMouseUp(h EventHandler) HTMLImg {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlImg) OnPaste(h EventHandler) HTMLImg {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlImg) OnPause(h EventHandler) HTMLImg {
	e.setEventHandler("pause", h)
	return e
}

func (e *htmlImg) OnPlay(h EventHandler) HTMLImg {
	e.setEventHandler("play", h)
	return e
}

func (e *htmlImg) OnPlaying(h EventHandler) HTMLImg {
	e.setEventHandler("playing", h)
	return e
}

func (e *htmlImg) OnProgress(h EventHandler) HTMLImg {
	e.setEventHandler("progress", h)
	return e
}

func (e *htmlImg) OnRateChange(h EventHandler) HTMLImg {
	e.setEventHandler("ratechange", h)
	return e
}

func (e *htmlImg) OnReset(h EventHandler) HTMLImg {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlImg) OnScroll(h EventHandler) HTMLImg {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlImg) OnSearch(h EventHandler) HTMLImg {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlImg) OnSeeked(h EventHandler) HTMLImg {
	e.setEventHandler("seeked", h)
	return e
}

func (e *htmlImg) OnSeeking(h EventHandler) HTMLImg {
	e.setEventHandler("seeking", h)
	return e
}

func (e *htmlImg) OnSelect(h EventHandler) HTMLImg {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlImg) OnStalled(h EventHandler) HTMLImg {
	e.setEventHandler("stalled", h)
	return e
}

func (e *htmlImg) OnSubmit(h EventHandler) HTMLImg {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlImg) OnSuspend(h EventHandler) HTMLImg {
	e.setEventHandler("suspend", h)
	return e
}

func (e *htmlImg) OnTimeUpdate(h EventHandler) HTMLImg {
	e.setEventHandler("timeupdate", h)
	return e
}

func (e *htmlImg) OnVolumeChange(h EventHandler) HTMLImg {
	e.setEventHandler("volumechange", h)
	return e
}

func (e *htmlImg) OnWaiting(h EventHandler) HTMLImg {
	e.setEventHandler("waiting", h)
	return e
}

func (e *htmlImg) OnWheel(h EventHandler) HTMLImg {
	e.setEventHandler("wheel", h)
	return e
}

func (e *htmlImg) OnloadedMetaData(h EventHandler) HTMLImg {
	e.setEventHandler("loadedmetadata", h)
	return e
}

// HTMLInput is the interface that describes a <input> HTML element.
type HTMLInput interface {
	UI

	// Accept specifies the types of files that the server accepts (only for file type).
	Accept(v string) HTMLInput

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLInput

	// Alt specifies an alternate text when the original element fails to display.
	Alt(v string) HTMLInput

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLInput

	// AutoComplete specifies whether the element should have autocomplete enabled.
	AutoComplete(v bool) HTMLInput

	// AutoFocus specifies that the element should automatically get focus when the page loads.
	AutoFocus(v bool) HTMLInput

	// Checked specifies that an input element should be pre-selected when the page loads (for checkbox or radio types).
	Checked(v bool) HTMLInput

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLInput

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLInput

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLInput

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLInput

	// DirName specifies that the text direction will be submitted.
	DirName(v string) HTMLInput

	// Disabled specifies that the specified element/group of elements should be disabled.
	Disabled(v bool) HTMLInput

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLInput

	// Form specifies the name of the form the element belongs to.
	Form(v string) HTMLInput

	// FormAction specifies where to send the form-data when a form is submitted. Only for submit type.
	FormAction(v string) HTMLInput

	// FormEncType specifies how form-data should be encoded before sending it to a server. Only for submit type.
	FormEncType(v string) HTMLInput

	// FormMethod specifies how to send the form-data (which HTTP method to use). Only for submit type.
	FormMethod(v string) HTMLInput

	// FormNoValidate specifies that the form-data should not be validated on submission. Only for submit type.
	FormNoValidate(v bool) HTMLInput

	// FormTarget specifies where to display the response after submitting the form. Only for submit type.
	FormTarget(v string) HTMLInput

	// Height specifies the height of the element (in pixels).
	Height(v int) HTMLInput

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLInput

	// ID specifies a unique id for an element.
	ID(v string) HTMLInput

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLInput

	// List refers to a datalist element that contains pre-defined options for an input element.
	List(v string) HTMLInput

	// Max Specifies the maximum value.
	Max(v interface{}) HTMLInput

	// MaxLength specifies the maximum number of characters allowed in an element.
	MaxLength(v int) HTMLInput

	// Min specifies a minimum value.
	Min(v interface{}) HTMLInput

	// Multiple specifies that a user can enter more than one value.
	Multiple(v bool) HTMLInput

	// Name specifies the name of the element.
	Name(v string) HTMLInput

	// Pattern specifies a regular expression that an input element's value is checked against.
	Pattern(v string) HTMLInput

	// Placeholder specifies a short hint that describes the expected value of the element.
	Placeholder(v string) HTMLInput

	// ReadOnly specifies that the element is read-only.
	ReadOnly(v bool) HTMLInput

	// Required specifies that the element must be filled out before submitting the form.
	Required(v bool) HTMLInput

	// Size specifies the width.
	Size(v int) HTMLInput

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLInput

	// Src specifies the URL of the media file.
	Src(v string) HTMLInput

	// Step specifies the legal number intervals for an input field.
	Step(v float64) HTMLInput

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLInput

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLInput

	// Title specifies extra information about an element.
	Title(v string) HTMLInput

	// Type specifies the type of element.
	Type(v string) HTMLInput

	// Value specifies the value of the element.
	Value(v interface{}) HTMLInput

	// Width specifies the width of the element.
	Width(v int) HTMLInput

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLInput

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLInput

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLInput

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLInput

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLInput

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLInput

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLInput

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLInput

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLInput

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLInput

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLInput

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLInput

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLInput

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLInput

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLInput

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLInput

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLInput

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLInput

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLInput

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLInput

	// OnLoad calls the given handler after the element is finished loading.
	OnLoad(h EventHandler) HTMLInput

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLInput

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLInput

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLInput

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLInput

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLInput

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLInput

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLInput

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLInput

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLInput

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLInput

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLInput

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLInput
}

// Input returns an HTML element that defines an input control.
func Input() HTMLInput {
	e := &htmlInput{
		elem: elem{
			tag:         "input",
			selfClosing: true,
		},
	}

	return e
}

type htmlInput struct {
	elem
}

func (e *htmlInput) Accept(v string) HTMLInput {
	e.setAttr("accept", v)
	return e
}

func (e *htmlInput) AccessKey(v string) HTMLInput {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlInput) Alt(v string) HTMLInput {
	e.setAttr("alt", v)
	return e
}

func (e *htmlInput) Aria(k string, v interface{}) HTMLInput {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlInput) AutoComplete(v bool) HTMLInput {
	s := "off"
	if v {
		s = "on"
	}

	e.setAttr("autocomplete", s)
	return e
}

func (e *htmlInput) AutoFocus(v bool) HTMLInput {
	e.setAttr("autofocus", v)
	return e
}

func (e *htmlInput) Checked(v bool) HTMLInput {
	e.setAttr("checked", v)
	return e
}

func (e *htmlInput) Class(v string) HTMLInput {
	e.setAttr("class", v)
	return e
}

func (e *htmlInput) ContentEditable(v bool) HTMLInput {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlInput) DataSet(k string, v interface{}) HTMLInput {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlInput) Dir(v string) HTMLInput {
	e.setAttr("dir", v)
	return e
}

func (e *htmlInput) DirName(v string) HTMLInput {
	e.setAttr("dirname", v)
	return e
}

func (e *htmlInput) Disabled(v bool) HTMLInput {
	e.setAttr("disabled", v)
	return e
}

func (e *htmlInput) Draggable(v bool) HTMLInput {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlInput) Form(v string) HTMLInput {
	e.setAttr("form", v)
	return e
}

func (e *htmlInput) FormAction(v string) HTMLInput {
	e.setAttr("formaction", v)
	return e
}

func (e *htmlInput) FormEncType(v string) HTMLInput {
	e.setAttr("formenctype", v)
	return e
}

func (e *htmlInput) FormMethod(v string) HTMLInput {
	e.setAttr("formmethod", v)
	return e
}

func (e *htmlInput) FormNoValidate(v bool) HTMLInput {
	e.setAttr("formnovalidate", v)
	return e
}

func (e *htmlInput) FormTarget(v string) HTMLInput {
	e.setAttr("formtarget", v)
	return e
}

func (e *htmlInput) Height(v int) HTMLInput {
	e.setAttr("height", v)
	return e
}

func (e *htmlInput) Hidden(v bool) HTMLInput {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlInput) ID(v string) HTMLInput {
	e.setAttr("id", v)
	return e
}

func (e *htmlInput) Lang(v string) HTMLInput {
	e.setAttr("lang", v)
	return e
}

func (e *htmlInput) List(v string) HTMLInput {
	e.setAttr("list", v)
	return e
}

func (e *htmlInput) Max(v interface{}) HTMLInput {
	e.setAttr("max", v)
	return e
}

func (e *htmlInput) MaxLength(v int) HTMLInput {
	e.setAttr("maxlength", v)
	return e
}

func (e *htmlInput) Min(v interface{}) HTMLInput {
	e.setAttr("min", v)
	return e
}

func (e *htmlInput) Multiple(v bool) HTMLInput {
	e.setAttr("multiple", v)
	return e
}

func (e *htmlInput) Name(v string) HTMLInput {
	e.setAttr("name", v)
	return e
}

func (e *htmlInput) Pattern(v string) HTMLInput {
	e.setAttr("pattern", v)
	return e
}

func (e *htmlInput) Placeholder(v string) HTMLInput {
	e.setAttr("placeholder", v)
	return e
}

func (e *htmlInput) ReadOnly(v bool) HTMLInput {
	e.setAttr("readonly", v)
	return e
}

func (e *htmlInput) Required(v bool) HTMLInput {
	e.setAttr("required", v)
	return e
}

func (e *htmlInput) Size(v int) HTMLInput {
	e.setAttr("size", v)
	return e
}

func (e *htmlInput) Spellcheck(v bool) HTMLInput {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlInput) Src(v string) HTMLInput {
	e.setAttr("src", StaticResource(v))
	return e
}

func (e *htmlInput) Step(v float64) HTMLInput {
	e.setAttr("step", v)
	return e
}

func (e *htmlInput) Style(k, v string) HTMLInput {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlInput) TabIndex(v int) HTMLInput {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlInput) Title(v string) HTMLInput {
	e.setAttr("title", v)
	return e
}

func (e *htmlInput) Type(v string) HTMLInput {
	e.setAttr("type", v)
	return e
}

func (e *htmlInput) Value(v interface{}) HTMLInput {
	e.setAttr("value", v)
	return e
}

func (e *htmlInput) Width(v int) HTMLInput {
	e.setAttr("width", v)
	return e
}

func (e *htmlInput) OnBlur(h EventHandler) HTMLInput {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlInput) OnChange(h EventHandler) HTMLInput {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlInput) OnClick(h EventHandler) HTMLInput {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlInput) OnContextMenu(h EventHandler) HTMLInput {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlInput) OnCopy(h EventHandler) HTMLInput {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlInput) OnCut(h EventHandler) HTMLInput {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlInput) OnDblClick(h EventHandler) HTMLInput {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlInput) OnDrag(h EventHandler) HTMLInput {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlInput) OnDragEnd(h EventHandler) HTMLInput {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlInput) OnDragEnter(h EventHandler) HTMLInput {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlInput) OnDragLeave(h EventHandler) HTMLInput {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlInput) OnDragOver(h EventHandler) HTMLInput {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlInput) OnDragStart(h EventHandler) HTMLInput {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlInput) OnDrop(h EventHandler) HTMLInput {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlInput) OnFocus(h EventHandler) HTMLInput {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlInput) OnInput(h EventHandler) HTMLInput {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlInput) OnInvalid(h EventHandler) HTMLInput {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlInput) OnKeyDown(h EventHandler) HTMLInput {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlInput) OnKeyPress(h EventHandler) HTMLInput {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlInput) OnKeyup(h EventHandler) HTMLInput {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlInput) OnLoad(h EventHandler) HTMLInput {
	e.setEventHandler("load", h)
	return e
}

func (e *htmlInput) OnMouseDown(h EventHandler) HTMLInput {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlInput) OnMouseMove(h EventHandler) HTMLInput {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlInput) OnMouseOut(h EventHandler) HTMLInput {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlInput) OnMouseOver(h EventHandler) HTMLInput {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlInput) OnMouseUp(h EventHandler) HTMLInput {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlInput) OnPaste(h EventHandler) HTMLInput {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlInput) OnReset(h EventHandler) HTMLInput {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlInput) OnScroll(h EventHandler) HTMLInput {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlInput) OnSearch(h EventHandler) HTMLInput {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlInput) OnSelect(h EventHandler) HTMLInput {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlInput) OnSubmit(h EventHandler) HTMLInput {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlInput) OnWheel(h EventHandler) HTMLInput {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLIns is the interface that describes a <ins> HTML element.
type HTMLIns interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLIns

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLIns

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLIns

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLIns

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLIns

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLIns

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLIns

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLIns

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLIns

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLIns

	// ID specifies a unique id for an element.
	ID(v string) HTMLIns

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLIns

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLIns

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLIns

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLIns

	// Title specifies extra information about an element.
	Title(v string) HTMLIns

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLIns

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLIns

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLIns

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLIns

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLIns

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLIns

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLIns

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLIns

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLIns

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLIns

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLIns

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLIns

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLIns

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLIns

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLIns

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLIns

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLIns

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLIns

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLIns

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLIns

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLIns

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLIns

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLIns

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLIns

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLIns

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLIns

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLIns

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLIns

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLIns

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLIns

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLIns

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLIns
}

// Ins returns an HTML element that defines a text that has been inserted into a document.
func Ins() HTMLIns {
	e := &htmlIns{
		elem: elem{
			tag:         "ins",
			selfClosing: false,
		},
	}

	return e
}

type htmlIns struct {
	elem
}

func (e *htmlIns) Body(elems ...UI) HTMLIns {
	e.setBody(elems...)
	return e
}

func (e *htmlIns) Text(v interface{}) HTMLIns {
	return e.Body(Text(v))
}

func (e *htmlIns) AccessKey(v string) HTMLIns {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlIns) Aria(k string, v interface{}) HTMLIns {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlIns) Class(v string) HTMLIns {
	e.setAttr("class", v)
	return e
}

func (e *htmlIns) ContentEditable(v bool) HTMLIns {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlIns) DataSet(k string, v interface{}) HTMLIns {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlIns) Dir(v string) HTMLIns {
	e.setAttr("dir", v)
	return e
}

func (e *htmlIns) Draggable(v bool) HTMLIns {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlIns) Hidden(v bool) HTMLIns {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlIns) ID(v string) HTMLIns {
	e.setAttr("id", v)
	return e
}

func (e *htmlIns) Lang(v string) HTMLIns {
	e.setAttr("lang", v)
	return e
}

func (e *htmlIns) Spellcheck(v bool) HTMLIns {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlIns) Style(k, v string) HTMLIns {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlIns) TabIndex(v int) HTMLIns {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlIns) Title(v string) HTMLIns {
	e.setAttr("title", v)
	return e
}

func (e *htmlIns) OnBlur(h EventHandler) HTMLIns {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlIns) OnChange(h EventHandler) HTMLIns {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlIns) OnClick(h EventHandler) HTMLIns {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlIns) OnContextMenu(h EventHandler) HTMLIns {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlIns) OnCopy(h EventHandler) HTMLIns {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlIns) OnCut(h EventHandler) HTMLIns {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlIns) OnDblClick(h EventHandler) HTMLIns {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlIns) OnDrag(h EventHandler) HTMLIns {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlIns) OnDragEnd(h EventHandler) HTMLIns {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlIns) OnDragEnter(h EventHandler) HTMLIns {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlIns) OnDragLeave(h EventHandler) HTMLIns {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlIns) OnDragOver(h EventHandler) HTMLIns {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlIns) OnDragStart(h EventHandler) HTMLIns {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlIns) OnDrop(h EventHandler) HTMLIns {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlIns) OnFocus(h EventHandler) HTMLIns {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlIns) OnInput(h EventHandler) HTMLIns {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlIns) OnInvalid(h EventHandler) HTMLIns {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlIns) OnKeyDown(h EventHandler) HTMLIns {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlIns) OnKeyPress(h EventHandler) HTMLIns {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlIns) OnKeyup(h EventHandler) HTMLIns {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlIns) OnMouseDown(h EventHandler) HTMLIns {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlIns) OnMouseMove(h EventHandler) HTMLIns {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlIns) OnMouseOut(h EventHandler) HTMLIns {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlIns) OnMouseOver(h EventHandler) HTMLIns {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlIns) OnMouseUp(h EventHandler) HTMLIns {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlIns) OnPaste(h EventHandler) HTMLIns {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlIns) OnReset(h EventHandler) HTMLIns {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlIns) OnScroll(h EventHandler) HTMLIns {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlIns) OnSearch(h EventHandler) HTMLIns {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlIns) OnSelect(h EventHandler) HTMLIns {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlIns) OnSubmit(h EventHandler) HTMLIns {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlIns) OnWheel(h EventHandler) HTMLIns {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLKbd is the interface that describes a <kbd> HTML element.
type HTMLKbd interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLKbd

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLKbd

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLKbd

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLKbd

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLKbd

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLKbd

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLKbd

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLKbd

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLKbd

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLKbd

	// ID specifies a unique id for an element.
	ID(v string) HTMLKbd

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLKbd

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLKbd

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLKbd

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLKbd

	// Title specifies extra information about an element.
	Title(v string) HTMLKbd

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLKbd

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLKbd

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLKbd

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLKbd

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLKbd

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLKbd

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLKbd

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLKbd

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLKbd

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLKbd

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLKbd

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLKbd

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLKbd

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLKbd

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLKbd

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLKbd

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLKbd

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLKbd

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLKbd

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLKbd

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLKbd

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLKbd

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLKbd

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLKbd

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLKbd

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLKbd

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLKbd

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLKbd

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLKbd

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLKbd

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLKbd

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLKbd
}

// Kbd returns an HTML element that defines keyboard input.
func Kbd() HTMLKbd {
	e := &htmlKbd{
		elem: elem{
			tag:         "kbd",
			selfClosing: false,
		},
	}

	return e
}

type htmlKbd struct {
	elem
}

func (e *htmlKbd) Body(elems ...UI) HTMLKbd {
	e.setBody(elems...)
	return e
}

func (e *htmlKbd) Text(v interface{}) HTMLKbd {
	return e.Body(Text(v))
}

func (e *htmlKbd) AccessKey(v string) HTMLKbd {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlKbd) Aria(k string, v interface{}) HTMLKbd {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlKbd) Class(v string) HTMLKbd {
	e.setAttr("class", v)
	return e
}

func (e *htmlKbd) ContentEditable(v bool) HTMLKbd {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlKbd) DataSet(k string, v interface{}) HTMLKbd {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlKbd) Dir(v string) HTMLKbd {
	e.setAttr("dir", v)
	return e
}

func (e *htmlKbd) Draggable(v bool) HTMLKbd {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlKbd) Hidden(v bool) HTMLKbd {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlKbd) ID(v string) HTMLKbd {
	e.setAttr("id", v)
	return e
}

func (e *htmlKbd) Lang(v string) HTMLKbd {
	e.setAttr("lang", v)
	return e
}

func (e *htmlKbd) Spellcheck(v bool) HTMLKbd {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlKbd) Style(k, v string) HTMLKbd {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlKbd) TabIndex(v int) HTMLKbd {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlKbd) Title(v string) HTMLKbd {
	e.setAttr("title", v)
	return e
}

func (e *htmlKbd) OnBlur(h EventHandler) HTMLKbd {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlKbd) OnChange(h EventHandler) HTMLKbd {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlKbd) OnClick(h EventHandler) HTMLKbd {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlKbd) OnContextMenu(h EventHandler) HTMLKbd {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlKbd) OnCopy(h EventHandler) HTMLKbd {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlKbd) OnCut(h EventHandler) HTMLKbd {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlKbd) OnDblClick(h EventHandler) HTMLKbd {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlKbd) OnDrag(h EventHandler) HTMLKbd {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlKbd) OnDragEnd(h EventHandler) HTMLKbd {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlKbd) OnDragEnter(h EventHandler) HTMLKbd {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlKbd) OnDragLeave(h EventHandler) HTMLKbd {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlKbd) OnDragOver(h EventHandler) HTMLKbd {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlKbd) OnDragStart(h EventHandler) HTMLKbd {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlKbd) OnDrop(h EventHandler) HTMLKbd {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlKbd) OnFocus(h EventHandler) HTMLKbd {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlKbd) OnInput(h EventHandler) HTMLKbd {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlKbd) OnInvalid(h EventHandler) HTMLKbd {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlKbd) OnKeyDown(h EventHandler) HTMLKbd {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlKbd) OnKeyPress(h EventHandler) HTMLKbd {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlKbd) OnKeyup(h EventHandler) HTMLKbd {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlKbd) OnMouseDown(h EventHandler) HTMLKbd {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlKbd) OnMouseMove(h EventHandler) HTMLKbd {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlKbd) OnMouseOut(h EventHandler) HTMLKbd {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlKbd) OnMouseOver(h EventHandler) HTMLKbd {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlKbd) OnMouseUp(h EventHandler) HTMLKbd {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlKbd) OnPaste(h EventHandler) HTMLKbd {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlKbd) OnReset(h EventHandler) HTMLKbd {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlKbd) OnScroll(h EventHandler) HTMLKbd {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlKbd) OnSearch(h EventHandler) HTMLKbd {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlKbd) OnSelect(h EventHandler) HTMLKbd {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlKbd) OnSubmit(h EventHandler) HTMLKbd {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlKbd) OnWheel(h EventHandler) HTMLKbd {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLLabel is the interface that describes a <label> HTML element.
type HTMLLabel interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLLabel

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLLabel

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLLabel

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLLabel

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLLabel

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLLabel

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLLabel

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLLabel

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLLabel

	// For specifies which form element(s) a label/calculation is bound to.
	For(v string) HTMLLabel

	// Form specifies the name of the form the element belongs to.
	Form(v string) HTMLLabel

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLLabel

	// ID specifies a unique id for an element.
	ID(v string) HTMLLabel

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLLabel

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLLabel

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLLabel

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLLabel

	// Title specifies extra information about an element.
	Title(v string) HTMLLabel

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLLabel

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLLabel

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLLabel

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLLabel

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLLabel

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLLabel

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLLabel

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLLabel

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLLabel

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLLabel

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLLabel

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLLabel

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLLabel

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLLabel

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLLabel

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLLabel

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLLabel

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLLabel

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLLabel

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLLabel

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLLabel

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLLabel

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLLabel

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLLabel

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLLabel

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLLabel

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLLabel

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLLabel

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLLabel

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLLabel

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLLabel

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLLabel
}

// Label returns an HTML element that defines a label for an input element.
func Label() HTMLLabel {
	e := &htmlLabel{
		elem: elem{
			tag:         "label",
			selfClosing: false,
		},
	}

	return e
}

type htmlLabel struct {
	elem
}

func (e *htmlLabel) Body(elems ...UI) HTMLLabel {
	e.setBody(elems...)
	return e
}

func (e *htmlLabel) Text(v interface{}) HTMLLabel {
	return e.Body(Text(v))
}

func (e *htmlLabel) AccessKey(v string) HTMLLabel {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlLabel) Aria(k string, v interface{}) HTMLLabel {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlLabel) Class(v string) HTMLLabel {
	e.setAttr("class", v)
	return e
}

func (e *htmlLabel) ContentEditable(v bool) HTMLLabel {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlLabel) DataSet(k string, v interface{}) HTMLLabel {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlLabel) Dir(v string) HTMLLabel {
	e.setAttr("dir", v)
	return e
}

func (e *htmlLabel) Draggable(v bool) HTMLLabel {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlLabel) For(v string) HTMLLabel {
	e.setAttr("for", v)
	return e
}

func (e *htmlLabel) Form(v string) HTMLLabel {
	e.setAttr("form", v)
	return e
}

func (e *htmlLabel) Hidden(v bool) HTMLLabel {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlLabel) ID(v string) HTMLLabel {
	e.setAttr("id", v)
	return e
}

func (e *htmlLabel) Lang(v string) HTMLLabel {
	e.setAttr("lang", v)
	return e
}

func (e *htmlLabel) Spellcheck(v bool) HTMLLabel {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlLabel) Style(k, v string) HTMLLabel {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlLabel) TabIndex(v int) HTMLLabel {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlLabel) Title(v string) HTMLLabel {
	e.setAttr("title", v)
	return e
}

func (e *htmlLabel) OnBlur(h EventHandler) HTMLLabel {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlLabel) OnChange(h EventHandler) HTMLLabel {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlLabel) OnClick(h EventHandler) HTMLLabel {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlLabel) OnContextMenu(h EventHandler) HTMLLabel {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlLabel) OnCopy(h EventHandler) HTMLLabel {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlLabel) OnCut(h EventHandler) HTMLLabel {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlLabel) OnDblClick(h EventHandler) HTMLLabel {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlLabel) OnDrag(h EventHandler) HTMLLabel {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlLabel) OnDragEnd(h EventHandler) HTMLLabel {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlLabel) OnDragEnter(h EventHandler) HTMLLabel {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlLabel) OnDragLeave(h EventHandler) HTMLLabel {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlLabel) OnDragOver(h EventHandler) HTMLLabel {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlLabel) OnDragStart(h EventHandler) HTMLLabel {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlLabel) OnDrop(h EventHandler) HTMLLabel {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlLabel) OnFocus(h EventHandler) HTMLLabel {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlLabel) OnInput(h EventHandler) HTMLLabel {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlLabel) OnInvalid(h EventHandler) HTMLLabel {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlLabel) OnKeyDown(h EventHandler) HTMLLabel {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlLabel) OnKeyPress(h EventHandler) HTMLLabel {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlLabel) OnKeyup(h EventHandler) HTMLLabel {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlLabel) OnMouseDown(h EventHandler) HTMLLabel {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlLabel) OnMouseMove(h EventHandler) HTMLLabel {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlLabel) OnMouseOut(h EventHandler) HTMLLabel {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlLabel) OnMouseOver(h EventHandler) HTMLLabel {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlLabel) OnMouseUp(h EventHandler) HTMLLabel {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlLabel) OnPaste(h EventHandler) HTMLLabel {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlLabel) OnReset(h EventHandler) HTMLLabel {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlLabel) OnScroll(h EventHandler) HTMLLabel {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlLabel) OnSearch(h EventHandler) HTMLLabel {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlLabel) OnSelect(h EventHandler) HTMLLabel {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlLabel) OnSubmit(h EventHandler) HTMLLabel {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlLabel) OnWheel(h EventHandler) HTMLLabel {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLLegends is the interface that describes a <legends> HTML element.
type HTMLLegends interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLLegends

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLLegends

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLLegends

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLLegends

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLLegends

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLLegends

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLLegends

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLLegends

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLLegends

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLLegends

	// ID specifies a unique id for an element.
	ID(v string) HTMLLegends

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLLegends

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLLegends

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLLegends

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLLegends

	// Title specifies extra information about an element.
	Title(v string) HTMLLegends

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLLegends

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLLegends

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLLegends

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLLegends

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLLegends

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLLegends

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLLegends

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLLegends

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLLegends

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLLegends

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLLegends

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLLegends

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLLegends

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLLegends

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLLegends

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLLegends

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLLegends

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLLegends

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLLegends

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLLegends

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLLegends

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLLegends

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLLegends

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLLegends

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLLegends

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLLegends

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLLegends

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLLegends

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLLegends

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLLegends

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLLegends

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLLegends
}

// Legends returns an HTML element that defines a caption for a fieldset element.
func Legends() HTMLLegends {
	e := &htmlLegends{
		elem: elem{
			tag:         "legends",
			selfClosing: false,
		},
	}

	return e
}

type htmlLegends struct {
	elem
}

func (e *htmlLegends) Body(elems ...UI) HTMLLegends {
	e.setBody(elems...)
	return e
}

func (e *htmlLegends) Text(v interface{}) HTMLLegends {
	return e.Body(Text(v))
}

func (e *htmlLegends) AccessKey(v string) HTMLLegends {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlLegends) Aria(k string, v interface{}) HTMLLegends {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlLegends) Class(v string) HTMLLegends {
	e.setAttr("class", v)
	return e
}

func (e *htmlLegends) ContentEditable(v bool) HTMLLegends {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlLegends) DataSet(k string, v interface{}) HTMLLegends {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlLegends) Dir(v string) HTMLLegends {
	e.setAttr("dir", v)
	return e
}

func (e *htmlLegends) Draggable(v bool) HTMLLegends {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlLegends) Hidden(v bool) HTMLLegends {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlLegends) ID(v string) HTMLLegends {
	e.setAttr("id", v)
	return e
}

func (e *htmlLegends) Lang(v string) HTMLLegends {
	e.setAttr("lang", v)
	return e
}

func (e *htmlLegends) Spellcheck(v bool) HTMLLegends {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlLegends) Style(k, v string) HTMLLegends {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlLegends) TabIndex(v int) HTMLLegends {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlLegends) Title(v string) HTMLLegends {
	e.setAttr("title", v)
	return e
}

func (e *htmlLegends) OnBlur(h EventHandler) HTMLLegends {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlLegends) OnChange(h EventHandler) HTMLLegends {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlLegends) OnClick(h EventHandler) HTMLLegends {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlLegends) OnContextMenu(h EventHandler) HTMLLegends {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlLegends) OnCopy(h EventHandler) HTMLLegends {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlLegends) OnCut(h EventHandler) HTMLLegends {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlLegends) OnDblClick(h EventHandler) HTMLLegends {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlLegends) OnDrag(h EventHandler) HTMLLegends {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlLegends) OnDragEnd(h EventHandler) HTMLLegends {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlLegends) OnDragEnter(h EventHandler) HTMLLegends {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlLegends) OnDragLeave(h EventHandler) HTMLLegends {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlLegends) OnDragOver(h EventHandler) HTMLLegends {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlLegends) OnDragStart(h EventHandler) HTMLLegends {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlLegends) OnDrop(h EventHandler) HTMLLegends {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlLegends) OnFocus(h EventHandler) HTMLLegends {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlLegends) OnInput(h EventHandler) HTMLLegends {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlLegends) OnInvalid(h EventHandler) HTMLLegends {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlLegends) OnKeyDown(h EventHandler) HTMLLegends {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlLegends) OnKeyPress(h EventHandler) HTMLLegends {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlLegends) OnKeyup(h EventHandler) HTMLLegends {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlLegends) OnMouseDown(h EventHandler) HTMLLegends {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlLegends) OnMouseMove(h EventHandler) HTMLLegends {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlLegends) OnMouseOut(h EventHandler) HTMLLegends {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlLegends) OnMouseOver(h EventHandler) HTMLLegends {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlLegends) OnMouseUp(h EventHandler) HTMLLegends {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlLegends) OnPaste(h EventHandler) HTMLLegends {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlLegends) OnReset(h EventHandler) HTMLLegends {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlLegends) OnScroll(h EventHandler) HTMLLegends {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlLegends) OnSearch(h EventHandler) HTMLLegends {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlLegends) OnSelect(h EventHandler) HTMLLegends {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlLegends) OnSubmit(h EventHandler) HTMLLegends {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlLegends) OnWheel(h EventHandler) HTMLLegends {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLLi is the interface that describes a <li> HTML element.
type HTMLLi interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLLi

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLLi

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLLi

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLLi

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLLi

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLLi

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLLi

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLLi

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLLi

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLLi

	// ID specifies a unique id for an element.
	ID(v string) HTMLLi

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLLi

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLLi

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLLi

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLLi

	// Title specifies extra information about an element.
	Title(v string) HTMLLi

	// Value specifies the value of the element.
	Value(v interface{}) HTMLLi

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLLi

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLLi

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLLi

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLLi

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLLi

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLLi

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLLi

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLLi

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLLi

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLLi

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLLi

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLLi

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLLi

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLLi

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLLi

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLLi

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLLi

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLLi

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLLi

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLLi

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLLi

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLLi

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLLi

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLLi

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLLi

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLLi

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLLi

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLLi

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLLi

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLLi

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLLi

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLLi
}

// Li returns an HTML element that defines a list item.
func Li() HTMLLi {
	e := &htmlLi{
		elem: elem{
			tag:         "li",
			selfClosing: false,
		},
	}

	return e
}

type htmlLi struct {
	elem
}

func (e *htmlLi) Body(elems ...UI) HTMLLi {
	e.setBody(elems...)
	return e
}

func (e *htmlLi) Text(v interface{}) HTMLLi {
	return e.Body(Text(v))
}

func (e *htmlLi) AccessKey(v string) HTMLLi {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlLi) Aria(k string, v interface{}) HTMLLi {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlLi) Class(v string) HTMLLi {
	e.setAttr("class", v)
	return e
}

func (e *htmlLi) ContentEditable(v bool) HTMLLi {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlLi) DataSet(k string, v interface{}) HTMLLi {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlLi) Dir(v string) HTMLLi {
	e.setAttr("dir", v)
	return e
}

func (e *htmlLi) Draggable(v bool) HTMLLi {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlLi) Hidden(v bool) HTMLLi {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlLi) ID(v string) HTMLLi {
	e.setAttr("id", v)
	return e
}

func (e *htmlLi) Lang(v string) HTMLLi {
	e.setAttr("lang", v)
	return e
}

func (e *htmlLi) Spellcheck(v bool) HTMLLi {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlLi) Style(k, v string) HTMLLi {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlLi) TabIndex(v int) HTMLLi {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlLi) Title(v string) HTMLLi {
	e.setAttr("title", v)
	return e
}

func (e *htmlLi) Value(v interface{}) HTMLLi {
	e.setAttr("value", v)
	return e
}

func (e *htmlLi) OnBlur(h EventHandler) HTMLLi {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlLi) OnChange(h EventHandler) HTMLLi {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlLi) OnClick(h EventHandler) HTMLLi {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlLi) OnContextMenu(h EventHandler) HTMLLi {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlLi) OnCopy(h EventHandler) HTMLLi {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlLi) OnCut(h EventHandler) HTMLLi {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlLi) OnDblClick(h EventHandler) HTMLLi {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlLi) OnDrag(h EventHandler) HTMLLi {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlLi) OnDragEnd(h EventHandler) HTMLLi {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlLi) OnDragEnter(h EventHandler) HTMLLi {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlLi) OnDragLeave(h EventHandler) HTMLLi {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlLi) OnDragOver(h EventHandler) HTMLLi {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlLi) OnDragStart(h EventHandler) HTMLLi {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlLi) OnDrop(h EventHandler) HTMLLi {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlLi) OnFocus(h EventHandler) HTMLLi {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlLi) OnInput(h EventHandler) HTMLLi {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlLi) OnInvalid(h EventHandler) HTMLLi {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlLi) OnKeyDown(h EventHandler) HTMLLi {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlLi) OnKeyPress(h EventHandler) HTMLLi {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlLi) OnKeyup(h EventHandler) HTMLLi {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlLi) OnMouseDown(h EventHandler) HTMLLi {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlLi) OnMouseMove(h EventHandler) HTMLLi {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlLi) OnMouseOut(h EventHandler) HTMLLi {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlLi) OnMouseOver(h EventHandler) HTMLLi {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlLi) OnMouseUp(h EventHandler) HTMLLi {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlLi) OnPaste(h EventHandler) HTMLLi {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlLi) OnReset(h EventHandler) HTMLLi {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlLi) OnScroll(h EventHandler) HTMLLi {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlLi) OnSearch(h EventHandler) HTMLLi {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlLi) OnSelect(h EventHandler) HTMLLi {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlLi) OnSubmit(h EventHandler) HTMLLi {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlLi) OnWheel(h EventHandler) HTMLLi {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLLink is the interface that describes a <link> HTML element.
type HTMLLink interface {
	UI

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLLink

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLLink

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLLink

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLLink

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLLink

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLLink

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLLink

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLLink

	// Href specifies the URL of the page the link goes to.
	Href(v string) HTMLLink

	// HrefLang specifies the language of the linked document.
	HrefLang(v string) HTMLLink

	// ID specifies a unique id for an element.
	ID(v string) HTMLLink

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLLink

	// Media specifies what media/device the linked document is optimized for.
	Media(v string) HTMLLink

	// Rel specifies the relationship between the current document and the linked document.
	Rel(v string) HTMLLink

	// Sizes specifies the size of the linked resource.
	Sizes(v string) HTMLLink

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLLink

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLLink

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLLink

	// Title specifies extra information about an element.
	Title(v string) HTMLLink

	// Type specifies the type of element.
	Type(v string) HTMLLink

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLLink

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLLink

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLLink

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLLink

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLLink

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLLink

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLLink

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLLink

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLLink

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLLink

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLLink

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLLink

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLLink

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLLink

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLLink

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLLink

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLLink

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLLink

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLLink

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLLink

	// OnLoad calls the given handler after the element is finished loading.
	OnLoad(h EventHandler) HTMLLink

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLLink

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLLink

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLLink

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLLink

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLLink

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLLink

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLLink

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLLink

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLLink

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLLink

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLLink

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLLink
}

// Link returns an HTML element that defines the relationship between a document and an external resource (most used to link to style sheets).
func Link() HTMLLink {
	e := &htmlLink{
		elem: elem{
			tag:         "link",
			selfClosing: true,
		},
	}

	return e
}

type htmlLink struct {
	elem
}

func (e *htmlLink) AccessKey(v string) HTMLLink {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlLink) Aria(k string, v interface{}) HTMLLink {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlLink) Class(v string) HTMLLink {
	e.setAttr("class", v)
	return e
}

func (e *htmlLink) ContentEditable(v bool) HTMLLink {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlLink) DataSet(k string, v interface{}) HTMLLink {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlLink) Dir(v string) HTMLLink {
	e.setAttr("dir", v)
	return e
}

func (e *htmlLink) Draggable(v bool) HTMLLink {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlLink) Hidden(v bool) HTMLLink {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlLink) Href(v string) HTMLLink {
	e.setAttr("href", StaticResource(v))
	return e
}

func (e *htmlLink) HrefLang(v string) HTMLLink {
	e.setAttr("hreflang", v)
	return e
}

func (e *htmlLink) ID(v string) HTMLLink {
	e.setAttr("id", v)
	return e
}

func (e *htmlLink) Lang(v string) HTMLLink {
	e.setAttr("lang", v)
	return e
}

func (e *htmlLink) Media(v string) HTMLLink {
	e.setAttr("media", v)
	return e
}

func (e *htmlLink) Rel(v string) HTMLLink {
	e.setAttr("rel", v)
	return e
}

func (e *htmlLink) Sizes(v string) HTMLLink {
	e.setAttr("sizes", v)
	return e
}

func (e *htmlLink) Spellcheck(v bool) HTMLLink {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlLink) Style(k, v string) HTMLLink {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlLink) TabIndex(v int) HTMLLink {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlLink) Title(v string) HTMLLink {
	e.setAttr("title", v)
	return e
}

func (e *htmlLink) Type(v string) HTMLLink {
	e.setAttr("type", v)
	return e
}

func (e *htmlLink) OnBlur(h EventHandler) HTMLLink {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlLink) OnChange(h EventHandler) HTMLLink {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlLink) OnClick(h EventHandler) HTMLLink {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlLink) OnContextMenu(h EventHandler) HTMLLink {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlLink) OnCopy(h EventHandler) HTMLLink {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlLink) OnCut(h EventHandler) HTMLLink {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlLink) OnDblClick(h EventHandler) HTMLLink {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlLink) OnDrag(h EventHandler) HTMLLink {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlLink) OnDragEnd(h EventHandler) HTMLLink {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlLink) OnDragEnter(h EventHandler) HTMLLink {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlLink) OnDragLeave(h EventHandler) HTMLLink {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlLink) OnDragOver(h EventHandler) HTMLLink {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlLink) OnDragStart(h EventHandler) HTMLLink {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlLink) OnDrop(h EventHandler) HTMLLink {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlLink) OnFocus(h EventHandler) HTMLLink {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlLink) OnInput(h EventHandler) HTMLLink {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlLink) OnInvalid(h EventHandler) HTMLLink {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlLink) OnKeyDown(h EventHandler) HTMLLink {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlLink) OnKeyPress(h EventHandler) HTMLLink {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlLink) OnKeyup(h EventHandler) HTMLLink {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlLink) OnLoad(h EventHandler) HTMLLink {
	e.setEventHandler("load", h)
	return e
}

func (e *htmlLink) OnMouseDown(h EventHandler) HTMLLink {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlLink) OnMouseMove(h EventHandler) HTMLLink {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlLink) OnMouseOut(h EventHandler) HTMLLink {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlLink) OnMouseOver(h EventHandler) HTMLLink {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlLink) OnMouseUp(h EventHandler) HTMLLink {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlLink) OnPaste(h EventHandler) HTMLLink {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlLink) OnReset(h EventHandler) HTMLLink {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlLink) OnScroll(h EventHandler) HTMLLink {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlLink) OnSearch(h EventHandler) HTMLLink {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlLink) OnSelect(h EventHandler) HTMLLink {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlLink) OnSubmit(h EventHandler) HTMLLink {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlLink) OnWheel(h EventHandler) HTMLLink {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLMain is the interface that describes a <main> HTML element.
type HTMLMain interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLMain

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLMain

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLMain

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLMain

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLMain

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLMain

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLMain

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLMain

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLMain

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLMain

	// ID specifies a unique id for an element.
	ID(v string) HTMLMain

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLMain

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLMain

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLMain

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLMain

	// Title specifies extra information about an element.
	Title(v string) HTMLMain

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLMain

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLMain

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLMain

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLMain

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLMain

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLMain

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLMain

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLMain

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLMain

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLMain

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLMain

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLMain

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLMain

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLMain

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLMain

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLMain

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLMain

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLMain

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLMain

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLMain

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLMain

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLMain

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLMain

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLMain

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLMain

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLMain

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLMain

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLMain

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLMain

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLMain

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLMain

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLMain
}

// Main returns an HTML element that specifies the main content of a document.
func Main() HTMLMain {
	e := &htmlMain{
		elem: elem{
			tag:         "main",
			selfClosing: false,
		},
	}

	return e
}

type htmlMain struct {
	elem
}

func (e *htmlMain) Body(elems ...UI) HTMLMain {
	e.setBody(elems...)
	return e
}

func (e *htmlMain) Text(v interface{}) HTMLMain {
	return e.Body(Text(v))
}

func (e *htmlMain) AccessKey(v string) HTMLMain {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlMain) Aria(k string, v interface{}) HTMLMain {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlMain) Class(v string) HTMLMain {
	e.setAttr("class", v)
	return e
}

func (e *htmlMain) ContentEditable(v bool) HTMLMain {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlMain) DataSet(k string, v interface{}) HTMLMain {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlMain) Dir(v string) HTMLMain {
	e.setAttr("dir", v)
	return e
}

func (e *htmlMain) Draggable(v bool) HTMLMain {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlMain) Hidden(v bool) HTMLMain {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlMain) ID(v string) HTMLMain {
	e.setAttr("id", v)
	return e
}

func (e *htmlMain) Lang(v string) HTMLMain {
	e.setAttr("lang", v)
	return e
}

func (e *htmlMain) Spellcheck(v bool) HTMLMain {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlMain) Style(k, v string) HTMLMain {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlMain) TabIndex(v int) HTMLMain {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlMain) Title(v string) HTMLMain {
	e.setAttr("title", v)
	return e
}

func (e *htmlMain) OnBlur(h EventHandler) HTMLMain {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlMain) OnChange(h EventHandler) HTMLMain {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlMain) OnClick(h EventHandler) HTMLMain {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlMain) OnContextMenu(h EventHandler) HTMLMain {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlMain) OnCopy(h EventHandler) HTMLMain {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlMain) OnCut(h EventHandler) HTMLMain {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlMain) OnDblClick(h EventHandler) HTMLMain {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlMain) OnDrag(h EventHandler) HTMLMain {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlMain) OnDragEnd(h EventHandler) HTMLMain {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlMain) OnDragEnter(h EventHandler) HTMLMain {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlMain) OnDragLeave(h EventHandler) HTMLMain {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlMain) OnDragOver(h EventHandler) HTMLMain {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlMain) OnDragStart(h EventHandler) HTMLMain {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlMain) OnDrop(h EventHandler) HTMLMain {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlMain) OnFocus(h EventHandler) HTMLMain {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlMain) OnInput(h EventHandler) HTMLMain {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlMain) OnInvalid(h EventHandler) HTMLMain {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlMain) OnKeyDown(h EventHandler) HTMLMain {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlMain) OnKeyPress(h EventHandler) HTMLMain {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlMain) OnKeyup(h EventHandler) HTMLMain {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlMain) OnMouseDown(h EventHandler) HTMLMain {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlMain) OnMouseMove(h EventHandler) HTMLMain {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlMain) OnMouseOut(h EventHandler) HTMLMain {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlMain) OnMouseOver(h EventHandler) HTMLMain {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlMain) OnMouseUp(h EventHandler) HTMLMain {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlMain) OnPaste(h EventHandler) HTMLMain {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlMain) OnReset(h EventHandler) HTMLMain {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlMain) OnScroll(h EventHandler) HTMLMain {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlMain) OnSearch(h EventHandler) HTMLMain {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlMain) OnSelect(h EventHandler) HTMLMain {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlMain) OnSubmit(h EventHandler) HTMLMain {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlMain) OnWheel(h EventHandler) HTMLMain {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLMap is the interface that describes a <map> HTML element.
type HTMLMap interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLMap

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLMap

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLMap

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLMap

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLMap

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLMap

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLMap

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLMap

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLMap

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLMap

	// ID specifies a unique id for an element.
	ID(v string) HTMLMap

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLMap

	// Name specifies the name of the element.
	Name(v string) HTMLMap

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLMap

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLMap

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLMap

	// Title specifies extra information about an element.
	Title(v string) HTMLMap

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLMap

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLMap

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLMap

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLMap

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLMap

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLMap

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLMap

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLMap

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLMap

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLMap

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLMap

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLMap

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLMap

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLMap

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLMap

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLMap

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLMap

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLMap

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLMap

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLMap

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLMap

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLMap

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLMap

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLMap

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLMap

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLMap

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLMap

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLMap

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLMap

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLMap

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLMap

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLMap
}

// Map returns an HTML element that defines a client-side image-map.
func Map() HTMLMap {
	e := &htmlMap{
		elem: elem{
			tag:         "map",
			selfClosing: false,
		},
	}

	return e
}

type htmlMap struct {
	elem
}

func (e *htmlMap) Body(elems ...UI) HTMLMap {
	e.setBody(elems...)
	return e
}

func (e *htmlMap) Text(v interface{}) HTMLMap {
	return e.Body(Text(v))
}

func (e *htmlMap) AccessKey(v string) HTMLMap {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlMap) Aria(k string, v interface{}) HTMLMap {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlMap) Class(v string) HTMLMap {
	e.setAttr("class", v)
	return e
}

func (e *htmlMap) ContentEditable(v bool) HTMLMap {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlMap) DataSet(k string, v interface{}) HTMLMap {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlMap) Dir(v string) HTMLMap {
	e.setAttr("dir", v)
	return e
}

func (e *htmlMap) Draggable(v bool) HTMLMap {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlMap) Hidden(v bool) HTMLMap {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlMap) ID(v string) HTMLMap {
	e.setAttr("id", v)
	return e
}

func (e *htmlMap) Lang(v string) HTMLMap {
	e.setAttr("lang", v)
	return e
}

func (e *htmlMap) Name(v string) HTMLMap {
	e.setAttr("name", v)
	return e
}

func (e *htmlMap) Spellcheck(v bool) HTMLMap {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlMap) Style(k, v string) HTMLMap {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlMap) TabIndex(v int) HTMLMap {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlMap) Title(v string) HTMLMap {
	e.setAttr("title", v)
	return e
}

func (e *htmlMap) OnBlur(h EventHandler) HTMLMap {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlMap) OnChange(h EventHandler) HTMLMap {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlMap) OnClick(h EventHandler) HTMLMap {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlMap) OnContextMenu(h EventHandler) HTMLMap {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlMap) OnCopy(h EventHandler) HTMLMap {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlMap) OnCut(h EventHandler) HTMLMap {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlMap) OnDblClick(h EventHandler) HTMLMap {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlMap) OnDrag(h EventHandler) HTMLMap {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlMap) OnDragEnd(h EventHandler) HTMLMap {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlMap) OnDragEnter(h EventHandler) HTMLMap {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlMap) OnDragLeave(h EventHandler) HTMLMap {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlMap) OnDragOver(h EventHandler) HTMLMap {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlMap) OnDragStart(h EventHandler) HTMLMap {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlMap) OnDrop(h EventHandler) HTMLMap {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlMap) OnFocus(h EventHandler) HTMLMap {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlMap) OnInput(h EventHandler) HTMLMap {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlMap) OnInvalid(h EventHandler) HTMLMap {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlMap) OnKeyDown(h EventHandler) HTMLMap {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlMap) OnKeyPress(h EventHandler) HTMLMap {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlMap) OnKeyup(h EventHandler) HTMLMap {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlMap) OnMouseDown(h EventHandler) HTMLMap {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlMap) OnMouseMove(h EventHandler) HTMLMap {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlMap) OnMouseOut(h EventHandler) HTMLMap {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlMap) OnMouseOver(h EventHandler) HTMLMap {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlMap) OnMouseUp(h EventHandler) HTMLMap {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlMap) OnPaste(h EventHandler) HTMLMap {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlMap) OnReset(h EventHandler) HTMLMap {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlMap) OnScroll(h EventHandler) HTMLMap {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlMap) OnSearch(h EventHandler) HTMLMap {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlMap) OnSelect(h EventHandler) HTMLMap {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlMap) OnSubmit(h EventHandler) HTMLMap {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlMap) OnWheel(h EventHandler) HTMLMap {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLMark is the interface that describes a <mark> HTML element.
type HTMLMark interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLMark

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLMark

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLMark

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLMark

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLMark

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLMark

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLMark

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLMark

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLMark

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLMark

	// ID specifies a unique id for an element.
	ID(v string) HTMLMark

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLMark

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLMark

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLMark

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLMark

	// Title specifies extra information about an element.
	Title(v string) HTMLMark

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLMark

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLMark

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLMark

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLMark

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLMark

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLMark

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLMark

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLMark

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLMark

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLMark

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLMark

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLMark

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLMark

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLMark

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLMark

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLMark

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLMark

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLMark

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLMark

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLMark

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLMark

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLMark

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLMark

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLMark

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLMark

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLMark

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLMark

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLMark

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLMark

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLMark

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLMark

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLMark
}

// Mark returns an HTML element that defines marked/highlighted text.
func Mark() HTMLMark {
	e := &htmlMark{
		elem: elem{
			tag:         "mark",
			selfClosing: false,
		},
	}

	return e
}

type htmlMark struct {
	elem
}

func (e *htmlMark) Body(elems ...UI) HTMLMark {
	e.setBody(elems...)
	return e
}

func (e *htmlMark) Text(v interface{}) HTMLMark {
	return e.Body(Text(v))
}

func (e *htmlMark) AccessKey(v string) HTMLMark {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlMark) Aria(k string, v interface{}) HTMLMark {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlMark) Class(v string) HTMLMark {
	e.setAttr("class", v)
	return e
}

func (e *htmlMark) ContentEditable(v bool) HTMLMark {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlMark) DataSet(k string, v interface{}) HTMLMark {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlMark) Dir(v string) HTMLMark {
	e.setAttr("dir", v)
	return e
}

func (e *htmlMark) Draggable(v bool) HTMLMark {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlMark) Hidden(v bool) HTMLMark {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlMark) ID(v string) HTMLMark {
	e.setAttr("id", v)
	return e
}

func (e *htmlMark) Lang(v string) HTMLMark {
	e.setAttr("lang", v)
	return e
}

func (e *htmlMark) Spellcheck(v bool) HTMLMark {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlMark) Style(k, v string) HTMLMark {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlMark) TabIndex(v int) HTMLMark {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlMark) Title(v string) HTMLMark {
	e.setAttr("title", v)
	return e
}

func (e *htmlMark) OnBlur(h EventHandler) HTMLMark {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlMark) OnChange(h EventHandler) HTMLMark {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlMark) OnClick(h EventHandler) HTMLMark {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlMark) OnContextMenu(h EventHandler) HTMLMark {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlMark) OnCopy(h EventHandler) HTMLMark {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlMark) OnCut(h EventHandler) HTMLMark {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlMark) OnDblClick(h EventHandler) HTMLMark {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlMark) OnDrag(h EventHandler) HTMLMark {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlMark) OnDragEnd(h EventHandler) HTMLMark {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlMark) OnDragEnter(h EventHandler) HTMLMark {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlMark) OnDragLeave(h EventHandler) HTMLMark {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlMark) OnDragOver(h EventHandler) HTMLMark {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlMark) OnDragStart(h EventHandler) HTMLMark {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlMark) OnDrop(h EventHandler) HTMLMark {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlMark) OnFocus(h EventHandler) HTMLMark {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlMark) OnInput(h EventHandler) HTMLMark {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlMark) OnInvalid(h EventHandler) HTMLMark {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlMark) OnKeyDown(h EventHandler) HTMLMark {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlMark) OnKeyPress(h EventHandler) HTMLMark {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlMark) OnKeyup(h EventHandler) HTMLMark {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlMark) OnMouseDown(h EventHandler) HTMLMark {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlMark) OnMouseMove(h EventHandler) HTMLMark {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlMark) OnMouseOut(h EventHandler) HTMLMark {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlMark) OnMouseOver(h EventHandler) HTMLMark {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlMark) OnMouseUp(h EventHandler) HTMLMark {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlMark) OnPaste(h EventHandler) HTMLMark {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlMark) OnReset(h EventHandler) HTMLMark {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlMark) OnScroll(h EventHandler) HTMLMark {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlMark) OnSearch(h EventHandler) HTMLMark {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlMark) OnSelect(h EventHandler) HTMLMark {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlMark) OnSubmit(h EventHandler) HTMLMark {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlMark) OnWheel(h EventHandler) HTMLMark {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLMeta is the interface that describes a <meta> HTML element.
type HTMLMeta interface {
	UI

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLMeta

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLMeta

	// Charset specifies the character encoding.
	Charset(v string) HTMLMeta

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLMeta

	// Content gives the value associated with the http-equiv or name attribute.
	Content(v string) HTMLMeta

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLMeta

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLMeta

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLMeta

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLMeta

	// HTTPEquiv provides an HTTP header for the information/value of the content attribute.
	HTTPEquiv(v string) HTMLMeta

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLMeta

	// ID specifies a unique id for an element.
	ID(v string) HTMLMeta

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLMeta

	// Name specifies the name of the element.
	Name(v string) HTMLMeta

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLMeta

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLMeta

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLMeta

	// Title specifies extra information about an element.
	Title(v string) HTMLMeta
}

// Meta returns an HTML element that .
func Meta() HTMLMeta {
	e := &htmlMeta{
		elem: elem{
			tag:         "meta",
			selfClosing: true,
		},
	}

	return e
}

type htmlMeta struct {
	elem
}

func (e *htmlMeta) AccessKey(v string) HTMLMeta {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlMeta) Aria(k string, v interface{}) HTMLMeta {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlMeta) Charset(v string) HTMLMeta {
	e.setAttr("charset", v)
	return e
}

func (e *htmlMeta) Class(v string) HTMLMeta {
	e.setAttr("class", v)
	return e
}

func (e *htmlMeta) Content(v string) HTMLMeta {
	e.setAttr("content", v)
	return e
}

func (e *htmlMeta) ContentEditable(v bool) HTMLMeta {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlMeta) DataSet(k string, v interface{}) HTMLMeta {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlMeta) Dir(v string) HTMLMeta {
	e.setAttr("dir", v)
	return e
}

func (e *htmlMeta) Draggable(v bool) HTMLMeta {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlMeta) HTTPEquiv(v string) HTMLMeta {
	e.setAttr("httpequiv", v)
	return e
}

func (e *htmlMeta) Hidden(v bool) HTMLMeta {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlMeta) ID(v string) HTMLMeta {
	e.setAttr("id", v)
	return e
}

func (e *htmlMeta) Lang(v string) HTMLMeta {
	e.setAttr("lang", v)
	return e
}

func (e *htmlMeta) Name(v string) HTMLMeta {
	e.setAttr("name", v)
	return e
}

func (e *htmlMeta) Spellcheck(v bool) HTMLMeta {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlMeta) Style(k, v string) HTMLMeta {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlMeta) TabIndex(v int) HTMLMeta {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlMeta) Title(v string) HTMLMeta {
	e.setAttr("title", v)
	return e
}

// HTMLMeter is the interface that describes a <meter> HTML element.
type HTMLMeter interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLMeter

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLMeter

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLMeter

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLMeter

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLMeter

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLMeter

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLMeter

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLMeter

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLMeter

	// Form specifies the name of the form the element belongs to.
	Form(v string) HTMLMeter

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLMeter

	// High specifies the range that is considered to be a high value.
	High(v float64) HTMLMeter

	// ID specifies a unique id for an element.
	ID(v string) HTMLMeter

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLMeter

	// Low specifies the range that is considered to be a low value.
	Low(v float64) HTMLMeter

	// Max Specifies the maximum value.
	Max(v interface{}) HTMLMeter

	// Min specifies a minimum value.
	Min(v interface{}) HTMLMeter

	// Optimum specifies what value is the optimal value for the gauge.
	Optimum(v float64) HTMLMeter

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLMeter

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLMeter

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLMeter

	// Title specifies extra information about an element.
	Title(v string) HTMLMeter

	// Value specifies the value of the element.
	Value(v interface{}) HTMLMeter

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLMeter

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLMeter

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLMeter

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLMeter

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLMeter

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLMeter

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLMeter

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLMeter

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLMeter

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLMeter

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLMeter

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLMeter

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLMeter

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLMeter

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLMeter

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLMeter

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLMeter

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLMeter

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLMeter

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLMeter

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLMeter

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLMeter

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLMeter

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLMeter

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLMeter

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLMeter

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLMeter

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLMeter

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLMeter

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLMeter

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLMeter

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLMeter
}

// Meter returns an HTML element that defines a scalar measurement within a known range (a gauge).
func Meter() HTMLMeter {
	e := &htmlMeter{
		elem: elem{
			tag:         "meter",
			selfClosing: false,
		},
	}

	return e
}

type htmlMeter struct {
	elem
}

func (e *htmlMeter) Body(elems ...UI) HTMLMeter {
	e.setBody(elems...)
	return e
}

func (e *htmlMeter) Text(v interface{}) HTMLMeter {
	return e.Body(Text(v))
}

func (e *htmlMeter) AccessKey(v string) HTMLMeter {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlMeter) Aria(k string, v interface{}) HTMLMeter {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlMeter) Class(v string) HTMLMeter {
	e.setAttr("class", v)
	return e
}

func (e *htmlMeter) ContentEditable(v bool) HTMLMeter {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlMeter) DataSet(k string, v interface{}) HTMLMeter {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlMeter) Dir(v string) HTMLMeter {
	e.setAttr("dir", v)
	return e
}

func (e *htmlMeter) Draggable(v bool) HTMLMeter {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlMeter) Form(v string) HTMLMeter {
	e.setAttr("form", v)
	return e
}

func (e *htmlMeter) Hidden(v bool) HTMLMeter {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlMeter) High(v float64) HTMLMeter {
	e.setAttr("high", v)
	return e
}

func (e *htmlMeter) ID(v string) HTMLMeter {
	e.setAttr("id", v)
	return e
}

func (e *htmlMeter) Lang(v string) HTMLMeter {
	e.setAttr("lang", v)
	return e
}

func (e *htmlMeter) Low(v float64) HTMLMeter {
	e.setAttr("low", v)
	return e
}

func (e *htmlMeter) Max(v interface{}) HTMLMeter {
	e.setAttr("max", v)
	return e
}

func (e *htmlMeter) Min(v interface{}) HTMLMeter {
	e.setAttr("min", v)
	return e
}

func (e *htmlMeter) Optimum(v float64) HTMLMeter {
	e.setAttr("optimum", v)
	return e
}

func (e *htmlMeter) Spellcheck(v bool) HTMLMeter {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlMeter) Style(k, v string) HTMLMeter {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlMeter) TabIndex(v int) HTMLMeter {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlMeter) Title(v string) HTMLMeter {
	e.setAttr("title", v)
	return e
}

func (e *htmlMeter) Value(v interface{}) HTMLMeter {
	e.setAttr("value", v)
	return e
}

func (e *htmlMeter) OnBlur(h EventHandler) HTMLMeter {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlMeter) OnChange(h EventHandler) HTMLMeter {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlMeter) OnClick(h EventHandler) HTMLMeter {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlMeter) OnContextMenu(h EventHandler) HTMLMeter {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlMeter) OnCopy(h EventHandler) HTMLMeter {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlMeter) OnCut(h EventHandler) HTMLMeter {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlMeter) OnDblClick(h EventHandler) HTMLMeter {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlMeter) OnDrag(h EventHandler) HTMLMeter {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlMeter) OnDragEnd(h EventHandler) HTMLMeter {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlMeter) OnDragEnter(h EventHandler) HTMLMeter {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlMeter) OnDragLeave(h EventHandler) HTMLMeter {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlMeter) OnDragOver(h EventHandler) HTMLMeter {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlMeter) OnDragStart(h EventHandler) HTMLMeter {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlMeter) OnDrop(h EventHandler) HTMLMeter {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlMeter) OnFocus(h EventHandler) HTMLMeter {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlMeter) OnInput(h EventHandler) HTMLMeter {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlMeter) OnInvalid(h EventHandler) HTMLMeter {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlMeter) OnKeyDown(h EventHandler) HTMLMeter {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlMeter) OnKeyPress(h EventHandler) HTMLMeter {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlMeter) OnKeyup(h EventHandler) HTMLMeter {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlMeter) OnMouseDown(h EventHandler) HTMLMeter {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlMeter) OnMouseMove(h EventHandler) HTMLMeter {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlMeter) OnMouseOut(h EventHandler) HTMLMeter {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlMeter) OnMouseOver(h EventHandler) HTMLMeter {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlMeter) OnMouseUp(h EventHandler) HTMLMeter {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlMeter) OnPaste(h EventHandler) HTMLMeter {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlMeter) OnReset(h EventHandler) HTMLMeter {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlMeter) OnScroll(h EventHandler) HTMLMeter {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlMeter) OnSearch(h EventHandler) HTMLMeter {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlMeter) OnSelect(h EventHandler) HTMLMeter {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlMeter) OnSubmit(h EventHandler) HTMLMeter {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlMeter) OnWheel(h EventHandler) HTMLMeter {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLNav is the interface that describes a <nav> HTML element.
type HTMLNav interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLNav

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLNav

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLNav

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLNav

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLNav

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLNav

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLNav

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLNav

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLNav

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLNav

	// ID specifies a unique id for an element.
	ID(v string) HTMLNav

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLNav

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLNav

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLNav

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLNav

	// Title specifies extra information about an element.
	Title(v string) HTMLNav

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLNav

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLNav

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLNav

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLNav

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLNav

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLNav

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLNav

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLNav

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLNav

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLNav

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLNav

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLNav

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLNav

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLNav

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLNav

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLNav

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLNav

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLNav

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLNav

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLNav

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLNav

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLNav

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLNav

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLNav

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLNav

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLNav

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLNav

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLNav

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLNav

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLNav

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLNav

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLNav
}

// Nav returns an HTML element that defines navigation links.
func Nav() HTMLNav {
	e := &htmlNav{
		elem: elem{
			tag:         "nav",
			selfClosing: false,
		},
	}

	return e
}

type htmlNav struct {
	elem
}

func (e *htmlNav) Body(elems ...UI) HTMLNav {
	e.setBody(elems...)
	return e
}

func (e *htmlNav) Text(v interface{}) HTMLNav {
	return e.Body(Text(v))
}

func (e *htmlNav) AccessKey(v string) HTMLNav {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlNav) Aria(k string, v interface{}) HTMLNav {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlNav) Class(v string) HTMLNav {
	e.setAttr("class", v)
	return e
}

func (e *htmlNav) ContentEditable(v bool) HTMLNav {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlNav) DataSet(k string, v interface{}) HTMLNav {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlNav) Dir(v string) HTMLNav {
	e.setAttr("dir", v)
	return e
}

func (e *htmlNav) Draggable(v bool) HTMLNav {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlNav) Hidden(v bool) HTMLNav {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlNav) ID(v string) HTMLNav {
	e.setAttr("id", v)
	return e
}

func (e *htmlNav) Lang(v string) HTMLNav {
	e.setAttr("lang", v)
	return e
}

func (e *htmlNav) Spellcheck(v bool) HTMLNav {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlNav) Style(k, v string) HTMLNav {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlNav) TabIndex(v int) HTMLNav {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlNav) Title(v string) HTMLNav {
	e.setAttr("title", v)
	return e
}

func (e *htmlNav) OnBlur(h EventHandler) HTMLNav {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlNav) OnChange(h EventHandler) HTMLNav {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlNav) OnClick(h EventHandler) HTMLNav {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlNav) OnContextMenu(h EventHandler) HTMLNav {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlNav) OnCopy(h EventHandler) HTMLNav {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlNav) OnCut(h EventHandler) HTMLNav {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlNav) OnDblClick(h EventHandler) HTMLNav {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlNav) OnDrag(h EventHandler) HTMLNav {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlNav) OnDragEnd(h EventHandler) HTMLNav {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlNav) OnDragEnter(h EventHandler) HTMLNav {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlNav) OnDragLeave(h EventHandler) HTMLNav {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlNav) OnDragOver(h EventHandler) HTMLNav {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlNav) OnDragStart(h EventHandler) HTMLNav {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlNav) OnDrop(h EventHandler) HTMLNav {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlNav) OnFocus(h EventHandler) HTMLNav {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlNav) OnInput(h EventHandler) HTMLNav {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlNav) OnInvalid(h EventHandler) HTMLNav {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlNav) OnKeyDown(h EventHandler) HTMLNav {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlNav) OnKeyPress(h EventHandler) HTMLNav {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlNav) OnKeyup(h EventHandler) HTMLNav {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlNav) OnMouseDown(h EventHandler) HTMLNav {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlNav) OnMouseMove(h EventHandler) HTMLNav {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlNav) OnMouseOut(h EventHandler) HTMLNav {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlNav) OnMouseOver(h EventHandler) HTMLNav {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlNav) OnMouseUp(h EventHandler) HTMLNav {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlNav) OnPaste(h EventHandler) HTMLNav {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlNav) OnReset(h EventHandler) HTMLNav {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlNav) OnScroll(h EventHandler) HTMLNav {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlNav) OnSearch(h EventHandler) HTMLNav {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlNav) OnSelect(h EventHandler) HTMLNav {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlNav) OnSubmit(h EventHandler) HTMLNav {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlNav) OnWheel(h EventHandler) HTMLNav {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLNoScript is the interface that describes a <noscript> HTML element.
type HTMLNoScript interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLNoScript

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLNoScript

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLNoScript

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLNoScript

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLNoScript

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLNoScript

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLNoScript

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLNoScript

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLNoScript

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLNoScript

	// ID specifies a unique id for an element.
	ID(v string) HTMLNoScript

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLNoScript

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLNoScript

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLNoScript

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLNoScript

	// Title specifies extra information about an element.
	Title(v string) HTMLNoScript
}

// NoScript returns an HTML element that defines an alternate content for users that do not support client-side scripts.
func NoScript() HTMLNoScript {
	e := &htmlNoScript{
		elem: elem{
			tag:         "noscript",
			selfClosing: false,
		},
	}

	return e
}

type htmlNoScript struct {
	elem
}

func (e *htmlNoScript) Body(elems ...UI) HTMLNoScript {
	e.setBody(elems...)
	return e
}

func (e *htmlNoScript) Text(v interface{}) HTMLNoScript {
	return e.Body(Text(v))
}

func (e *htmlNoScript) AccessKey(v string) HTMLNoScript {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlNoScript) Aria(k string, v interface{}) HTMLNoScript {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlNoScript) Class(v string) HTMLNoScript {
	e.setAttr("class", v)
	return e
}

func (e *htmlNoScript) ContentEditable(v bool) HTMLNoScript {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlNoScript) DataSet(k string, v interface{}) HTMLNoScript {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlNoScript) Dir(v string) HTMLNoScript {
	e.setAttr("dir", v)
	return e
}

func (e *htmlNoScript) Draggable(v bool) HTMLNoScript {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlNoScript) Hidden(v bool) HTMLNoScript {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlNoScript) ID(v string) HTMLNoScript {
	e.setAttr("id", v)
	return e
}

func (e *htmlNoScript) Lang(v string) HTMLNoScript {
	e.setAttr("lang", v)
	return e
}

func (e *htmlNoScript) Spellcheck(v bool) HTMLNoScript {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlNoScript) Style(k, v string) HTMLNoScript {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlNoScript) TabIndex(v int) HTMLNoScript {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlNoScript) Title(v string) HTMLNoScript {
	e.setAttr("title", v)
	return e
}

// HTMLObject is the interface that describes a <object> HTML element.
type HTMLObject interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLObject

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLObject

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLObject

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLObject

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLObject

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLObject

	// Data specifies the URL of the resource to be used by the object.
	Data(v string) HTMLObject

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLObject

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLObject

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLObject

	// Form specifies the name of the form the element belongs to.
	Form(v string) HTMLObject

	// Height specifies the height of the element (in pixels).
	Height(v int) HTMLObject

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLObject

	// ID specifies a unique id for an element.
	ID(v string) HTMLObject

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLObject

	// Name specifies the name of the element.
	Name(v string) HTMLObject

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLObject

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLObject

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLObject

	// Title specifies extra information about an element.
	Title(v string) HTMLObject

	// Type specifies the type of element.
	Type(v string) HTMLObject

	// UseMap specifies an image as a client-side image-map.
	UseMap(v string) HTMLObject

	// Width specifies the width of the element.
	Width(v int) HTMLObject

	// OnAbort calls the given handler on abort.
	OnAbort(h EventHandler) HTMLObject

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLObject

	// OnCanPlay calls the given handler when a file is ready to start playing (when it has buffered enough to begin).
	OnCanPlay(h EventHandler) HTMLObject

	// OnCanPlayThrough calls the given handler when a file can be played all the way to the end without pausing for buffering.
	OnCanPlayThrough(h EventHandler) HTMLObject

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLObject

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLObject

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLObject

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLObject

	// OnCueChange calls the given handler when the cue changes in a track element.
	OnCueChange(h EventHandler) HTMLObject

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLObject

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLObject

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLObject

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLObject

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLObject

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLObject

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLObject

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLObject

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLObject

	// OnDurationChange calls the given handler when the length of the media changes.
	OnDurationChange(h EventHandler) HTMLObject

	// OnEmptied calls the given handler when something bad happens and the file is suddenly unavailable (like unexpectedly disconnects).
	OnEmptied(h EventHandler) HTMLObject

	// OnEnded calls the given handler when the media has reach the end.
	OnEnded(h EventHandler) HTMLObject

	// OnError calls the given handler when an error occurs.
	OnError(h EventHandler) HTMLObject

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLObject

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLObject

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLObject

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLObject

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLObject

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLObject

	// OnLoadStart calls the given handler just as the file begins to load before anything is actually loaded.
	OnLoadStart(h EventHandler) HTMLObject

	// OnLoadedData calls the given handler when media data is loaded.
	OnLoadedData(h EventHandler) HTMLObject

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLObject

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLObject

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLObject

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLObject

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLObject

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLObject

	// OnPause calls the given handler when the media is paused either by the user or programmatically.
	OnPause(h EventHandler) HTMLObject

	// OnPlay calls the given handler when the media is ready to start playing.
	OnPlay(h EventHandler) HTMLObject

	// OnPlaying calls the given handler when the media actually has started playing.
	OnPlaying(h EventHandler) HTMLObject

	// OnProgress calls the given handler when the browser is in the process of getting the media data.
	OnProgress(h EventHandler) HTMLObject

	// OnRateChange calls the given handler each time the playback rate changes (like when a user switches to a slow motion or fast forward mode).
	OnRateChange(h EventHandler) HTMLObject

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLObject

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLObject

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLObject

	// OnSeeked calls the given handler when the seeking attribute is set to false indicating that seeking has ended.
	OnSeeked(h EventHandler) HTMLObject

	// OnSeeking calls the given handler when the seeking attribute is set to true indicating that seeking is active.
	OnSeeking(h EventHandler) HTMLObject

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLObject

	// OnStalled calls the given handler when the browser is unable to fetch the media data for whatever reason.
	OnStalled(h EventHandler) HTMLObject

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLObject

	// OnSuspend calls the given handler when fetching the media data is stopped before it is completely loaded for whatever reason.
	OnSuspend(h EventHandler) HTMLObject

	// OnTimeUpdate calls the given handler when the playing position has changed (like when the user fast forwards to a different point in the media).
	OnTimeUpdate(h EventHandler) HTMLObject

	// OnVolumeChange calls the given handler each time the volume is changed which (includes setting the volume to "mute").
	OnVolumeChange(h EventHandler) HTMLObject

	// OnWaiting calls the given handler when the media has paused but is expected to resume (like when the media pauses to buffer more data).
	OnWaiting(h EventHandler) HTMLObject

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLObject

	// OnloadedMetaData calls the given handler when meta data (like dimensions and duration) are loaded.
	OnloadedMetaData(h EventHandler) HTMLObject
}

// Object returns an HTML element that defines an embedded object.
func Object() HTMLObject {
	e := &htmlObject{
		elem: elem{
			tag:         "object",
			selfClosing: false,
		},
	}

	return e
}

type htmlObject struct {
	elem
}

func (e *htmlObject) Body(elems ...UI) HTMLObject {
	e.setBody(elems...)
	return e
}

func (e *htmlObject) Text(v interface{}) HTMLObject {
	return e.Body(Text(v))
}

func (e *htmlObject) AccessKey(v string) HTMLObject {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlObject) Aria(k string, v interface{}) HTMLObject {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlObject) Class(v string) HTMLObject {
	e.setAttr("class", v)
	return e
}

func (e *htmlObject) ContentEditable(v bool) HTMLObject {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlObject) Data(v string) HTMLObject {
	e.setAttr("data", StaticResource(v))
	return e
}

func (e *htmlObject) DataSet(k string, v interface{}) HTMLObject {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlObject) Dir(v string) HTMLObject {
	e.setAttr("dir", v)
	return e
}

func (e *htmlObject) Draggable(v bool) HTMLObject {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlObject) Form(v string) HTMLObject {
	e.setAttr("form", v)
	return e
}

func (e *htmlObject) Height(v int) HTMLObject {
	e.setAttr("height", v)
	return e
}

func (e *htmlObject) Hidden(v bool) HTMLObject {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlObject) ID(v string) HTMLObject {
	e.setAttr("id", v)
	return e
}

func (e *htmlObject) Lang(v string) HTMLObject {
	e.setAttr("lang", v)
	return e
}

func (e *htmlObject) Name(v string) HTMLObject {
	e.setAttr("name", v)
	return e
}

func (e *htmlObject) Spellcheck(v bool) HTMLObject {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlObject) Style(k, v string) HTMLObject {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlObject) TabIndex(v int) HTMLObject {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlObject) Title(v string) HTMLObject {
	e.setAttr("title", v)
	return e
}

func (e *htmlObject) Type(v string) HTMLObject {
	e.setAttr("type", v)
	return e
}

func (e *htmlObject) UseMap(v string) HTMLObject {
	e.setAttr("usemap", v)
	return e
}

func (e *htmlObject) Width(v int) HTMLObject {
	e.setAttr("width", v)
	return e
}

func (e *htmlObject) OnAbort(h EventHandler) HTMLObject {
	e.setEventHandler("abort", h)
	return e
}

func (e *htmlObject) OnBlur(h EventHandler) HTMLObject {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlObject) OnCanPlay(h EventHandler) HTMLObject {
	e.setEventHandler("canplay", h)
	return e
}

func (e *htmlObject) OnCanPlayThrough(h EventHandler) HTMLObject {
	e.setEventHandler("canplaythrough", h)
	return e
}

func (e *htmlObject) OnChange(h EventHandler) HTMLObject {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlObject) OnClick(h EventHandler) HTMLObject {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlObject) OnContextMenu(h EventHandler) HTMLObject {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlObject) OnCopy(h EventHandler) HTMLObject {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlObject) OnCueChange(h EventHandler) HTMLObject {
	e.setEventHandler("cuechange", h)
	return e
}

func (e *htmlObject) OnCut(h EventHandler) HTMLObject {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlObject) OnDblClick(h EventHandler) HTMLObject {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlObject) OnDrag(h EventHandler) HTMLObject {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlObject) OnDragEnd(h EventHandler) HTMLObject {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlObject) OnDragEnter(h EventHandler) HTMLObject {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlObject) OnDragLeave(h EventHandler) HTMLObject {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlObject) OnDragOver(h EventHandler) HTMLObject {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlObject) OnDragStart(h EventHandler) HTMLObject {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlObject) OnDrop(h EventHandler) HTMLObject {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlObject) OnDurationChange(h EventHandler) HTMLObject {
	e.setEventHandler("durationchange", h)
	return e
}

func (e *htmlObject) OnEmptied(h EventHandler) HTMLObject {
	e.setEventHandler("emptied", h)
	return e
}

func (e *htmlObject) OnEnded(h EventHandler) HTMLObject {
	e.setEventHandler("ended", h)
	return e
}

func (e *htmlObject) OnError(h EventHandler) HTMLObject {
	e.setEventHandler("error", h)
	return e
}

func (e *htmlObject) OnFocus(h EventHandler) HTMLObject {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlObject) OnInput(h EventHandler) HTMLObject {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlObject) OnInvalid(h EventHandler) HTMLObject {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlObject) OnKeyDown(h EventHandler) HTMLObject {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlObject) OnKeyPress(h EventHandler) HTMLObject {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlObject) OnKeyup(h EventHandler) HTMLObject {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlObject) OnLoadStart(h EventHandler) HTMLObject {
	e.setEventHandler("loadstart", h)
	return e
}

func (e *htmlObject) OnLoadedData(h EventHandler) HTMLObject {
	e.setEventHandler("loadeddata", h)
	return e
}

func (e *htmlObject) OnMouseDown(h EventHandler) HTMLObject {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlObject) OnMouseMove(h EventHandler) HTMLObject {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlObject) OnMouseOut(h EventHandler) HTMLObject {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlObject) OnMouseOver(h EventHandler) HTMLObject {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlObject) OnMouseUp(h EventHandler) HTMLObject {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlObject) OnPaste(h EventHandler) HTMLObject {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlObject) OnPause(h EventHandler) HTMLObject {
	e.setEventHandler("pause", h)
	return e
}

func (e *htmlObject) OnPlay(h EventHandler) HTMLObject {
	e.setEventHandler("play", h)
	return e
}

func (e *htmlObject) OnPlaying(h EventHandler) HTMLObject {
	e.setEventHandler("playing", h)
	return e
}

func (e *htmlObject) OnProgress(h EventHandler) HTMLObject {
	e.setEventHandler("progress", h)
	return e
}

func (e *htmlObject) OnRateChange(h EventHandler) HTMLObject {
	e.setEventHandler("ratechange", h)
	return e
}

func (e *htmlObject) OnReset(h EventHandler) HTMLObject {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlObject) OnScroll(h EventHandler) HTMLObject {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlObject) OnSearch(h EventHandler) HTMLObject {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlObject) OnSeeked(h EventHandler) HTMLObject {
	e.setEventHandler("seeked", h)
	return e
}

func (e *htmlObject) OnSeeking(h EventHandler) HTMLObject {
	e.setEventHandler("seeking", h)
	return e
}

func (e *htmlObject) OnSelect(h EventHandler) HTMLObject {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlObject) OnStalled(h EventHandler) HTMLObject {
	e.setEventHandler("stalled", h)
	return e
}

func (e *htmlObject) OnSubmit(h EventHandler) HTMLObject {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlObject) OnSuspend(h EventHandler) HTMLObject {
	e.setEventHandler("suspend", h)
	return e
}

func (e *htmlObject) OnTimeUpdate(h EventHandler) HTMLObject {
	e.setEventHandler("timeupdate", h)
	return e
}

func (e *htmlObject) OnVolumeChange(h EventHandler) HTMLObject {
	e.setEventHandler("volumechange", h)
	return e
}

func (e *htmlObject) OnWaiting(h EventHandler) HTMLObject {
	e.setEventHandler("waiting", h)
	return e
}

func (e *htmlObject) OnWheel(h EventHandler) HTMLObject {
	e.setEventHandler("wheel", h)
	return e
}

func (e *htmlObject) OnloadedMetaData(h EventHandler) HTMLObject {
	e.setEventHandler("loadedmetadata", h)
	return e
}

// HTMLOl is the interface that describes a <ol> HTML element.
type HTMLOl interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLOl

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLOl

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLOl

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLOl

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLOl

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLOl

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLOl

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLOl

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLOl

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLOl

	// ID specifies a unique id for an element.
	ID(v string) HTMLOl

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLOl

	// Reversed specifies that the list order should be descending (9,8,7...).
	Reversed(v bool) HTMLOl

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLOl

	// Start specifies the start value of the ordered list.
	Start(v int) HTMLOl

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLOl

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLOl

	// Title specifies extra information about an element.
	Title(v string) HTMLOl

	// Type specifies the type of element.
	Type(v string) HTMLOl

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLOl

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLOl

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLOl

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLOl

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLOl

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLOl

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLOl

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLOl

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLOl

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLOl

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLOl

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLOl

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLOl

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLOl

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLOl

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLOl

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLOl

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLOl

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLOl

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLOl

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLOl

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLOl

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLOl

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLOl

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLOl

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLOl

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLOl

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLOl

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLOl

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLOl

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLOl

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLOl
}

// Ol returns an HTML element that defines an ordered list.
func Ol() HTMLOl {
	e := &htmlOl{
		elem: elem{
			tag:         "ol",
			selfClosing: false,
		},
	}

	return e
}

type htmlOl struct {
	elem
}

func (e *htmlOl) Body(elems ...UI) HTMLOl {
	e.setBody(elems...)
	return e
}

func (e *htmlOl) Text(v interface{}) HTMLOl {
	return e.Body(Text(v))
}

func (e *htmlOl) AccessKey(v string) HTMLOl {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlOl) Aria(k string, v interface{}) HTMLOl {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlOl) Class(v string) HTMLOl {
	e.setAttr("class", v)
	return e
}

func (e *htmlOl) ContentEditable(v bool) HTMLOl {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlOl) DataSet(k string, v interface{}) HTMLOl {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlOl) Dir(v string) HTMLOl {
	e.setAttr("dir", v)
	return e
}

func (e *htmlOl) Draggable(v bool) HTMLOl {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlOl) Hidden(v bool) HTMLOl {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlOl) ID(v string) HTMLOl {
	e.setAttr("id", v)
	return e
}

func (e *htmlOl) Lang(v string) HTMLOl {
	e.setAttr("lang", v)
	return e
}

func (e *htmlOl) Reversed(v bool) HTMLOl {
	e.setAttr("reversed", v)
	return e
}

func (e *htmlOl) Spellcheck(v bool) HTMLOl {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlOl) Start(v int) HTMLOl {
	e.setAttr("start", v)
	return e
}

func (e *htmlOl) Style(k, v string) HTMLOl {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlOl) TabIndex(v int) HTMLOl {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlOl) Title(v string) HTMLOl {
	e.setAttr("title", v)
	return e
}

func (e *htmlOl) Type(v string) HTMLOl {
	e.setAttr("type", v)
	return e
}

func (e *htmlOl) OnBlur(h EventHandler) HTMLOl {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlOl) OnChange(h EventHandler) HTMLOl {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlOl) OnClick(h EventHandler) HTMLOl {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlOl) OnContextMenu(h EventHandler) HTMLOl {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlOl) OnCopy(h EventHandler) HTMLOl {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlOl) OnCut(h EventHandler) HTMLOl {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlOl) OnDblClick(h EventHandler) HTMLOl {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlOl) OnDrag(h EventHandler) HTMLOl {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlOl) OnDragEnd(h EventHandler) HTMLOl {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlOl) OnDragEnter(h EventHandler) HTMLOl {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlOl) OnDragLeave(h EventHandler) HTMLOl {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlOl) OnDragOver(h EventHandler) HTMLOl {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlOl) OnDragStart(h EventHandler) HTMLOl {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlOl) OnDrop(h EventHandler) HTMLOl {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlOl) OnFocus(h EventHandler) HTMLOl {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlOl) OnInput(h EventHandler) HTMLOl {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlOl) OnInvalid(h EventHandler) HTMLOl {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlOl) OnKeyDown(h EventHandler) HTMLOl {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlOl) OnKeyPress(h EventHandler) HTMLOl {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlOl) OnKeyup(h EventHandler) HTMLOl {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlOl) OnMouseDown(h EventHandler) HTMLOl {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlOl) OnMouseMove(h EventHandler) HTMLOl {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlOl) OnMouseOut(h EventHandler) HTMLOl {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlOl) OnMouseOver(h EventHandler) HTMLOl {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlOl) OnMouseUp(h EventHandler) HTMLOl {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlOl) OnPaste(h EventHandler) HTMLOl {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlOl) OnReset(h EventHandler) HTMLOl {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlOl) OnScroll(h EventHandler) HTMLOl {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlOl) OnSearch(h EventHandler) HTMLOl {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlOl) OnSelect(h EventHandler) HTMLOl {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlOl) OnSubmit(h EventHandler) HTMLOl {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlOl) OnWheel(h EventHandler) HTMLOl {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLOptGroup is the interface that describes a <optgroup> HTML element.
type HTMLOptGroup interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLOptGroup

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLOptGroup

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLOptGroup

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLOptGroup

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLOptGroup

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLOptGroup

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLOptGroup

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLOptGroup

	// Disabled specifies that the specified element/group of elements should be disabled.
	Disabled(v bool) HTMLOptGroup

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLOptGroup

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLOptGroup

	// ID specifies a unique id for an element.
	ID(v string) HTMLOptGroup

	// Label specifies a shorter label for the option.
	Label(v string) HTMLOptGroup

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLOptGroup

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLOptGroup

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLOptGroup

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLOptGroup

	// Title specifies extra information about an element.
	Title(v string) HTMLOptGroup

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLOptGroup

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLOptGroup

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLOptGroup

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLOptGroup

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLOptGroup

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLOptGroup

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLOptGroup

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLOptGroup

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLOptGroup

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLOptGroup

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLOptGroup

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLOptGroup

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLOptGroup

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLOptGroup

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLOptGroup

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLOptGroup

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLOptGroup

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLOptGroup

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLOptGroup

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLOptGroup

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLOptGroup

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLOptGroup

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLOptGroup

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLOptGroup

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLOptGroup

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLOptGroup

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLOptGroup

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLOptGroup

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLOptGroup

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLOptGroup

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLOptGroup

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLOptGroup
}

// OptGroup returns an HTML element that defines a group of related options in a drop-down list.
func OptGroup() HTMLOptGroup {
	e := &htmlOptGroup{
		elem: elem{
			tag:         "optgroup",
			selfClosing: false,
		},
	}

	return e
}

type htmlOptGroup struct {
	elem
}

func (e *htmlOptGroup) Body(elems ...UI) HTMLOptGroup {
	e.setBody(elems...)
	return e
}

func (e *htmlOptGroup) Text(v interface{}) HTMLOptGroup {
	return e.Body(Text(v))
}

func (e *htmlOptGroup) AccessKey(v string) HTMLOptGroup {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlOptGroup) Aria(k string, v interface{}) HTMLOptGroup {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlOptGroup) Class(v string) HTMLOptGroup {
	e.setAttr("class", v)
	return e
}

func (e *htmlOptGroup) ContentEditable(v bool) HTMLOptGroup {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlOptGroup) DataSet(k string, v interface{}) HTMLOptGroup {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlOptGroup) Dir(v string) HTMLOptGroup {
	e.setAttr("dir", v)
	return e
}

func (e *htmlOptGroup) Disabled(v bool) HTMLOptGroup {
	e.setAttr("disabled", v)
	return e
}

func (e *htmlOptGroup) Draggable(v bool) HTMLOptGroup {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlOptGroup) Hidden(v bool) HTMLOptGroup {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlOptGroup) ID(v string) HTMLOptGroup {
	e.setAttr("id", v)
	return e
}

func (e *htmlOptGroup) Label(v string) HTMLOptGroup {
	e.setAttr("label", v)
	return e
}

func (e *htmlOptGroup) Lang(v string) HTMLOptGroup {
	e.setAttr("lang", v)
	return e
}

func (e *htmlOptGroup) Spellcheck(v bool) HTMLOptGroup {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlOptGroup) Style(k, v string) HTMLOptGroup {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlOptGroup) TabIndex(v int) HTMLOptGroup {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlOptGroup) Title(v string) HTMLOptGroup {
	e.setAttr("title", v)
	return e
}

func (e *htmlOptGroup) OnBlur(h EventHandler) HTMLOptGroup {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlOptGroup) OnChange(h EventHandler) HTMLOptGroup {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlOptGroup) OnClick(h EventHandler) HTMLOptGroup {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlOptGroup) OnContextMenu(h EventHandler) HTMLOptGroup {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlOptGroup) OnCopy(h EventHandler) HTMLOptGroup {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlOptGroup) OnCut(h EventHandler) HTMLOptGroup {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlOptGroup) OnDblClick(h EventHandler) HTMLOptGroup {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlOptGroup) OnDrag(h EventHandler) HTMLOptGroup {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlOptGroup) OnDragEnd(h EventHandler) HTMLOptGroup {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlOptGroup) OnDragEnter(h EventHandler) HTMLOptGroup {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlOptGroup) OnDragLeave(h EventHandler) HTMLOptGroup {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlOptGroup) OnDragOver(h EventHandler) HTMLOptGroup {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlOptGroup) OnDragStart(h EventHandler) HTMLOptGroup {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlOptGroup) OnDrop(h EventHandler) HTMLOptGroup {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlOptGroup) OnFocus(h EventHandler) HTMLOptGroup {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlOptGroup) OnInput(h EventHandler) HTMLOptGroup {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlOptGroup) OnInvalid(h EventHandler) HTMLOptGroup {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlOptGroup) OnKeyDown(h EventHandler) HTMLOptGroup {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlOptGroup) OnKeyPress(h EventHandler) HTMLOptGroup {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlOptGroup) OnKeyup(h EventHandler) HTMLOptGroup {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlOptGroup) OnMouseDown(h EventHandler) HTMLOptGroup {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlOptGroup) OnMouseMove(h EventHandler) HTMLOptGroup {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlOptGroup) OnMouseOut(h EventHandler) HTMLOptGroup {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlOptGroup) OnMouseOver(h EventHandler) HTMLOptGroup {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlOptGroup) OnMouseUp(h EventHandler) HTMLOptGroup {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlOptGroup) OnPaste(h EventHandler) HTMLOptGroup {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlOptGroup) OnReset(h EventHandler) HTMLOptGroup {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlOptGroup) OnScroll(h EventHandler) HTMLOptGroup {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlOptGroup) OnSearch(h EventHandler) HTMLOptGroup {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlOptGroup) OnSelect(h EventHandler) HTMLOptGroup {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlOptGroup) OnSubmit(h EventHandler) HTMLOptGroup {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlOptGroup) OnWheel(h EventHandler) HTMLOptGroup {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLOption is the interface that describes a <option> HTML element.
type HTMLOption interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLOption

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLOption

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLOption

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLOption

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLOption

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLOption

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLOption

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLOption

	// Disabled specifies that the specified element/group of elements should be disabled.
	Disabled(v bool) HTMLOption

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLOption

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLOption

	// ID specifies a unique id for an element.
	ID(v string) HTMLOption

	// Label specifies a shorter label for the option.
	Label(v string) HTMLOption

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLOption

	// Selected specifies that an option should be pre-selected when the page loads.
	Selected(v bool) HTMLOption

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLOption

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLOption

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLOption

	// Title specifies extra information about an element.
	Title(v string) HTMLOption

	// Value specifies the value of the element.
	Value(v interface{}) HTMLOption

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLOption

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLOption

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLOption

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLOption

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLOption

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLOption

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLOption

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLOption

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLOption

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLOption

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLOption

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLOption

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLOption

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLOption

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLOption

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLOption

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLOption

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLOption

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLOption

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLOption

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLOption

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLOption

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLOption

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLOption

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLOption

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLOption

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLOption

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLOption

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLOption

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLOption

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLOption

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLOption
}

// Option returns an HTML element that defines an option in a drop-down list.
func Option() HTMLOption {
	e := &htmlOption{
		elem: elem{
			tag:         "option",
			selfClosing: false,
		},
	}

	return e
}

type htmlOption struct {
	elem
}

func (e *htmlOption) Body(elems ...UI) HTMLOption {
	e.setBody(elems...)
	return e
}

func (e *htmlOption) Text(v interface{}) HTMLOption {
	return e.Body(Text(v))
}

func (e *htmlOption) AccessKey(v string) HTMLOption {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlOption) Aria(k string, v interface{}) HTMLOption {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlOption) Class(v string) HTMLOption {
	e.setAttr("class", v)
	return e
}

func (e *htmlOption) ContentEditable(v bool) HTMLOption {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlOption) DataSet(k string, v interface{}) HTMLOption {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlOption) Dir(v string) HTMLOption {
	e.setAttr("dir", v)
	return e
}

func (e *htmlOption) Disabled(v bool) HTMLOption {
	e.setAttr("disabled", v)
	return e
}

func (e *htmlOption) Draggable(v bool) HTMLOption {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlOption) Hidden(v bool) HTMLOption {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlOption) ID(v string) HTMLOption {
	e.setAttr("id", v)
	return e
}

func (e *htmlOption) Label(v string) HTMLOption {
	e.setAttr("label", v)
	return e
}

func (e *htmlOption) Lang(v string) HTMLOption {
	e.setAttr("lang", v)
	return e
}

func (e *htmlOption) Selected(v bool) HTMLOption {
	e.setAttr("selected", v)
	return e
}

func (e *htmlOption) Spellcheck(v bool) HTMLOption {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlOption) Style(k, v string) HTMLOption {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlOption) TabIndex(v int) HTMLOption {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlOption) Title(v string) HTMLOption {
	e.setAttr("title", v)
	return e
}

func (e *htmlOption) Value(v interface{}) HTMLOption {
	e.setAttr("value", v)
	return e
}

func (e *htmlOption) OnBlur(h EventHandler) HTMLOption {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlOption) OnChange(h EventHandler) HTMLOption {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlOption) OnClick(h EventHandler) HTMLOption {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlOption) OnContextMenu(h EventHandler) HTMLOption {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlOption) OnCopy(h EventHandler) HTMLOption {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlOption) OnCut(h EventHandler) HTMLOption {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlOption) OnDblClick(h EventHandler) HTMLOption {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlOption) OnDrag(h EventHandler) HTMLOption {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlOption) OnDragEnd(h EventHandler) HTMLOption {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlOption) OnDragEnter(h EventHandler) HTMLOption {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlOption) OnDragLeave(h EventHandler) HTMLOption {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlOption) OnDragOver(h EventHandler) HTMLOption {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlOption) OnDragStart(h EventHandler) HTMLOption {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlOption) OnDrop(h EventHandler) HTMLOption {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlOption) OnFocus(h EventHandler) HTMLOption {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlOption) OnInput(h EventHandler) HTMLOption {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlOption) OnInvalid(h EventHandler) HTMLOption {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlOption) OnKeyDown(h EventHandler) HTMLOption {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlOption) OnKeyPress(h EventHandler) HTMLOption {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlOption) OnKeyup(h EventHandler) HTMLOption {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlOption) OnMouseDown(h EventHandler) HTMLOption {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlOption) OnMouseMove(h EventHandler) HTMLOption {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlOption) OnMouseOut(h EventHandler) HTMLOption {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlOption) OnMouseOver(h EventHandler) HTMLOption {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlOption) OnMouseUp(h EventHandler) HTMLOption {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlOption) OnPaste(h EventHandler) HTMLOption {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlOption) OnReset(h EventHandler) HTMLOption {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlOption) OnScroll(h EventHandler) HTMLOption {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlOption) OnSearch(h EventHandler) HTMLOption {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlOption) OnSelect(h EventHandler) HTMLOption {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlOption) OnSubmit(h EventHandler) HTMLOption {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlOption) OnWheel(h EventHandler) HTMLOption {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLOutput is the interface that describes a <output> HTML element.
type HTMLOutput interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLOutput

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLOutput

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLOutput

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLOutput

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLOutput

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLOutput

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLOutput

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLOutput

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLOutput

	// For specifies which form element(s) a label/calculation is bound to.
	For(v string) HTMLOutput

	// Form specifies the name of the form the element belongs to.
	Form(v string) HTMLOutput

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLOutput

	// ID specifies a unique id for an element.
	ID(v string) HTMLOutput

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLOutput

	// Name specifies the name of the element.
	Name(v string) HTMLOutput

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLOutput

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLOutput

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLOutput

	// Title specifies extra information about an element.
	Title(v string) HTMLOutput

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLOutput

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLOutput

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLOutput

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLOutput

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLOutput

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLOutput

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLOutput

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLOutput

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLOutput

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLOutput

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLOutput

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLOutput

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLOutput

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLOutput

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLOutput

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLOutput

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLOutput

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLOutput

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLOutput

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLOutput

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLOutput

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLOutput

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLOutput

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLOutput

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLOutput

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLOutput

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLOutput

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLOutput

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLOutput

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLOutput

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLOutput

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLOutput
}

// Output returns an HTML element that .
func Output() HTMLOutput {
	e := &htmlOutput{
		elem: elem{
			tag:         "output",
			selfClosing: false,
		},
	}

	return e
}

type htmlOutput struct {
	elem
}

func (e *htmlOutput) Body(elems ...UI) HTMLOutput {
	e.setBody(elems...)
	return e
}

func (e *htmlOutput) Text(v interface{}) HTMLOutput {
	return e.Body(Text(v))
}

func (e *htmlOutput) AccessKey(v string) HTMLOutput {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlOutput) Aria(k string, v interface{}) HTMLOutput {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlOutput) Class(v string) HTMLOutput {
	e.setAttr("class", v)
	return e
}

func (e *htmlOutput) ContentEditable(v bool) HTMLOutput {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlOutput) DataSet(k string, v interface{}) HTMLOutput {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlOutput) Dir(v string) HTMLOutput {
	e.setAttr("dir", v)
	return e
}

func (e *htmlOutput) Draggable(v bool) HTMLOutput {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlOutput) For(v string) HTMLOutput {
	e.setAttr("for", v)
	return e
}

func (e *htmlOutput) Form(v string) HTMLOutput {
	e.setAttr("form", v)
	return e
}

func (e *htmlOutput) Hidden(v bool) HTMLOutput {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlOutput) ID(v string) HTMLOutput {
	e.setAttr("id", v)
	return e
}

func (e *htmlOutput) Lang(v string) HTMLOutput {
	e.setAttr("lang", v)
	return e
}

func (e *htmlOutput) Name(v string) HTMLOutput {
	e.setAttr("name", v)
	return e
}

func (e *htmlOutput) Spellcheck(v bool) HTMLOutput {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlOutput) Style(k, v string) HTMLOutput {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlOutput) TabIndex(v int) HTMLOutput {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlOutput) Title(v string) HTMLOutput {
	e.setAttr("title", v)
	return e
}

func (e *htmlOutput) OnBlur(h EventHandler) HTMLOutput {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlOutput) OnChange(h EventHandler) HTMLOutput {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlOutput) OnClick(h EventHandler) HTMLOutput {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlOutput) OnContextMenu(h EventHandler) HTMLOutput {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlOutput) OnCopy(h EventHandler) HTMLOutput {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlOutput) OnCut(h EventHandler) HTMLOutput {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlOutput) OnDblClick(h EventHandler) HTMLOutput {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlOutput) OnDrag(h EventHandler) HTMLOutput {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlOutput) OnDragEnd(h EventHandler) HTMLOutput {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlOutput) OnDragEnter(h EventHandler) HTMLOutput {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlOutput) OnDragLeave(h EventHandler) HTMLOutput {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlOutput) OnDragOver(h EventHandler) HTMLOutput {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlOutput) OnDragStart(h EventHandler) HTMLOutput {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlOutput) OnDrop(h EventHandler) HTMLOutput {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlOutput) OnFocus(h EventHandler) HTMLOutput {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlOutput) OnInput(h EventHandler) HTMLOutput {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlOutput) OnInvalid(h EventHandler) HTMLOutput {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlOutput) OnKeyDown(h EventHandler) HTMLOutput {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlOutput) OnKeyPress(h EventHandler) HTMLOutput {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlOutput) OnKeyup(h EventHandler) HTMLOutput {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlOutput) OnMouseDown(h EventHandler) HTMLOutput {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlOutput) OnMouseMove(h EventHandler) HTMLOutput {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlOutput) OnMouseOut(h EventHandler) HTMLOutput {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlOutput) OnMouseOver(h EventHandler) HTMLOutput {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlOutput) OnMouseUp(h EventHandler) HTMLOutput {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlOutput) OnPaste(h EventHandler) HTMLOutput {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlOutput) OnReset(h EventHandler) HTMLOutput {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlOutput) OnScroll(h EventHandler) HTMLOutput {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlOutput) OnSearch(h EventHandler) HTMLOutput {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlOutput) OnSelect(h EventHandler) HTMLOutput {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlOutput) OnSubmit(h EventHandler) HTMLOutput {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlOutput) OnWheel(h EventHandler) HTMLOutput {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLP is the interface that describes a <p> HTML element.
type HTMLP interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLP

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLP

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLP

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLP

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLP

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLP

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLP

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLP

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLP

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLP

	// ID specifies a unique id for an element.
	ID(v string) HTMLP

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLP

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLP

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLP

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLP

	// Title specifies extra information about an element.
	Title(v string) HTMLP

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLP

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLP

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLP

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLP

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLP

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLP

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLP

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLP

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLP

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLP

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLP

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLP

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLP

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLP

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLP

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLP

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLP

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLP

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLP

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLP

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLP

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLP

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLP

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLP

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLP

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLP

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLP

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLP

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLP

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLP

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLP

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLP
}

// P returns an HTML element that defines a paragraph.
func P() HTMLP {
	e := &htmlP{
		elem: elem{
			tag:         "p",
			selfClosing: false,
		},
	}

	return e
}

type htmlP struct {
	elem
}

func (e *htmlP) Body(elems ...UI) HTMLP {
	e.setBody(elems...)
	return e
}

func (e *htmlP) Text(v interface{}) HTMLP {
	return e.Body(Text(v))
}

func (e *htmlP) AccessKey(v string) HTMLP {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlP) Aria(k string, v interface{}) HTMLP {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlP) Class(v string) HTMLP {
	e.setAttr("class", v)
	return e
}

func (e *htmlP) ContentEditable(v bool) HTMLP {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlP) DataSet(k string, v interface{}) HTMLP {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlP) Dir(v string) HTMLP {
	e.setAttr("dir", v)
	return e
}

func (e *htmlP) Draggable(v bool) HTMLP {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlP) Hidden(v bool) HTMLP {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlP) ID(v string) HTMLP {
	e.setAttr("id", v)
	return e
}

func (e *htmlP) Lang(v string) HTMLP {
	e.setAttr("lang", v)
	return e
}

func (e *htmlP) Spellcheck(v bool) HTMLP {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlP) Style(k, v string) HTMLP {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlP) TabIndex(v int) HTMLP {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlP) Title(v string) HTMLP {
	e.setAttr("title", v)
	return e
}

func (e *htmlP) OnBlur(h EventHandler) HTMLP {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlP) OnChange(h EventHandler) HTMLP {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlP) OnClick(h EventHandler) HTMLP {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlP) OnContextMenu(h EventHandler) HTMLP {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlP) OnCopy(h EventHandler) HTMLP {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlP) OnCut(h EventHandler) HTMLP {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlP) OnDblClick(h EventHandler) HTMLP {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlP) OnDrag(h EventHandler) HTMLP {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlP) OnDragEnd(h EventHandler) HTMLP {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlP) OnDragEnter(h EventHandler) HTMLP {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlP) OnDragLeave(h EventHandler) HTMLP {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlP) OnDragOver(h EventHandler) HTMLP {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlP) OnDragStart(h EventHandler) HTMLP {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlP) OnDrop(h EventHandler) HTMLP {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlP) OnFocus(h EventHandler) HTMLP {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlP) OnInput(h EventHandler) HTMLP {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlP) OnInvalid(h EventHandler) HTMLP {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlP) OnKeyDown(h EventHandler) HTMLP {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlP) OnKeyPress(h EventHandler) HTMLP {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlP) OnKeyup(h EventHandler) HTMLP {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlP) OnMouseDown(h EventHandler) HTMLP {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlP) OnMouseMove(h EventHandler) HTMLP {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlP) OnMouseOut(h EventHandler) HTMLP {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlP) OnMouseOver(h EventHandler) HTMLP {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlP) OnMouseUp(h EventHandler) HTMLP {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlP) OnPaste(h EventHandler) HTMLP {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlP) OnReset(h EventHandler) HTMLP {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlP) OnScroll(h EventHandler) HTMLP {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlP) OnSearch(h EventHandler) HTMLP {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlP) OnSelect(h EventHandler) HTMLP {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlP) OnSubmit(h EventHandler) HTMLP {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlP) OnWheel(h EventHandler) HTMLP {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLParam is the interface that describes a <param> HTML element.
type HTMLParam interface {
	UI

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLParam

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLParam

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLParam

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLParam

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLParam

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLParam

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLParam

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLParam

	// ID specifies a unique id for an element.
	ID(v string) HTMLParam

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLParam

	// Name specifies the name of the element.
	Name(v string) HTMLParam

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLParam

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLParam

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLParam

	// Title specifies extra information about an element.
	Title(v string) HTMLParam

	// Value specifies the value of the element.
	Value(v interface{}) HTMLParam

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLParam

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLParam

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLParam

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLParam

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLParam

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLParam

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLParam

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLParam

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLParam

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLParam

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLParam

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLParam

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLParam

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLParam

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLParam

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLParam

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLParam

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLParam

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLParam

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLParam

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLParam

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLParam

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLParam

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLParam

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLParam

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLParam

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLParam

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLParam

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLParam

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLParam

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLParam

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLParam
}

// Param returns an HTML element that defines a parameter for an object.
func Param() HTMLParam {
	e := &htmlParam{
		elem: elem{
			tag:         "param",
			selfClosing: true,
		},
	}

	return e
}

type htmlParam struct {
	elem
}

func (e *htmlParam) AccessKey(v string) HTMLParam {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlParam) Aria(k string, v interface{}) HTMLParam {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlParam) Class(v string) HTMLParam {
	e.setAttr("class", v)
	return e
}

func (e *htmlParam) ContentEditable(v bool) HTMLParam {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlParam) DataSet(k string, v interface{}) HTMLParam {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlParam) Dir(v string) HTMLParam {
	e.setAttr("dir", v)
	return e
}

func (e *htmlParam) Draggable(v bool) HTMLParam {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlParam) Hidden(v bool) HTMLParam {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlParam) ID(v string) HTMLParam {
	e.setAttr("id", v)
	return e
}

func (e *htmlParam) Lang(v string) HTMLParam {
	e.setAttr("lang", v)
	return e
}

func (e *htmlParam) Name(v string) HTMLParam {
	e.setAttr("name", v)
	return e
}

func (e *htmlParam) Spellcheck(v bool) HTMLParam {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlParam) Style(k, v string) HTMLParam {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlParam) TabIndex(v int) HTMLParam {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlParam) Title(v string) HTMLParam {
	e.setAttr("title", v)
	return e
}

func (e *htmlParam) Value(v interface{}) HTMLParam {
	e.setAttr("value", v)
	return e
}

func (e *htmlParam) OnBlur(h EventHandler) HTMLParam {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlParam) OnChange(h EventHandler) HTMLParam {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlParam) OnClick(h EventHandler) HTMLParam {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlParam) OnContextMenu(h EventHandler) HTMLParam {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlParam) OnCopy(h EventHandler) HTMLParam {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlParam) OnCut(h EventHandler) HTMLParam {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlParam) OnDblClick(h EventHandler) HTMLParam {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlParam) OnDrag(h EventHandler) HTMLParam {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlParam) OnDragEnd(h EventHandler) HTMLParam {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlParam) OnDragEnter(h EventHandler) HTMLParam {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlParam) OnDragLeave(h EventHandler) HTMLParam {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlParam) OnDragOver(h EventHandler) HTMLParam {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlParam) OnDragStart(h EventHandler) HTMLParam {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlParam) OnDrop(h EventHandler) HTMLParam {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlParam) OnFocus(h EventHandler) HTMLParam {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlParam) OnInput(h EventHandler) HTMLParam {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlParam) OnInvalid(h EventHandler) HTMLParam {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlParam) OnKeyDown(h EventHandler) HTMLParam {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlParam) OnKeyPress(h EventHandler) HTMLParam {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlParam) OnKeyup(h EventHandler) HTMLParam {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlParam) OnMouseDown(h EventHandler) HTMLParam {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlParam) OnMouseMove(h EventHandler) HTMLParam {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlParam) OnMouseOut(h EventHandler) HTMLParam {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlParam) OnMouseOver(h EventHandler) HTMLParam {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlParam) OnMouseUp(h EventHandler) HTMLParam {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlParam) OnPaste(h EventHandler) HTMLParam {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlParam) OnReset(h EventHandler) HTMLParam {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlParam) OnScroll(h EventHandler) HTMLParam {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlParam) OnSearch(h EventHandler) HTMLParam {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlParam) OnSelect(h EventHandler) HTMLParam {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlParam) OnSubmit(h EventHandler) HTMLParam {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlParam) OnWheel(h EventHandler) HTMLParam {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLPicture is the interface that describes a <picture> HTML element.
type HTMLPicture interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLPicture

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLPicture

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLPicture

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLPicture

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLPicture

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLPicture

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLPicture

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLPicture

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLPicture

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLPicture

	// ID specifies a unique id for an element.
	ID(v string) HTMLPicture

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLPicture

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLPicture

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLPicture

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLPicture

	// Title specifies extra information about an element.
	Title(v string) HTMLPicture

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLPicture

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLPicture

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLPicture

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLPicture

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLPicture

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLPicture

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLPicture

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLPicture

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLPicture

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLPicture

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLPicture

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLPicture

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLPicture

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLPicture

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLPicture

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLPicture

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLPicture

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLPicture

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLPicture

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLPicture

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLPicture

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLPicture

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLPicture

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLPicture

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLPicture

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLPicture

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLPicture

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLPicture

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLPicture

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLPicture

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLPicture

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLPicture
}

// Picture returns an HTML element that defines a container for multiple image resources.
func Picture() HTMLPicture {
	e := &htmlPicture{
		elem: elem{
			tag:         "picture",
			selfClosing: false,
		},
	}

	return e
}

type htmlPicture struct {
	elem
}

func (e *htmlPicture) Body(elems ...UI) HTMLPicture {
	e.setBody(elems...)
	return e
}

func (e *htmlPicture) Text(v interface{}) HTMLPicture {
	return e.Body(Text(v))
}

func (e *htmlPicture) AccessKey(v string) HTMLPicture {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlPicture) Aria(k string, v interface{}) HTMLPicture {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlPicture) Class(v string) HTMLPicture {
	e.setAttr("class", v)
	return e
}

func (e *htmlPicture) ContentEditable(v bool) HTMLPicture {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlPicture) DataSet(k string, v interface{}) HTMLPicture {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlPicture) Dir(v string) HTMLPicture {
	e.setAttr("dir", v)
	return e
}

func (e *htmlPicture) Draggable(v bool) HTMLPicture {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlPicture) Hidden(v bool) HTMLPicture {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlPicture) ID(v string) HTMLPicture {
	e.setAttr("id", v)
	return e
}

func (e *htmlPicture) Lang(v string) HTMLPicture {
	e.setAttr("lang", v)
	return e
}

func (e *htmlPicture) Spellcheck(v bool) HTMLPicture {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlPicture) Style(k, v string) HTMLPicture {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlPicture) TabIndex(v int) HTMLPicture {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlPicture) Title(v string) HTMLPicture {
	e.setAttr("title", v)
	return e
}

func (e *htmlPicture) OnBlur(h EventHandler) HTMLPicture {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlPicture) OnChange(h EventHandler) HTMLPicture {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlPicture) OnClick(h EventHandler) HTMLPicture {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlPicture) OnContextMenu(h EventHandler) HTMLPicture {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlPicture) OnCopy(h EventHandler) HTMLPicture {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlPicture) OnCut(h EventHandler) HTMLPicture {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlPicture) OnDblClick(h EventHandler) HTMLPicture {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlPicture) OnDrag(h EventHandler) HTMLPicture {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlPicture) OnDragEnd(h EventHandler) HTMLPicture {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlPicture) OnDragEnter(h EventHandler) HTMLPicture {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlPicture) OnDragLeave(h EventHandler) HTMLPicture {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlPicture) OnDragOver(h EventHandler) HTMLPicture {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlPicture) OnDragStart(h EventHandler) HTMLPicture {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlPicture) OnDrop(h EventHandler) HTMLPicture {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlPicture) OnFocus(h EventHandler) HTMLPicture {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlPicture) OnInput(h EventHandler) HTMLPicture {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlPicture) OnInvalid(h EventHandler) HTMLPicture {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlPicture) OnKeyDown(h EventHandler) HTMLPicture {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlPicture) OnKeyPress(h EventHandler) HTMLPicture {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlPicture) OnKeyup(h EventHandler) HTMLPicture {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlPicture) OnMouseDown(h EventHandler) HTMLPicture {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlPicture) OnMouseMove(h EventHandler) HTMLPicture {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlPicture) OnMouseOut(h EventHandler) HTMLPicture {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlPicture) OnMouseOver(h EventHandler) HTMLPicture {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlPicture) OnMouseUp(h EventHandler) HTMLPicture {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlPicture) OnPaste(h EventHandler) HTMLPicture {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlPicture) OnReset(h EventHandler) HTMLPicture {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlPicture) OnScroll(h EventHandler) HTMLPicture {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlPicture) OnSearch(h EventHandler) HTMLPicture {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlPicture) OnSelect(h EventHandler) HTMLPicture {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlPicture) OnSubmit(h EventHandler) HTMLPicture {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlPicture) OnWheel(h EventHandler) HTMLPicture {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLPre is the interface that describes a <pre> HTML element.
type HTMLPre interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLPre

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLPre

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLPre

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLPre

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLPre

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLPre

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLPre

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLPre

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLPre

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLPre

	// ID specifies a unique id for an element.
	ID(v string) HTMLPre

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLPre

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLPre

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLPre

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLPre

	// Title specifies extra information about an element.
	Title(v string) HTMLPre

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLPre

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLPre

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLPre

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLPre

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLPre

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLPre

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLPre

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLPre

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLPre

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLPre

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLPre

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLPre

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLPre

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLPre

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLPre

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLPre

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLPre

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLPre

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLPre

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLPre

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLPre

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLPre

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLPre

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLPre

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLPre

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLPre

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLPre

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLPre

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLPre

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLPre

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLPre

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLPre
}

// Pre returns an HTML element that defines preformatted text.
func Pre() HTMLPre {
	e := &htmlPre{
		elem: elem{
			tag:         "pre",
			selfClosing: false,
		},
	}

	return e
}

type htmlPre struct {
	elem
}

func (e *htmlPre) Body(elems ...UI) HTMLPre {
	e.setBody(elems...)
	return e
}

func (e *htmlPre) Text(v interface{}) HTMLPre {
	return e.Body(Text(v))
}

func (e *htmlPre) AccessKey(v string) HTMLPre {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlPre) Aria(k string, v interface{}) HTMLPre {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlPre) Class(v string) HTMLPre {
	e.setAttr("class", v)
	return e
}

func (e *htmlPre) ContentEditable(v bool) HTMLPre {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlPre) DataSet(k string, v interface{}) HTMLPre {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlPre) Dir(v string) HTMLPre {
	e.setAttr("dir", v)
	return e
}

func (e *htmlPre) Draggable(v bool) HTMLPre {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlPre) Hidden(v bool) HTMLPre {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlPre) ID(v string) HTMLPre {
	e.setAttr("id", v)
	return e
}

func (e *htmlPre) Lang(v string) HTMLPre {
	e.setAttr("lang", v)
	return e
}

func (e *htmlPre) Spellcheck(v bool) HTMLPre {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlPre) Style(k, v string) HTMLPre {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlPre) TabIndex(v int) HTMLPre {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlPre) Title(v string) HTMLPre {
	e.setAttr("title", v)
	return e
}

func (e *htmlPre) OnBlur(h EventHandler) HTMLPre {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlPre) OnChange(h EventHandler) HTMLPre {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlPre) OnClick(h EventHandler) HTMLPre {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlPre) OnContextMenu(h EventHandler) HTMLPre {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlPre) OnCopy(h EventHandler) HTMLPre {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlPre) OnCut(h EventHandler) HTMLPre {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlPre) OnDblClick(h EventHandler) HTMLPre {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlPre) OnDrag(h EventHandler) HTMLPre {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlPre) OnDragEnd(h EventHandler) HTMLPre {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlPre) OnDragEnter(h EventHandler) HTMLPre {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlPre) OnDragLeave(h EventHandler) HTMLPre {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlPre) OnDragOver(h EventHandler) HTMLPre {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlPre) OnDragStart(h EventHandler) HTMLPre {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlPre) OnDrop(h EventHandler) HTMLPre {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlPre) OnFocus(h EventHandler) HTMLPre {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlPre) OnInput(h EventHandler) HTMLPre {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlPre) OnInvalid(h EventHandler) HTMLPre {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlPre) OnKeyDown(h EventHandler) HTMLPre {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlPre) OnKeyPress(h EventHandler) HTMLPre {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlPre) OnKeyup(h EventHandler) HTMLPre {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlPre) OnMouseDown(h EventHandler) HTMLPre {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlPre) OnMouseMove(h EventHandler) HTMLPre {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlPre) OnMouseOut(h EventHandler) HTMLPre {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlPre) OnMouseOver(h EventHandler) HTMLPre {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlPre) OnMouseUp(h EventHandler) HTMLPre {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlPre) OnPaste(h EventHandler) HTMLPre {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlPre) OnReset(h EventHandler) HTMLPre {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlPre) OnScroll(h EventHandler) HTMLPre {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlPre) OnSearch(h EventHandler) HTMLPre {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlPre) OnSelect(h EventHandler) HTMLPre {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlPre) OnSubmit(h EventHandler) HTMLPre {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlPre) OnWheel(h EventHandler) HTMLPre {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLProgress is the interface that describes a <progress> HTML element.
type HTMLProgress interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLProgress

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLProgress

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLProgress

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLProgress

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLProgress

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLProgress

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLProgress

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLProgress

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLProgress

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLProgress

	// ID specifies a unique id for an element.
	ID(v string) HTMLProgress

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLProgress

	// Max Specifies the maximum value.
	Max(v interface{}) HTMLProgress

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLProgress

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLProgress

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLProgress

	// Title specifies extra information about an element.
	Title(v string) HTMLProgress

	// Value specifies the value of the element.
	Value(v interface{}) HTMLProgress

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLProgress

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLProgress

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLProgress

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLProgress

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLProgress

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLProgress

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLProgress

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLProgress

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLProgress

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLProgress

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLProgress

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLProgress

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLProgress

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLProgress

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLProgress

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLProgress

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLProgress

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLProgress

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLProgress

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLProgress

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLProgress

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLProgress

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLProgress

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLProgress

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLProgress

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLProgress

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLProgress

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLProgress

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLProgress

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLProgress

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLProgress

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLProgress
}

// Progress returns an HTML element that represents the progress of a task.
func Progress() HTMLProgress {
	e := &htmlProgress{
		elem: elem{
			tag:         "progress",
			selfClosing: false,
		},
	}

	return e
}

type htmlProgress struct {
	elem
}

func (e *htmlProgress) Body(elems ...UI) HTMLProgress {
	e.setBody(elems...)
	return e
}

func (e *htmlProgress) Text(v interface{}) HTMLProgress {
	return e.Body(Text(v))
}

func (e *htmlProgress) AccessKey(v string) HTMLProgress {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlProgress) Aria(k string, v interface{}) HTMLProgress {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlProgress) Class(v string) HTMLProgress {
	e.setAttr("class", v)
	return e
}

func (e *htmlProgress) ContentEditable(v bool) HTMLProgress {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlProgress) DataSet(k string, v interface{}) HTMLProgress {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlProgress) Dir(v string) HTMLProgress {
	e.setAttr("dir", v)
	return e
}

func (e *htmlProgress) Draggable(v bool) HTMLProgress {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlProgress) Hidden(v bool) HTMLProgress {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlProgress) ID(v string) HTMLProgress {
	e.setAttr("id", v)
	return e
}

func (e *htmlProgress) Lang(v string) HTMLProgress {
	e.setAttr("lang", v)
	return e
}

func (e *htmlProgress) Max(v interface{}) HTMLProgress {
	e.setAttr("max", v)
	return e
}

func (e *htmlProgress) Spellcheck(v bool) HTMLProgress {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlProgress) Style(k, v string) HTMLProgress {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlProgress) TabIndex(v int) HTMLProgress {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlProgress) Title(v string) HTMLProgress {
	e.setAttr("title", v)
	return e
}

func (e *htmlProgress) Value(v interface{}) HTMLProgress {
	e.setAttr("value", v)
	return e
}

func (e *htmlProgress) OnBlur(h EventHandler) HTMLProgress {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlProgress) OnChange(h EventHandler) HTMLProgress {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlProgress) OnClick(h EventHandler) HTMLProgress {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlProgress) OnContextMenu(h EventHandler) HTMLProgress {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlProgress) OnCopy(h EventHandler) HTMLProgress {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlProgress) OnCut(h EventHandler) HTMLProgress {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlProgress) OnDblClick(h EventHandler) HTMLProgress {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlProgress) OnDrag(h EventHandler) HTMLProgress {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlProgress) OnDragEnd(h EventHandler) HTMLProgress {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlProgress) OnDragEnter(h EventHandler) HTMLProgress {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlProgress) OnDragLeave(h EventHandler) HTMLProgress {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlProgress) OnDragOver(h EventHandler) HTMLProgress {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlProgress) OnDragStart(h EventHandler) HTMLProgress {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlProgress) OnDrop(h EventHandler) HTMLProgress {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlProgress) OnFocus(h EventHandler) HTMLProgress {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlProgress) OnInput(h EventHandler) HTMLProgress {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlProgress) OnInvalid(h EventHandler) HTMLProgress {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlProgress) OnKeyDown(h EventHandler) HTMLProgress {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlProgress) OnKeyPress(h EventHandler) HTMLProgress {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlProgress) OnKeyup(h EventHandler) HTMLProgress {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlProgress) OnMouseDown(h EventHandler) HTMLProgress {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlProgress) OnMouseMove(h EventHandler) HTMLProgress {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlProgress) OnMouseOut(h EventHandler) HTMLProgress {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlProgress) OnMouseOver(h EventHandler) HTMLProgress {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlProgress) OnMouseUp(h EventHandler) HTMLProgress {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlProgress) OnPaste(h EventHandler) HTMLProgress {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlProgress) OnReset(h EventHandler) HTMLProgress {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlProgress) OnScroll(h EventHandler) HTMLProgress {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlProgress) OnSearch(h EventHandler) HTMLProgress {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlProgress) OnSelect(h EventHandler) HTMLProgress {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlProgress) OnSubmit(h EventHandler) HTMLProgress {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlProgress) OnWheel(h EventHandler) HTMLProgress {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLQ is the interface that describes a <q> HTML element.
type HTMLQ interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLQ

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLQ

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLQ

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLQ

	// Cite specifies a URL which explains the quote/deleted/inserted text.
	Cite(v string) HTMLQ

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLQ

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLQ

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLQ

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLQ

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLQ

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLQ

	// ID specifies a unique id for an element.
	ID(v string) HTMLQ

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLQ

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLQ

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLQ

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLQ

	// Title specifies extra information about an element.
	Title(v string) HTMLQ

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLQ

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLQ

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLQ

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLQ

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLQ

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLQ

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLQ

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLQ

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLQ

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLQ

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLQ

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLQ

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLQ

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLQ

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLQ

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLQ

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLQ

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLQ

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLQ

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLQ

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLQ

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLQ

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLQ

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLQ

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLQ

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLQ

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLQ

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLQ

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLQ

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLQ

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLQ

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLQ
}

// Q returns an HTML element that defines a short quotation.
func Q() HTMLQ {
	e := &htmlQ{
		elem: elem{
			tag:         "q",
			selfClosing: false,
		},
	}

	return e
}

type htmlQ struct {
	elem
}

func (e *htmlQ) Body(elems ...UI) HTMLQ {
	e.setBody(elems...)
	return e
}

func (e *htmlQ) Text(v interface{}) HTMLQ {
	return e.Body(Text(v))
}

func (e *htmlQ) AccessKey(v string) HTMLQ {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlQ) Aria(k string, v interface{}) HTMLQ {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlQ) Cite(v string) HTMLQ {
	e.setAttr("cite", StaticResource(v))
	return e
}

func (e *htmlQ) Class(v string) HTMLQ {
	e.setAttr("class", v)
	return e
}

func (e *htmlQ) ContentEditable(v bool) HTMLQ {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlQ) DataSet(k string, v interface{}) HTMLQ {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlQ) Dir(v string) HTMLQ {
	e.setAttr("dir", v)
	return e
}

func (e *htmlQ) Draggable(v bool) HTMLQ {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlQ) Hidden(v bool) HTMLQ {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlQ) ID(v string) HTMLQ {
	e.setAttr("id", v)
	return e
}

func (e *htmlQ) Lang(v string) HTMLQ {
	e.setAttr("lang", v)
	return e
}

func (e *htmlQ) Spellcheck(v bool) HTMLQ {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlQ) Style(k, v string) HTMLQ {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlQ) TabIndex(v int) HTMLQ {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlQ) Title(v string) HTMLQ {
	e.setAttr("title", v)
	return e
}

func (e *htmlQ) OnBlur(h EventHandler) HTMLQ {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlQ) OnChange(h EventHandler) HTMLQ {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlQ) OnClick(h EventHandler) HTMLQ {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlQ) OnContextMenu(h EventHandler) HTMLQ {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlQ) OnCopy(h EventHandler) HTMLQ {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlQ) OnCut(h EventHandler) HTMLQ {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlQ) OnDblClick(h EventHandler) HTMLQ {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlQ) OnDrag(h EventHandler) HTMLQ {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlQ) OnDragEnd(h EventHandler) HTMLQ {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlQ) OnDragEnter(h EventHandler) HTMLQ {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlQ) OnDragLeave(h EventHandler) HTMLQ {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlQ) OnDragOver(h EventHandler) HTMLQ {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlQ) OnDragStart(h EventHandler) HTMLQ {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlQ) OnDrop(h EventHandler) HTMLQ {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlQ) OnFocus(h EventHandler) HTMLQ {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlQ) OnInput(h EventHandler) HTMLQ {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlQ) OnInvalid(h EventHandler) HTMLQ {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlQ) OnKeyDown(h EventHandler) HTMLQ {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlQ) OnKeyPress(h EventHandler) HTMLQ {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlQ) OnKeyup(h EventHandler) HTMLQ {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlQ) OnMouseDown(h EventHandler) HTMLQ {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlQ) OnMouseMove(h EventHandler) HTMLQ {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlQ) OnMouseOut(h EventHandler) HTMLQ {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlQ) OnMouseOver(h EventHandler) HTMLQ {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlQ) OnMouseUp(h EventHandler) HTMLQ {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlQ) OnPaste(h EventHandler) HTMLQ {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlQ) OnReset(h EventHandler) HTMLQ {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlQ) OnScroll(h EventHandler) HTMLQ {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlQ) OnSearch(h EventHandler) HTMLQ {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlQ) OnSelect(h EventHandler) HTMLQ {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlQ) OnSubmit(h EventHandler) HTMLQ {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlQ) OnWheel(h EventHandler) HTMLQ {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLRp is the interface that describes a <rp> HTML element.
type HTMLRp interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLRp

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLRp

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLRp

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLRp

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLRp

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLRp

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLRp

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLRp

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLRp

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLRp

	// ID specifies a unique id for an element.
	ID(v string) HTMLRp

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLRp

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLRp

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLRp

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLRp

	// Title specifies extra information about an element.
	Title(v string) HTMLRp

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLRp

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLRp

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLRp

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLRp

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLRp

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLRp

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLRp

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLRp

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLRp

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLRp

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLRp

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLRp

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLRp

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLRp

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLRp

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLRp

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLRp

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLRp

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLRp

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLRp

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLRp

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLRp

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLRp

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLRp

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLRp

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLRp

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLRp

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLRp

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLRp

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLRp

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLRp

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLRp
}

// Rp returns an HTML element that defines what to show in browsers that do not support ruby annotations.
func Rp() HTMLRp {
	e := &htmlRp{
		elem: elem{
			tag:         "rp",
			selfClosing: false,
		},
	}

	return e
}

type htmlRp struct {
	elem
}

func (e *htmlRp) Body(elems ...UI) HTMLRp {
	e.setBody(elems...)
	return e
}

func (e *htmlRp) Text(v interface{}) HTMLRp {
	return e.Body(Text(v))
}

func (e *htmlRp) AccessKey(v string) HTMLRp {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlRp) Aria(k string, v interface{}) HTMLRp {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlRp) Class(v string) HTMLRp {
	e.setAttr("class", v)
	return e
}

func (e *htmlRp) ContentEditable(v bool) HTMLRp {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlRp) DataSet(k string, v interface{}) HTMLRp {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlRp) Dir(v string) HTMLRp {
	e.setAttr("dir", v)
	return e
}

func (e *htmlRp) Draggable(v bool) HTMLRp {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlRp) Hidden(v bool) HTMLRp {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlRp) ID(v string) HTMLRp {
	e.setAttr("id", v)
	return e
}

func (e *htmlRp) Lang(v string) HTMLRp {
	e.setAttr("lang", v)
	return e
}

func (e *htmlRp) Spellcheck(v bool) HTMLRp {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlRp) Style(k, v string) HTMLRp {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlRp) TabIndex(v int) HTMLRp {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlRp) Title(v string) HTMLRp {
	e.setAttr("title", v)
	return e
}

func (e *htmlRp) OnBlur(h EventHandler) HTMLRp {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlRp) OnChange(h EventHandler) HTMLRp {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlRp) OnClick(h EventHandler) HTMLRp {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlRp) OnContextMenu(h EventHandler) HTMLRp {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlRp) OnCopy(h EventHandler) HTMLRp {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlRp) OnCut(h EventHandler) HTMLRp {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlRp) OnDblClick(h EventHandler) HTMLRp {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlRp) OnDrag(h EventHandler) HTMLRp {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlRp) OnDragEnd(h EventHandler) HTMLRp {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlRp) OnDragEnter(h EventHandler) HTMLRp {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlRp) OnDragLeave(h EventHandler) HTMLRp {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlRp) OnDragOver(h EventHandler) HTMLRp {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlRp) OnDragStart(h EventHandler) HTMLRp {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlRp) OnDrop(h EventHandler) HTMLRp {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlRp) OnFocus(h EventHandler) HTMLRp {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlRp) OnInput(h EventHandler) HTMLRp {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlRp) OnInvalid(h EventHandler) HTMLRp {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlRp) OnKeyDown(h EventHandler) HTMLRp {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlRp) OnKeyPress(h EventHandler) HTMLRp {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlRp) OnKeyup(h EventHandler) HTMLRp {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlRp) OnMouseDown(h EventHandler) HTMLRp {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlRp) OnMouseMove(h EventHandler) HTMLRp {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlRp) OnMouseOut(h EventHandler) HTMLRp {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlRp) OnMouseOver(h EventHandler) HTMLRp {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlRp) OnMouseUp(h EventHandler) HTMLRp {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlRp) OnPaste(h EventHandler) HTMLRp {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlRp) OnReset(h EventHandler) HTMLRp {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlRp) OnScroll(h EventHandler) HTMLRp {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlRp) OnSearch(h EventHandler) HTMLRp {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlRp) OnSelect(h EventHandler) HTMLRp {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlRp) OnSubmit(h EventHandler) HTMLRp {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlRp) OnWheel(h EventHandler) HTMLRp {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLRt is the interface that describes a <rt> HTML element.
type HTMLRt interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLRt

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLRt

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLRt

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLRt

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLRt

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLRt

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLRt

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLRt

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLRt

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLRt

	// ID specifies a unique id for an element.
	ID(v string) HTMLRt

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLRt

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLRt

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLRt

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLRt

	// Title specifies extra information about an element.
	Title(v string) HTMLRt

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLRt

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLRt

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLRt

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLRt

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLRt

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLRt

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLRt

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLRt

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLRt

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLRt

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLRt

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLRt

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLRt

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLRt

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLRt

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLRt

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLRt

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLRt

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLRt

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLRt

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLRt

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLRt

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLRt

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLRt

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLRt

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLRt

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLRt

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLRt

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLRt

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLRt

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLRt

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLRt
}

// Rt returns an HTML element that defines an explanation/pronunciation of characters (for East Asian typography).
func Rt() HTMLRt {
	e := &htmlRt{
		elem: elem{
			tag:         "rt",
			selfClosing: false,
		},
	}

	return e
}

type htmlRt struct {
	elem
}

func (e *htmlRt) Body(elems ...UI) HTMLRt {
	e.setBody(elems...)
	return e
}

func (e *htmlRt) Text(v interface{}) HTMLRt {
	return e.Body(Text(v))
}

func (e *htmlRt) AccessKey(v string) HTMLRt {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlRt) Aria(k string, v interface{}) HTMLRt {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlRt) Class(v string) HTMLRt {
	e.setAttr("class", v)
	return e
}

func (e *htmlRt) ContentEditable(v bool) HTMLRt {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlRt) DataSet(k string, v interface{}) HTMLRt {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlRt) Dir(v string) HTMLRt {
	e.setAttr("dir", v)
	return e
}

func (e *htmlRt) Draggable(v bool) HTMLRt {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlRt) Hidden(v bool) HTMLRt {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlRt) ID(v string) HTMLRt {
	e.setAttr("id", v)
	return e
}

func (e *htmlRt) Lang(v string) HTMLRt {
	e.setAttr("lang", v)
	return e
}

func (e *htmlRt) Spellcheck(v bool) HTMLRt {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlRt) Style(k, v string) HTMLRt {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlRt) TabIndex(v int) HTMLRt {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlRt) Title(v string) HTMLRt {
	e.setAttr("title", v)
	return e
}

func (e *htmlRt) OnBlur(h EventHandler) HTMLRt {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlRt) OnChange(h EventHandler) HTMLRt {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlRt) OnClick(h EventHandler) HTMLRt {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlRt) OnContextMenu(h EventHandler) HTMLRt {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlRt) OnCopy(h EventHandler) HTMLRt {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlRt) OnCut(h EventHandler) HTMLRt {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlRt) OnDblClick(h EventHandler) HTMLRt {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlRt) OnDrag(h EventHandler) HTMLRt {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlRt) OnDragEnd(h EventHandler) HTMLRt {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlRt) OnDragEnter(h EventHandler) HTMLRt {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlRt) OnDragLeave(h EventHandler) HTMLRt {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlRt) OnDragOver(h EventHandler) HTMLRt {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlRt) OnDragStart(h EventHandler) HTMLRt {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlRt) OnDrop(h EventHandler) HTMLRt {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlRt) OnFocus(h EventHandler) HTMLRt {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlRt) OnInput(h EventHandler) HTMLRt {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlRt) OnInvalid(h EventHandler) HTMLRt {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlRt) OnKeyDown(h EventHandler) HTMLRt {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlRt) OnKeyPress(h EventHandler) HTMLRt {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlRt) OnKeyup(h EventHandler) HTMLRt {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlRt) OnMouseDown(h EventHandler) HTMLRt {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlRt) OnMouseMove(h EventHandler) HTMLRt {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlRt) OnMouseOut(h EventHandler) HTMLRt {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlRt) OnMouseOver(h EventHandler) HTMLRt {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlRt) OnMouseUp(h EventHandler) HTMLRt {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlRt) OnPaste(h EventHandler) HTMLRt {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlRt) OnReset(h EventHandler) HTMLRt {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlRt) OnScroll(h EventHandler) HTMLRt {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlRt) OnSearch(h EventHandler) HTMLRt {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlRt) OnSelect(h EventHandler) HTMLRt {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlRt) OnSubmit(h EventHandler) HTMLRt {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlRt) OnWheel(h EventHandler) HTMLRt {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLRuby is the interface that describes a <ruby> HTML element.
type HTMLRuby interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLRuby

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLRuby

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLRuby

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLRuby

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLRuby

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLRuby

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLRuby

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLRuby

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLRuby

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLRuby

	// ID specifies a unique id for an element.
	ID(v string) HTMLRuby

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLRuby

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLRuby

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLRuby

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLRuby

	// Title specifies extra information about an element.
	Title(v string) HTMLRuby

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLRuby

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLRuby

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLRuby

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLRuby

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLRuby

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLRuby

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLRuby

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLRuby

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLRuby

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLRuby

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLRuby

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLRuby

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLRuby

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLRuby

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLRuby

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLRuby

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLRuby

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLRuby

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLRuby

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLRuby

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLRuby

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLRuby

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLRuby

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLRuby

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLRuby

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLRuby

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLRuby

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLRuby

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLRuby

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLRuby

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLRuby

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLRuby
}

// Ruby returns an HTML element that defines a ruby annotation (for East Asian typography).
func Ruby() HTMLRuby {
	e := &htmlRuby{
		elem: elem{
			tag:         "ruby",
			selfClosing: false,
		},
	}

	return e
}

type htmlRuby struct {
	elem
}

func (e *htmlRuby) Body(elems ...UI) HTMLRuby {
	e.setBody(elems...)
	return e
}

func (e *htmlRuby) Text(v interface{}) HTMLRuby {
	return e.Body(Text(v))
}

func (e *htmlRuby) AccessKey(v string) HTMLRuby {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlRuby) Aria(k string, v interface{}) HTMLRuby {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlRuby) Class(v string) HTMLRuby {
	e.setAttr("class", v)
	return e
}

func (e *htmlRuby) ContentEditable(v bool) HTMLRuby {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlRuby) DataSet(k string, v interface{}) HTMLRuby {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlRuby) Dir(v string) HTMLRuby {
	e.setAttr("dir", v)
	return e
}

func (e *htmlRuby) Draggable(v bool) HTMLRuby {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlRuby) Hidden(v bool) HTMLRuby {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlRuby) ID(v string) HTMLRuby {
	e.setAttr("id", v)
	return e
}

func (e *htmlRuby) Lang(v string) HTMLRuby {
	e.setAttr("lang", v)
	return e
}

func (e *htmlRuby) Spellcheck(v bool) HTMLRuby {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlRuby) Style(k, v string) HTMLRuby {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlRuby) TabIndex(v int) HTMLRuby {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlRuby) Title(v string) HTMLRuby {
	e.setAttr("title", v)
	return e
}

func (e *htmlRuby) OnBlur(h EventHandler) HTMLRuby {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlRuby) OnChange(h EventHandler) HTMLRuby {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlRuby) OnClick(h EventHandler) HTMLRuby {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlRuby) OnContextMenu(h EventHandler) HTMLRuby {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlRuby) OnCopy(h EventHandler) HTMLRuby {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlRuby) OnCut(h EventHandler) HTMLRuby {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlRuby) OnDblClick(h EventHandler) HTMLRuby {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlRuby) OnDrag(h EventHandler) HTMLRuby {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlRuby) OnDragEnd(h EventHandler) HTMLRuby {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlRuby) OnDragEnter(h EventHandler) HTMLRuby {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlRuby) OnDragLeave(h EventHandler) HTMLRuby {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlRuby) OnDragOver(h EventHandler) HTMLRuby {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlRuby) OnDragStart(h EventHandler) HTMLRuby {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlRuby) OnDrop(h EventHandler) HTMLRuby {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlRuby) OnFocus(h EventHandler) HTMLRuby {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlRuby) OnInput(h EventHandler) HTMLRuby {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlRuby) OnInvalid(h EventHandler) HTMLRuby {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlRuby) OnKeyDown(h EventHandler) HTMLRuby {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlRuby) OnKeyPress(h EventHandler) HTMLRuby {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlRuby) OnKeyup(h EventHandler) HTMLRuby {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlRuby) OnMouseDown(h EventHandler) HTMLRuby {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlRuby) OnMouseMove(h EventHandler) HTMLRuby {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlRuby) OnMouseOut(h EventHandler) HTMLRuby {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlRuby) OnMouseOver(h EventHandler) HTMLRuby {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlRuby) OnMouseUp(h EventHandler) HTMLRuby {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlRuby) OnPaste(h EventHandler) HTMLRuby {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlRuby) OnReset(h EventHandler) HTMLRuby {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlRuby) OnScroll(h EventHandler) HTMLRuby {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlRuby) OnSearch(h EventHandler) HTMLRuby {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlRuby) OnSelect(h EventHandler) HTMLRuby {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlRuby) OnSubmit(h EventHandler) HTMLRuby {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlRuby) OnWheel(h EventHandler) HTMLRuby {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLS is the interface that describes a <s> HTML element.
type HTMLS interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLS

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLS

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLS

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLS

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLS

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLS

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLS

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLS

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLS

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLS

	// ID specifies a unique id for an element.
	ID(v string) HTMLS

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLS

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLS

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLS

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLS

	// Title specifies extra information about an element.
	Title(v string) HTMLS

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLS

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLS

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLS

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLS

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLS

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLS

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLS

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLS

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLS

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLS

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLS

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLS

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLS

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLS

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLS

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLS

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLS

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLS

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLS

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLS

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLS

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLS

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLS

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLS

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLS

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLS

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLS

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLS

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLS

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLS

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLS

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLS
}

// S returns an HTML element that Defines text that is no longer correct.
func S() HTMLS {
	e := &htmlS{
		elem: elem{
			tag:         "s",
			selfClosing: false,
		},
	}

	return e
}

type htmlS struct {
	elem
}

func (e *htmlS) Body(elems ...UI) HTMLS {
	e.setBody(elems...)
	return e
}

func (e *htmlS) Text(v interface{}) HTMLS {
	return e.Body(Text(v))
}

func (e *htmlS) AccessKey(v string) HTMLS {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlS) Aria(k string, v interface{}) HTMLS {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlS) Class(v string) HTMLS {
	e.setAttr("class", v)
	return e
}

func (e *htmlS) ContentEditable(v bool) HTMLS {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlS) DataSet(k string, v interface{}) HTMLS {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlS) Dir(v string) HTMLS {
	e.setAttr("dir", v)
	return e
}

func (e *htmlS) Draggable(v bool) HTMLS {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlS) Hidden(v bool) HTMLS {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlS) ID(v string) HTMLS {
	e.setAttr("id", v)
	return e
}

func (e *htmlS) Lang(v string) HTMLS {
	e.setAttr("lang", v)
	return e
}

func (e *htmlS) Spellcheck(v bool) HTMLS {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlS) Style(k, v string) HTMLS {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlS) TabIndex(v int) HTMLS {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlS) Title(v string) HTMLS {
	e.setAttr("title", v)
	return e
}

func (e *htmlS) OnBlur(h EventHandler) HTMLS {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlS) OnChange(h EventHandler) HTMLS {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlS) OnClick(h EventHandler) HTMLS {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlS) OnContextMenu(h EventHandler) HTMLS {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlS) OnCopy(h EventHandler) HTMLS {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlS) OnCut(h EventHandler) HTMLS {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlS) OnDblClick(h EventHandler) HTMLS {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlS) OnDrag(h EventHandler) HTMLS {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlS) OnDragEnd(h EventHandler) HTMLS {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlS) OnDragEnter(h EventHandler) HTMLS {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlS) OnDragLeave(h EventHandler) HTMLS {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlS) OnDragOver(h EventHandler) HTMLS {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlS) OnDragStart(h EventHandler) HTMLS {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlS) OnDrop(h EventHandler) HTMLS {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlS) OnFocus(h EventHandler) HTMLS {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlS) OnInput(h EventHandler) HTMLS {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlS) OnInvalid(h EventHandler) HTMLS {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlS) OnKeyDown(h EventHandler) HTMLS {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlS) OnKeyPress(h EventHandler) HTMLS {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlS) OnKeyup(h EventHandler) HTMLS {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlS) OnMouseDown(h EventHandler) HTMLS {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlS) OnMouseMove(h EventHandler) HTMLS {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlS) OnMouseOut(h EventHandler) HTMLS {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlS) OnMouseOver(h EventHandler) HTMLS {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlS) OnMouseUp(h EventHandler) HTMLS {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlS) OnPaste(h EventHandler) HTMLS {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlS) OnReset(h EventHandler) HTMLS {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlS) OnScroll(h EventHandler) HTMLS {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlS) OnSearch(h EventHandler) HTMLS {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlS) OnSelect(h EventHandler) HTMLS {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlS) OnSubmit(h EventHandler) HTMLS {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlS) OnWheel(h EventHandler) HTMLS {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLSamp is the interface that describes a <samp> HTML element.
type HTMLSamp interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLSamp

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLSamp

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLSamp

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLSamp

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLSamp

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLSamp

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLSamp

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLSamp

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLSamp

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLSamp

	// ID specifies a unique id for an element.
	ID(v string) HTMLSamp

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLSamp

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLSamp

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLSamp

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLSamp

	// Title specifies extra information about an element.
	Title(v string) HTMLSamp

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLSamp

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLSamp

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLSamp

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLSamp

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLSamp

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLSamp

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLSamp

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLSamp

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLSamp

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLSamp

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLSamp

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLSamp

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLSamp

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLSamp

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLSamp

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLSamp

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLSamp

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLSamp

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLSamp

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLSamp

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLSamp

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLSamp

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLSamp

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLSamp

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLSamp

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLSamp

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLSamp

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLSamp

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLSamp

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLSamp

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLSamp

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLSamp
}

// Samp returns an HTML element that defines sample output from a computer program.
func Samp() HTMLSamp {
	e := &htmlSamp{
		elem: elem{
			tag:         "samp",
			selfClosing: false,
		},
	}

	return e
}

type htmlSamp struct {
	elem
}

func (e *htmlSamp) Body(elems ...UI) HTMLSamp {
	e.setBody(elems...)
	return e
}

func (e *htmlSamp) Text(v interface{}) HTMLSamp {
	return e.Body(Text(v))
}

func (e *htmlSamp) AccessKey(v string) HTMLSamp {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlSamp) Aria(k string, v interface{}) HTMLSamp {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlSamp) Class(v string) HTMLSamp {
	e.setAttr("class", v)
	return e
}

func (e *htmlSamp) ContentEditable(v bool) HTMLSamp {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlSamp) DataSet(k string, v interface{}) HTMLSamp {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlSamp) Dir(v string) HTMLSamp {
	e.setAttr("dir", v)
	return e
}

func (e *htmlSamp) Draggable(v bool) HTMLSamp {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlSamp) Hidden(v bool) HTMLSamp {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlSamp) ID(v string) HTMLSamp {
	e.setAttr("id", v)
	return e
}

func (e *htmlSamp) Lang(v string) HTMLSamp {
	e.setAttr("lang", v)
	return e
}

func (e *htmlSamp) Spellcheck(v bool) HTMLSamp {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlSamp) Style(k, v string) HTMLSamp {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlSamp) TabIndex(v int) HTMLSamp {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlSamp) Title(v string) HTMLSamp {
	e.setAttr("title", v)
	return e
}

func (e *htmlSamp) OnBlur(h EventHandler) HTMLSamp {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlSamp) OnChange(h EventHandler) HTMLSamp {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlSamp) OnClick(h EventHandler) HTMLSamp {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlSamp) OnContextMenu(h EventHandler) HTMLSamp {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlSamp) OnCopy(h EventHandler) HTMLSamp {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlSamp) OnCut(h EventHandler) HTMLSamp {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlSamp) OnDblClick(h EventHandler) HTMLSamp {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlSamp) OnDrag(h EventHandler) HTMLSamp {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlSamp) OnDragEnd(h EventHandler) HTMLSamp {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlSamp) OnDragEnter(h EventHandler) HTMLSamp {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlSamp) OnDragLeave(h EventHandler) HTMLSamp {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlSamp) OnDragOver(h EventHandler) HTMLSamp {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlSamp) OnDragStart(h EventHandler) HTMLSamp {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlSamp) OnDrop(h EventHandler) HTMLSamp {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlSamp) OnFocus(h EventHandler) HTMLSamp {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlSamp) OnInput(h EventHandler) HTMLSamp {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlSamp) OnInvalid(h EventHandler) HTMLSamp {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlSamp) OnKeyDown(h EventHandler) HTMLSamp {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlSamp) OnKeyPress(h EventHandler) HTMLSamp {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlSamp) OnKeyup(h EventHandler) HTMLSamp {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlSamp) OnMouseDown(h EventHandler) HTMLSamp {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlSamp) OnMouseMove(h EventHandler) HTMLSamp {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlSamp) OnMouseOut(h EventHandler) HTMLSamp {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlSamp) OnMouseOver(h EventHandler) HTMLSamp {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlSamp) OnMouseUp(h EventHandler) HTMLSamp {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlSamp) OnPaste(h EventHandler) HTMLSamp {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlSamp) OnReset(h EventHandler) HTMLSamp {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlSamp) OnScroll(h EventHandler) HTMLSamp {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlSamp) OnSearch(h EventHandler) HTMLSamp {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlSamp) OnSelect(h EventHandler) HTMLSamp {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlSamp) OnSubmit(h EventHandler) HTMLSamp {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlSamp) OnWheel(h EventHandler) HTMLSamp {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLScript is the interface that describes a <script> HTML element.
type HTMLScript interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLScript

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLScript

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLScript

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLScript

	// Async specifies that the script is executed asynchronously (only for external scripts).
	Async(v bool) HTMLScript

	// Charset specifies the character encoding.
	Charset(v string) HTMLScript

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLScript

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLScript

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLScript

	// Defer specifies that the script is executed when the page has finished parsing (only for external scripts).
	Defer(v bool) HTMLScript

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLScript

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLScript

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLScript

	// ID specifies a unique id for an element.
	ID(v string) HTMLScript

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLScript

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLScript

	// Src specifies the URL of the media file.
	Src(v string) HTMLScript

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLScript

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLScript

	// Title specifies extra information about an element.
	Title(v string) HTMLScript

	// Type specifies the type of element.
	Type(v string) HTMLScript

	// OnLoad calls the given handler after the element is finished loading.
	OnLoad(h EventHandler) HTMLScript
}

// Script returns an HTML element that defines a client-side script.
func Script() HTMLScript {
	e := &htmlScript{
		elem: elem{
			tag:         "script",
			selfClosing: false,
		},
	}

	return e
}

type htmlScript struct {
	elem
}

func (e *htmlScript) Body(elems ...UI) HTMLScript {
	e.setBody(elems...)
	return e
}

func (e *htmlScript) Text(v interface{}) HTMLScript {
	return e.Body(Text(v))
}

func (e *htmlScript) AccessKey(v string) HTMLScript {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlScript) Aria(k string, v interface{}) HTMLScript {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlScript) Async(v bool) HTMLScript {
	e.setAttr("async", v)
	return e
}

func (e *htmlScript) Charset(v string) HTMLScript {
	e.setAttr("charset", v)
	return e
}

func (e *htmlScript) Class(v string) HTMLScript {
	e.setAttr("class", v)
	return e
}

func (e *htmlScript) ContentEditable(v bool) HTMLScript {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlScript) DataSet(k string, v interface{}) HTMLScript {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlScript) Defer(v bool) HTMLScript {
	e.setAttr("defer", v)
	return e
}

func (e *htmlScript) Dir(v string) HTMLScript {
	e.setAttr("dir", v)
	return e
}

func (e *htmlScript) Draggable(v bool) HTMLScript {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlScript) Hidden(v bool) HTMLScript {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlScript) ID(v string) HTMLScript {
	e.setAttr("id", v)
	return e
}

func (e *htmlScript) Lang(v string) HTMLScript {
	e.setAttr("lang", v)
	return e
}

func (e *htmlScript) Spellcheck(v bool) HTMLScript {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlScript) Src(v string) HTMLScript {
	e.setAttr("src", StaticResource(v))
	return e
}

func (e *htmlScript) Style(k, v string) HTMLScript {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlScript) TabIndex(v int) HTMLScript {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlScript) Title(v string) HTMLScript {
	e.setAttr("title", v)
	return e
}

func (e *htmlScript) Type(v string) HTMLScript {
	e.setAttr("type", v)
	return e
}

func (e *htmlScript) OnLoad(h EventHandler) HTMLScript {
	e.setEventHandler("load", h)
	return e
}

// HTMLSection is the interface that describes a <section> HTML element.
type HTMLSection interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLSection

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLSection

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLSection

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLSection

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLSection

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLSection

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLSection

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLSection

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLSection

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLSection

	// ID specifies a unique id for an element.
	ID(v string) HTMLSection

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLSection

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLSection

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLSection

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLSection

	// Title specifies extra information about an element.
	Title(v string) HTMLSection

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLSection

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLSection

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLSection

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLSection

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLSection

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLSection

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLSection

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLSection

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLSection

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLSection

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLSection

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLSection

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLSection

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLSection

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLSection

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLSection

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLSection

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLSection

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLSection

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLSection

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLSection

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLSection

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLSection

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLSection

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLSection

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLSection

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLSection

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLSection

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLSection

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLSection

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLSection

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLSection
}

// Section returns an HTML element that defines a section in a document.
func Section() HTMLSection {
	e := &htmlSection{
		elem: elem{
			tag:         "section",
			selfClosing: false,
		},
	}

	return e
}

type htmlSection struct {
	elem
}

func (e *htmlSection) Body(elems ...UI) HTMLSection {
	e.setBody(elems...)
	return e
}

func (e *htmlSection) Text(v interface{}) HTMLSection {
	return e.Body(Text(v))
}

func (e *htmlSection) AccessKey(v string) HTMLSection {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlSection) Aria(k string, v interface{}) HTMLSection {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlSection) Class(v string) HTMLSection {
	e.setAttr("class", v)
	return e
}

func (e *htmlSection) ContentEditable(v bool) HTMLSection {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlSection) DataSet(k string, v interface{}) HTMLSection {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlSection) Dir(v string) HTMLSection {
	e.setAttr("dir", v)
	return e
}

func (e *htmlSection) Draggable(v bool) HTMLSection {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlSection) Hidden(v bool) HTMLSection {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlSection) ID(v string) HTMLSection {
	e.setAttr("id", v)
	return e
}

func (e *htmlSection) Lang(v string) HTMLSection {
	e.setAttr("lang", v)
	return e
}

func (e *htmlSection) Spellcheck(v bool) HTMLSection {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlSection) Style(k, v string) HTMLSection {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlSection) TabIndex(v int) HTMLSection {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlSection) Title(v string) HTMLSection {
	e.setAttr("title", v)
	return e
}

func (e *htmlSection) OnBlur(h EventHandler) HTMLSection {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlSection) OnChange(h EventHandler) HTMLSection {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlSection) OnClick(h EventHandler) HTMLSection {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlSection) OnContextMenu(h EventHandler) HTMLSection {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlSection) OnCopy(h EventHandler) HTMLSection {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlSection) OnCut(h EventHandler) HTMLSection {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlSection) OnDblClick(h EventHandler) HTMLSection {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlSection) OnDrag(h EventHandler) HTMLSection {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlSection) OnDragEnd(h EventHandler) HTMLSection {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlSection) OnDragEnter(h EventHandler) HTMLSection {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlSection) OnDragLeave(h EventHandler) HTMLSection {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlSection) OnDragOver(h EventHandler) HTMLSection {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlSection) OnDragStart(h EventHandler) HTMLSection {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlSection) OnDrop(h EventHandler) HTMLSection {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlSection) OnFocus(h EventHandler) HTMLSection {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlSection) OnInput(h EventHandler) HTMLSection {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlSection) OnInvalid(h EventHandler) HTMLSection {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlSection) OnKeyDown(h EventHandler) HTMLSection {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlSection) OnKeyPress(h EventHandler) HTMLSection {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlSection) OnKeyup(h EventHandler) HTMLSection {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlSection) OnMouseDown(h EventHandler) HTMLSection {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlSection) OnMouseMove(h EventHandler) HTMLSection {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlSection) OnMouseOut(h EventHandler) HTMLSection {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlSection) OnMouseOver(h EventHandler) HTMLSection {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlSection) OnMouseUp(h EventHandler) HTMLSection {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlSection) OnPaste(h EventHandler) HTMLSection {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlSection) OnReset(h EventHandler) HTMLSection {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlSection) OnScroll(h EventHandler) HTMLSection {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlSection) OnSearch(h EventHandler) HTMLSection {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlSection) OnSelect(h EventHandler) HTMLSection {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlSection) OnSubmit(h EventHandler) HTMLSection {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlSection) OnWheel(h EventHandler) HTMLSection {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLSelect is the interface that describes a <select> HTML element.
type HTMLSelect interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLSelect

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLSelect

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLSelect

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLSelect

	// AutoFocus specifies that the element should automatically get focus when the page loads.
	AutoFocus(v bool) HTMLSelect

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLSelect

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLSelect

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLSelect

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLSelect

	// Disabled specifies that the specified element/group of elements should be disabled.
	Disabled(v bool) HTMLSelect

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLSelect

	// Form specifies the name of the form the element belongs to.
	Form(v string) HTMLSelect

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLSelect

	// ID specifies a unique id for an element.
	ID(v string) HTMLSelect

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLSelect

	// Multiple specifies that a user can enter more than one value.
	Multiple(v bool) HTMLSelect

	// Name specifies the name of the element.
	Name(v string) HTMLSelect

	// Required specifies that the element must be filled out before submitting the form.
	Required(v bool) HTMLSelect

	// Size specifies the width.
	Size(v int) HTMLSelect

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLSelect

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLSelect

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLSelect

	// Title specifies extra information about an element.
	Title(v string) HTMLSelect

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLSelect

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLSelect

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLSelect

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLSelect

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLSelect

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLSelect

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLSelect

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLSelect

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLSelect

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLSelect

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLSelect

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLSelect

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLSelect

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLSelect

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLSelect

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLSelect

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLSelect

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLSelect

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLSelect

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLSelect

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLSelect

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLSelect

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLSelect

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLSelect

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLSelect

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLSelect

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLSelect

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLSelect

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLSelect

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLSelect

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLSelect

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLSelect
}

// Select returns an HTML element that defines a drop-down list.
func Select() HTMLSelect {
	e := &htmlSelect{
		elem: elem{
			tag:         "select",
			selfClosing: false,
		},
	}

	return e
}

type htmlSelect struct {
	elem
}

func (e *htmlSelect) Body(elems ...UI) HTMLSelect {
	e.setBody(elems...)
	return e
}

func (e *htmlSelect) Text(v interface{}) HTMLSelect {
	return e.Body(Text(v))
}

func (e *htmlSelect) AccessKey(v string) HTMLSelect {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlSelect) Aria(k string, v interface{}) HTMLSelect {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlSelect) AutoFocus(v bool) HTMLSelect {
	e.setAttr("autofocus", v)
	return e
}

func (e *htmlSelect) Class(v string) HTMLSelect {
	e.setAttr("class", v)
	return e
}

func (e *htmlSelect) ContentEditable(v bool) HTMLSelect {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlSelect) DataSet(k string, v interface{}) HTMLSelect {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlSelect) Dir(v string) HTMLSelect {
	e.setAttr("dir", v)
	return e
}

func (e *htmlSelect) Disabled(v bool) HTMLSelect {
	e.setAttr("disabled", v)
	return e
}

func (e *htmlSelect) Draggable(v bool) HTMLSelect {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlSelect) Form(v string) HTMLSelect {
	e.setAttr("form", v)
	return e
}

func (e *htmlSelect) Hidden(v bool) HTMLSelect {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlSelect) ID(v string) HTMLSelect {
	e.setAttr("id", v)
	return e
}

func (e *htmlSelect) Lang(v string) HTMLSelect {
	e.setAttr("lang", v)
	return e
}

func (e *htmlSelect) Multiple(v bool) HTMLSelect {
	e.setAttr("multiple", v)
	return e
}

func (e *htmlSelect) Name(v string) HTMLSelect {
	e.setAttr("name", v)
	return e
}

func (e *htmlSelect) Required(v bool) HTMLSelect {
	e.setAttr("required", v)
	return e
}

func (e *htmlSelect) Size(v int) HTMLSelect {
	e.setAttr("size", v)
	return e
}

func (e *htmlSelect) Spellcheck(v bool) HTMLSelect {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlSelect) Style(k, v string) HTMLSelect {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlSelect) TabIndex(v int) HTMLSelect {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlSelect) Title(v string) HTMLSelect {
	e.setAttr("title", v)
	return e
}

func (e *htmlSelect) OnBlur(h EventHandler) HTMLSelect {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlSelect) OnChange(h EventHandler) HTMLSelect {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlSelect) OnClick(h EventHandler) HTMLSelect {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlSelect) OnContextMenu(h EventHandler) HTMLSelect {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlSelect) OnCopy(h EventHandler) HTMLSelect {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlSelect) OnCut(h EventHandler) HTMLSelect {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlSelect) OnDblClick(h EventHandler) HTMLSelect {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlSelect) OnDrag(h EventHandler) HTMLSelect {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlSelect) OnDragEnd(h EventHandler) HTMLSelect {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlSelect) OnDragEnter(h EventHandler) HTMLSelect {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlSelect) OnDragLeave(h EventHandler) HTMLSelect {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlSelect) OnDragOver(h EventHandler) HTMLSelect {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlSelect) OnDragStart(h EventHandler) HTMLSelect {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlSelect) OnDrop(h EventHandler) HTMLSelect {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlSelect) OnFocus(h EventHandler) HTMLSelect {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlSelect) OnInput(h EventHandler) HTMLSelect {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlSelect) OnInvalid(h EventHandler) HTMLSelect {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlSelect) OnKeyDown(h EventHandler) HTMLSelect {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlSelect) OnKeyPress(h EventHandler) HTMLSelect {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlSelect) OnKeyup(h EventHandler) HTMLSelect {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlSelect) OnMouseDown(h EventHandler) HTMLSelect {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlSelect) OnMouseMove(h EventHandler) HTMLSelect {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlSelect) OnMouseOut(h EventHandler) HTMLSelect {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlSelect) OnMouseOver(h EventHandler) HTMLSelect {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlSelect) OnMouseUp(h EventHandler) HTMLSelect {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlSelect) OnPaste(h EventHandler) HTMLSelect {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlSelect) OnReset(h EventHandler) HTMLSelect {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlSelect) OnScroll(h EventHandler) HTMLSelect {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlSelect) OnSearch(h EventHandler) HTMLSelect {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlSelect) OnSelect(h EventHandler) HTMLSelect {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlSelect) OnSubmit(h EventHandler) HTMLSelect {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlSelect) OnWheel(h EventHandler) HTMLSelect {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLSmall is the interface that describes a <small> HTML element.
type HTMLSmall interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLSmall

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLSmall

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLSmall

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLSmall

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLSmall

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLSmall

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLSmall

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLSmall

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLSmall

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLSmall

	// ID specifies a unique id for an element.
	ID(v string) HTMLSmall

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLSmall

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLSmall

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLSmall

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLSmall

	// Title specifies extra information about an element.
	Title(v string) HTMLSmall

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLSmall

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLSmall

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLSmall

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLSmall

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLSmall

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLSmall

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLSmall

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLSmall

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLSmall

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLSmall

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLSmall

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLSmall

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLSmall

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLSmall

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLSmall

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLSmall

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLSmall

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLSmall

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLSmall

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLSmall

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLSmall

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLSmall

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLSmall

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLSmall

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLSmall

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLSmall

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLSmall

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLSmall

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLSmall

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLSmall

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLSmall

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLSmall
}

// Small returns an HTML element that defines smaller text.
func Small() HTMLSmall {
	e := &htmlSmall{
		elem: elem{
			tag:         "small",
			selfClosing: false,
		},
	}

	return e
}

type htmlSmall struct {
	elem
}

func (e *htmlSmall) Body(elems ...UI) HTMLSmall {
	e.setBody(elems...)
	return e
}

func (e *htmlSmall) Text(v interface{}) HTMLSmall {
	return e.Body(Text(v))
}

func (e *htmlSmall) AccessKey(v string) HTMLSmall {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlSmall) Aria(k string, v interface{}) HTMLSmall {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlSmall) Class(v string) HTMLSmall {
	e.setAttr("class", v)
	return e
}

func (e *htmlSmall) ContentEditable(v bool) HTMLSmall {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlSmall) DataSet(k string, v interface{}) HTMLSmall {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlSmall) Dir(v string) HTMLSmall {
	e.setAttr("dir", v)
	return e
}

func (e *htmlSmall) Draggable(v bool) HTMLSmall {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlSmall) Hidden(v bool) HTMLSmall {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlSmall) ID(v string) HTMLSmall {
	e.setAttr("id", v)
	return e
}

func (e *htmlSmall) Lang(v string) HTMLSmall {
	e.setAttr("lang", v)
	return e
}

func (e *htmlSmall) Spellcheck(v bool) HTMLSmall {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlSmall) Style(k, v string) HTMLSmall {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlSmall) TabIndex(v int) HTMLSmall {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlSmall) Title(v string) HTMLSmall {
	e.setAttr("title", v)
	return e
}

func (e *htmlSmall) OnBlur(h EventHandler) HTMLSmall {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlSmall) OnChange(h EventHandler) HTMLSmall {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlSmall) OnClick(h EventHandler) HTMLSmall {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlSmall) OnContextMenu(h EventHandler) HTMLSmall {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlSmall) OnCopy(h EventHandler) HTMLSmall {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlSmall) OnCut(h EventHandler) HTMLSmall {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlSmall) OnDblClick(h EventHandler) HTMLSmall {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlSmall) OnDrag(h EventHandler) HTMLSmall {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlSmall) OnDragEnd(h EventHandler) HTMLSmall {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlSmall) OnDragEnter(h EventHandler) HTMLSmall {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlSmall) OnDragLeave(h EventHandler) HTMLSmall {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlSmall) OnDragOver(h EventHandler) HTMLSmall {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlSmall) OnDragStart(h EventHandler) HTMLSmall {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlSmall) OnDrop(h EventHandler) HTMLSmall {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlSmall) OnFocus(h EventHandler) HTMLSmall {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlSmall) OnInput(h EventHandler) HTMLSmall {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlSmall) OnInvalid(h EventHandler) HTMLSmall {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlSmall) OnKeyDown(h EventHandler) HTMLSmall {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlSmall) OnKeyPress(h EventHandler) HTMLSmall {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlSmall) OnKeyup(h EventHandler) HTMLSmall {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlSmall) OnMouseDown(h EventHandler) HTMLSmall {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlSmall) OnMouseMove(h EventHandler) HTMLSmall {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlSmall) OnMouseOut(h EventHandler) HTMLSmall {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlSmall) OnMouseOver(h EventHandler) HTMLSmall {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlSmall) OnMouseUp(h EventHandler) HTMLSmall {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlSmall) OnPaste(h EventHandler) HTMLSmall {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlSmall) OnReset(h EventHandler) HTMLSmall {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlSmall) OnScroll(h EventHandler) HTMLSmall {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlSmall) OnSearch(h EventHandler) HTMLSmall {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlSmall) OnSelect(h EventHandler) HTMLSmall {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlSmall) OnSubmit(h EventHandler) HTMLSmall {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlSmall) OnWheel(h EventHandler) HTMLSmall {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLSource is the interface that describes a <source> HTML element.
type HTMLSource interface {
	UI

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLSource

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLSource

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLSource

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLSource

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLSource

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLSource

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLSource

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLSource

	// ID specifies a unique id for an element.
	ID(v string) HTMLSource

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLSource

	// Media specifies what media/device the linked document is optimized for.
	Media(v string) HTMLSource

	// Sizes specifies the size of the linked resource.
	Sizes(v string) HTMLSource

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLSource

	// Src specifies the URL of the media file.
	Src(v string) HTMLSource

	// SrcSet specifies the URL of the image to use in different situations.
	SrcSet(v string) HTMLSource

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLSource

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLSource

	// Title specifies extra information about an element.
	Title(v string) HTMLSource

	// Type specifies the type of element.
	Type(v string) HTMLSource

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLSource

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLSource

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLSource

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLSource

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLSource

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLSource

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLSource

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLSource

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLSource

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLSource

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLSource

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLSource

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLSource

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLSource

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLSource

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLSource

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLSource

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLSource

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLSource

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLSource

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLSource

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLSource

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLSource

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLSource

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLSource

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLSource

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLSource

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLSource

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLSource

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLSource

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLSource

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLSource
}

// Source returns an HTML element that .
func Source() HTMLSource {
	e := &htmlSource{
		elem: elem{
			tag:         "source",
			selfClosing: true,
		},
	}

	return e
}

type htmlSource struct {
	elem
}

func (e *htmlSource) AccessKey(v string) HTMLSource {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlSource) Aria(k string, v interface{}) HTMLSource {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlSource) Class(v string) HTMLSource {
	e.setAttr("class", v)
	return e
}

func (e *htmlSource) ContentEditable(v bool) HTMLSource {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlSource) DataSet(k string, v interface{}) HTMLSource {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlSource) Dir(v string) HTMLSource {
	e.setAttr("dir", v)
	return e
}

func (e *htmlSource) Draggable(v bool) HTMLSource {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlSource) Hidden(v bool) HTMLSource {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlSource) ID(v string) HTMLSource {
	e.setAttr("id", v)
	return e
}

func (e *htmlSource) Lang(v string) HTMLSource {
	e.setAttr("lang", v)
	return e
}

func (e *htmlSource) Media(v string) HTMLSource {
	e.setAttr("media", v)
	return e
}

func (e *htmlSource) Sizes(v string) HTMLSource {
	e.setAttr("sizes", v)
	return e
}

func (e *htmlSource) Spellcheck(v bool) HTMLSource {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlSource) Src(v string) HTMLSource {
	e.setAttr("src", StaticResource(v))
	return e
}

func (e *htmlSource) SrcSet(v string) HTMLSource {
	e.setAttr("srcset", StaticResource(v))
	return e
}

func (e *htmlSource) Style(k, v string) HTMLSource {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlSource) TabIndex(v int) HTMLSource {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlSource) Title(v string) HTMLSource {
	e.setAttr("title", v)
	return e
}

func (e *htmlSource) Type(v string) HTMLSource {
	e.setAttr("type", v)
	return e
}

func (e *htmlSource) OnBlur(h EventHandler) HTMLSource {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlSource) OnChange(h EventHandler) HTMLSource {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlSource) OnClick(h EventHandler) HTMLSource {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlSource) OnContextMenu(h EventHandler) HTMLSource {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlSource) OnCopy(h EventHandler) HTMLSource {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlSource) OnCut(h EventHandler) HTMLSource {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlSource) OnDblClick(h EventHandler) HTMLSource {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlSource) OnDrag(h EventHandler) HTMLSource {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlSource) OnDragEnd(h EventHandler) HTMLSource {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlSource) OnDragEnter(h EventHandler) HTMLSource {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlSource) OnDragLeave(h EventHandler) HTMLSource {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlSource) OnDragOver(h EventHandler) HTMLSource {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlSource) OnDragStart(h EventHandler) HTMLSource {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlSource) OnDrop(h EventHandler) HTMLSource {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlSource) OnFocus(h EventHandler) HTMLSource {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlSource) OnInput(h EventHandler) HTMLSource {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlSource) OnInvalid(h EventHandler) HTMLSource {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlSource) OnKeyDown(h EventHandler) HTMLSource {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlSource) OnKeyPress(h EventHandler) HTMLSource {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlSource) OnKeyup(h EventHandler) HTMLSource {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlSource) OnMouseDown(h EventHandler) HTMLSource {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlSource) OnMouseMove(h EventHandler) HTMLSource {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlSource) OnMouseOut(h EventHandler) HTMLSource {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlSource) OnMouseOver(h EventHandler) HTMLSource {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlSource) OnMouseUp(h EventHandler) HTMLSource {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlSource) OnPaste(h EventHandler) HTMLSource {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlSource) OnReset(h EventHandler) HTMLSource {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlSource) OnScroll(h EventHandler) HTMLSource {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlSource) OnSearch(h EventHandler) HTMLSource {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlSource) OnSelect(h EventHandler) HTMLSource {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlSource) OnSubmit(h EventHandler) HTMLSource {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlSource) OnWheel(h EventHandler) HTMLSource {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLSpan is the interface that describes a <span> HTML element.
type HTMLSpan interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLSpan

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLSpan

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLSpan

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLSpan

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLSpan

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLSpan

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLSpan

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLSpan

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLSpan

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLSpan

	// ID specifies a unique id for an element.
	ID(v string) HTMLSpan

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLSpan

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLSpan

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLSpan

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLSpan

	// Title specifies extra information about an element.
	Title(v string) HTMLSpan

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLSpan

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLSpan

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLSpan

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLSpan

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLSpan

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLSpan

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLSpan

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLSpan

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLSpan

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLSpan

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLSpan

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLSpan

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLSpan

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLSpan

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLSpan

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLSpan

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLSpan

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLSpan

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLSpan

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLSpan

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLSpan

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLSpan

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLSpan

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLSpan

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLSpan

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLSpan

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLSpan

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLSpan

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLSpan

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLSpan

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLSpan

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLSpan
}

// Span returns an HTML element that defines a section in a document.
func Span() HTMLSpan {
	e := &htmlSpan{
		elem: elem{
			tag:         "span",
			selfClosing: false,
		},
	}

	return e
}

type htmlSpan struct {
	elem
}

func (e *htmlSpan) Body(elems ...UI) HTMLSpan {
	e.setBody(elems...)
	return e
}

func (e *htmlSpan) Text(v interface{}) HTMLSpan {
	return e.Body(Text(v))
}

func (e *htmlSpan) AccessKey(v string) HTMLSpan {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlSpan) Aria(k string, v interface{}) HTMLSpan {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlSpan) Class(v string) HTMLSpan {
	e.setAttr("class", v)
	return e
}

func (e *htmlSpan) ContentEditable(v bool) HTMLSpan {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlSpan) DataSet(k string, v interface{}) HTMLSpan {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlSpan) Dir(v string) HTMLSpan {
	e.setAttr("dir", v)
	return e
}

func (e *htmlSpan) Draggable(v bool) HTMLSpan {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlSpan) Hidden(v bool) HTMLSpan {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlSpan) ID(v string) HTMLSpan {
	e.setAttr("id", v)
	return e
}

func (e *htmlSpan) Lang(v string) HTMLSpan {
	e.setAttr("lang", v)
	return e
}

func (e *htmlSpan) Spellcheck(v bool) HTMLSpan {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlSpan) Style(k, v string) HTMLSpan {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlSpan) TabIndex(v int) HTMLSpan {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlSpan) Title(v string) HTMLSpan {
	e.setAttr("title", v)
	return e
}

func (e *htmlSpan) OnBlur(h EventHandler) HTMLSpan {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlSpan) OnChange(h EventHandler) HTMLSpan {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlSpan) OnClick(h EventHandler) HTMLSpan {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlSpan) OnContextMenu(h EventHandler) HTMLSpan {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlSpan) OnCopy(h EventHandler) HTMLSpan {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlSpan) OnCut(h EventHandler) HTMLSpan {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlSpan) OnDblClick(h EventHandler) HTMLSpan {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlSpan) OnDrag(h EventHandler) HTMLSpan {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlSpan) OnDragEnd(h EventHandler) HTMLSpan {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlSpan) OnDragEnter(h EventHandler) HTMLSpan {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlSpan) OnDragLeave(h EventHandler) HTMLSpan {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlSpan) OnDragOver(h EventHandler) HTMLSpan {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlSpan) OnDragStart(h EventHandler) HTMLSpan {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlSpan) OnDrop(h EventHandler) HTMLSpan {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlSpan) OnFocus(h EventHandler) HTMLSpan {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlSpan) OnInput(h EventHandler) HTMLSpan {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlSpan) OnInvalid(h EventHandler) HTMLSpan {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlSpan) OnKeyDown(h EventHandler) HTMLSpan {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlSpan) OnKeyPress(h EventHandler) HTMLSpan {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlSpan) OnKeyup(h EventHandler) HTMLSpan {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlSpan) OnMouseDown(h EventHandler) HTMLSpan {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlSpan) OnMouseMove(h EventHandler) HTMLSpan {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlSpan) OnMouseOut(h EventHandler) HTMLSpan {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlSpan) OnMouseOver(h EventHandler) HTMLSpan {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlSpan) OnMouseUp(h EventHandler) HTMLSpan {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlSpan) OnPaste(h EventHandler) HTMLSpan {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlSpan) OnReset(h EventHandler) HTMLSpan {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlSpan) OnScroll(h EventHandler) HTMLSpan {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlSpan) OnSearch(h EventHandler) HTMLSpan {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlSpan) OnSelect(h EventHandler) HTMLSpan {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlSpan) OnSubmit(h EventHandler) HTMLSpan {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlSpan) OnWheel(h EventHandler) HTMLSpan {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLStrong is the interface that describes a <strong> HTML element.
type HTMLStrong interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLStrong

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLStrong

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLStrong

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLStrong

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLStrong

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLStrong

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLStrong

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLStrong

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLStrong

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLStrong

	// ID specifies a unique id for an element.
	ID(v string) HTMLStrong

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLStrong

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLStrong

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLStrong

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLStrong

	// Title specifies extra information about an element.
	Title(v string) HTMLStrong

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLStrong

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLStrong

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLStrong

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLStrong

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLStrong

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLStrong

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLStrong

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLStrong

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLStrong

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLStrong

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLStrong

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLStrong

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLStrong

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLStrong

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLStrong

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLStrong

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLStrong

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLStrong

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLStrong

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLStrong

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLStrong

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLStrong

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLStrong

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLStrong

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLStrong

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLStrong

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLStrong

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLStrong

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLStrong

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLStrong

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLStrong

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLStrong
}

// Strong returns an HTML element that defines important text.
func Strong() HTMLStrong {
	e := &htmlStrong{
		elem: elem{
			tag:         "strong",
			selfClosing: false,
		},
	}

	return e
}

type htmlStrong struct {
	elem
}

func (e *htmlStrong) Body(elems ...UI) HTMLStrong {
	e.setBody(elems...)
	return e
}

func (e *htmlStrong) Text(v interface{}) HTMLStrong {
	return e.Body(Text(v))
}

func (e *htmlStrong) AccessKey(v string) HTMLStrong {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlStrong) Aria(k string, v interface{}) HTMLStrong {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlStrong) Class(v string) HTMLStrong {
	e.setAttr("class", v)
	return e
}

func (e *htmlStrong) ContentEditable(v bool) HTMLStrong {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlStrong) DataSet(k string, v interface{}) HTMLStrong {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlStrong) Dir(v string) HTMLStrong {
	e.setAttr("dir", v)
	return e
}

func (e *htmlStrong) Draggable(v bool) HTMLStrong {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlStrong) Hidden(v bool) HTMLStrong {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlStrong) ID(v string) HTMLStrong {
	e.setAttr("id", v)
	return e
}

func (e *htmlStrong) Lang(v string) HTMLStrong {
	e.setAttr("lang", v)
	return e
}

func (e *htmlStrong) Spellcheck(v bool) HTMLStrong {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlStrong) Style(k, v string) HTMLStrong {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlStrong) TabIndex(v int) HTMLStrong {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlStrong) Title(v string) HTMLStrong {
	e.setAttr("title", v)
	return e
}

func (e *htmlStrong) OnBlur(h EventHandler) HTMLStrong {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlStrong) OnChange(h EventHandler) HTMLStrong {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlStrong) OnClick(h EventHandler) HTMLStrong {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlStrong) OnContextMenu(h EventHandler) HTMLStrong {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlStrong) OnCopy(h EventHandler) HTMLStrong {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlStrong) OnCut(h EventHandler) HTMLStrong {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlStrong) OnDblClick(h EventHandler) HTMLStrong {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlStrong) OnDrag(h EventHandler) HTMLStrong {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlStrong) OnDragEnd(h EventHandler) HTMLStrong {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlStrong) OnDragEnter(h EventHandler) HTMLStrong {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlStrong) OnDragLeave(h EventHandler) HTMLStrong {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlStrong) OnDragOver(h EventHandler) HTMLStrong {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlStrong) OnDragStart(h EventHandler) HTMLStrong {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlStrong) OnDrop(h EventHandler) HTMLStrong {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlStrong) OnFocus(h EventHandler) HTMLStrong {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlStrong) OnInput(h EventHandler) HTMLStrong {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlStrong) OnInvalid(h EventHandler) HTMLStrong {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlStrong) OnKeyDown(h EventHandler) HTMLStrong {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlStrong) OnKeyPress(h EventHandler) HTMLStrong {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlStrong) OnKeyup(h EventHandler) HTMLStrong {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlStrong) OnMouseDown(h EventHandler) HTMLStrong {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlStrong) OnMouseMove(h EventHandler) HTMLStrong {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlStrong) OnMouseOut(h EventHandler) HTMLStrong {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlStrong) OnMouseOver(h EventHandler) HTMLStrong {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlStrong) OnMouseUp(h EventHandler) HTMLStrong {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlStrong) OnPaste(h EventHandler) HTMLStrong {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlStrong) OnReset(h EventHandler) HTMLStrong {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlStrong) OnScroll(h EventHandler) HTMLStrong {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlStrong) OnSearch(h EventHandler) HTMLStrong {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlStrong) OnSelect(h EventHandler) HTMLStrong {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlStrong) OnSubmit(h EventHandler) HTMLStrong {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlStrong) OnWheel(h EventHandler) HTMLStrong {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLStyle is the interface that describes a <style> HTML element.
type HTMLStyle interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLStyle

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLStyle

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLStyle

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLStyle

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLStyle

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLStyle

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLStyle

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLStyle

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLStyle

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLStyle

	// ID specifies a unique id for an element.
	ID(v string) HTMLStyle

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLStyle

	// Media specifies what media/device the linked document is optimized for.
	Media(v string) HTMLStyle

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLStyle

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLStyle

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLStyle

	// Title specifies extra information about an element.
	Title(v string) HTMLStyle

	// Type specifies the type of element.
	Type(v string) HTMLStyle

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLStyle

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLStyle

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLStyle

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLStyle

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLStyle

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLStyle

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLStyle

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLStyle

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLStyle

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLStyle

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLStyle

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLStyle

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLStyle

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLStyle

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLStyle

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLStyle

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLStyle

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLStyle

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLStyle

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLStyle

	// OnLoad calls the given handler after the element is finished loading.
	OnLoad(h EventHandler) HTMLStyle

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLStyle

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLStyle

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLStyle

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLStyle

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLStyle

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLStyle

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLStyle

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLStyle

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLStyle

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLStyle

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLStyle

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLStyle
}

// Style returns an HTML element that defines style information for a document.
func Style() HTMLStyle {
	e := &htmlStyle{
		elem: elem{
			tag:         "style",
			selfClosing: false,
		},
	}

	return e
}

type htmlStyle struct {
	elem
}

func (e *htmlStyle) Body(elems ...UI) HTMLStyle {
	e.setBody(elems...)
	return e
}

func (e *htmlStyle) Text(v interface{}) HTMLStyle {
	return e.Body(Text(v))
}

func (e *htmlStyle) AccessKey(v string) HTMLStyle {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlStyle) Aria(k string, v interface{}) HTMLStyle {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlStyle) Class(v string) HTMLStyle {
	e.setAttr("class", v)
	return e
}

func (e *htmlStyle) ContentEditable(v bool) HTMLStyle {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlStyle) DataSet(k string, v interface{}) HTMLStyle {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlStyle) Dir(v string) HTMLStyle {
	e.setAttr("dir", v)
	return e
}

func (e *htmlStyle) Draggable(v bool) HTMLStyle {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlStyle) Hidden(v bool) HTMLStyle {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlStyle) ID(v string) HTMLStyle {
	e.setAttr("id", v)
	return e
}

func (e *htmlStyle) Lang(v string) HTMLStyle {
	e.setAttr("lang", v)
	return e
}

func (e *htmlStyle) Media(v string) HTMLStyle {
	e.setAttr("media", v)
	return e
}

func (e *htmlStyle) Spellcheck(v bool) HTMLStyle {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlStyle) Style(k, v string) HTMLStyle {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlStyle) TabIndex(v int) HTMLStyle {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlStyle) Title(v string) HTMLStyle {
	e.setAttr("title", v)
	return e
}

func (e *htmlStyle) Type(v string) HTMLStyle {
	e.setAttr("type", v)
	return e
}

func (e *htmlStyle) OnBlur(h EventHandler) HTMLStyle {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlStyle) OnChange(h EventHandler) HTMLStyle {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlStyle) OnClick(h EventHandler) HTMLStyle {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlStyle) OnContextMenu(h EventHandler) HTMLStyle {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlStyle) OnCopy(h EventHandler) HTMLStyle {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlStyle) OnCut(h EventHandler) HTMLStyle {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlStyle) OnDblClick(h EventHandler) HTMLStyle {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlStyle) OnDrag(h EventHandler) HTMLStyle {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlStyle) OnDragEnd(h EventHandler) HTMLStyle {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlStyle) OnDragEnter(h EventHandler) HTMLStyle {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlStyle) OnDragLeave(h EventHandler) HTMLStyle {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlStyle) OnDragOver(h EventHandler) HTMLStyle {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlStyle) OnDragStart(h EventHandler) HTMLStyle {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlStyle) OnDrop(h EventHandler) HTMLStyle {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlStyle) OnFocus(h EventHandler) HTMLStyle {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlStyle) OnInput(h EventHandler) HTMLStyle {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlStyle) OnInvalid(h EventHandler) HTMLStyle {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlStyle) OnKeyDown(h EventHandler) HTMLStyle {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlStyle) OnKeyPress(h EventHandler) HTMLStyle {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlStyle) OnKeyup(h EventHandler) HTMLStyle {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlStyle) OnLoad(h EventHandler) HTMLStyle {
	e.setEventHandler("load", h)
	return e
}

func (e *htmlStyle) OnMouseDown(h EventHandler) HTMLStyle {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlStyle) OnMouseMove(h EventHandler) HTMLStyle {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlStyle) OnMouseOut(h EventHandler) HTMLStyle {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlStyle) OnMouseOver(h EventHandler) HTMLStyle {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlStyle) OnMouseUp(h EventHandler) HTMLStyle {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlStyle) OnPaste(h EventHandler) HTMLStyle {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlStyle) OnReset(h EventHandler) HTMLStyle {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlStyle) OnScroll(h EventHandler) HTMLStyle {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlStyle) OnSearch(h EventHandler) HTMLStyle {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlStyle) OnSelect(h EventHandler) HTMLStyle {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlStyle) OnSubmit(h EventHandler) HTMLStyle {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlStyle) OnWheel(h EventHandler) HTMLStyle {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLSub is the interface that describes a <sub> HTML element.
type HTMLSub interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLSub

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLSub

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLSub

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLSub

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLSub

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLSub

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLSub

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLSub

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLSub

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLSub

	// ID specifies a unique id for an element.
	ID(v string) HTMLSub

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLSub

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLSub

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLSub

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLSub

	// Title specifies extra information about an element.
	Title(v string) HTMLSub

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLSub

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLSub

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLSub

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLSub

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLSub

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLSub

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLSub

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLSub

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLSub

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLSub

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLSub

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLSub

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLSub

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLSub

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLSub

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLSub

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLSub

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLSub

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLSub

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLSub

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLSub

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLSub

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLSub

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLSub

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLSub

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLSub

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLSub

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLSub

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLSub

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLSub

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLSub

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLSub
}

// Sub returns an HTML element that defines subscripted text.
func Sub() HTMLSub {
	e := &htmlSub{
		elem: elem{
			tag:         "sub",
			selfClosing: false,
		},
	}

	return e
}

type htmlSub struct {
	elem
}

func (e *htmlSub) Body(elems ...UI) HTMLSub {
	e.setBody(elems...)
	return e
}

func (e *htmlSub) Text(v interface{}) HTMLSub {
	return e.Body(Text(v))
}

func (e *htmlSub) AccessKey(v string) HTMLSub {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlSub) Aria(k string, v interface{}) HTMLSub {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlSub) Class(v string) HTMLSub {
	e.setAttr("class", v)
	return e
}

func (e *htmlSub) ContentEditable(v bool) HTMLSub {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlSub) DataSet(k string, v interface{}) HTMLSub {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlSub) Dir(v string) HTMLSub {
	e.setAttr("dir", v)
	return e
}

func (e *htmlSub) Draggable(v bool) HTMLSub {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlSub) Hidden(v bool) HTMLSub {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlSub) ID(v string) HTMLSub {
	e.setAttr("id", v)
	return e
}

func (e *htmlSub) Lang(v string) HTMLSub {
	e.setAttr("lang", v)
	return e
}

func (e *htmlSub) Spellcheck(v bool) HTMLSub {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlSub) Style(k, v string) HTMLSub {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlSub) TabIndex(v int) HTMLSub {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlSub) Title(v string) HTMLSub {
	e.setAttr("title", v)
	return e
}

func (e *htmlSub) OnBlur(h EventHandler) HTMLSub {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlSub) OnChange(h EventHandler) HTMLSub {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlSub) OnClick(h EventHandler) HTMLSub {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlSub) OnContextMenu(h EventHandler) HTMLSub {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlSub) OnCopy(h EventHandler) HTMLSub {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlSub) OnCut(h EventHandler) HTMLSub {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlSub) OnDblClick(h EventHandler) HTMLSub {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlSub) OnDrag(h EventHandler) HTMLSub {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlSub) OnDragEnd(h EventHandler) HTMLSub {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlSub) OnDragEnter(h EventHandler) HTMLSub {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlSub) OnDragLeave(h EventHandler) HTMLSub {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlSub) OnDragOver(h EventHandler) HTMLSub {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlSub) OnDragStart(h EventHandler) HTMLSub {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlSub) OnDrop(h EventHandler) HTMLSub {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlSub) OnFocus(h EventHandler) HTMLSub {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlSub) OnInput(h EventHandler) HTMLSub {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlSub) OnInvalid(h EventHandler) HTMLSub {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlSub) OnKeyDown(h EventHandler) HTMLSub {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlSub) OnKeyPress(h EventHandler) HTMLSub {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlSub) OnKeyup(h EventHandler) HTMLSub {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlSub) OnMouseDown(h EventHandler) HTMLSub {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlSub) OnMouseMove(h EventHandler) HTMLSub {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlSub) OnMouseOut(h EventHandler) HTMLSub {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlSub) OnMouseOver(h EventHandler) HTMLSub {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlSub) OnMouseUp(h EventHandler) HTMLSub {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlSub) OnPaste(h EventHandler) HTMLSub {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlSub) OnReset(h EventHandler) HTMLSub {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlSub) OnScroll(h EventHandler) HTMLSub {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlSub) OnSearch(h EventHandler) HTMLSub {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlSub) OnSelect(h EventHandler) HTMLSub {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlSub) OnSubmit(h EventHandler) HTMLSub {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlSub) OnWheel(h EventHandler) HTMLSub {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLSummary is the interface that describes a <summary> HTML element.
type HTMLSummary interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLSummary

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLSummary

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLSummary

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLSummary

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLSummary

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLSummary

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLSummary

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLSummary

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLSummary

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLSummary

	// ID specifies a unique id for an element.
	ID(v string) HTMLSummary

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLSummary

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLSummary

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLSummary

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLSummary

	// Title specifies extra information about an element.
	Title(v string) HTMLSummary

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLSummary

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLSummary

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLSummary

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLSummary

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLSummary

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLSummary

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLSummary

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLSummary

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLSummary

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLSummary

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLSummary

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLSummary

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLSummary

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLSummary

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLSummary

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLSummary

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLSummary

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLSummary

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLSummary

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLSummary

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLSummary

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLSummary

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLSummary

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLSummary

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLSummary

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLSummary

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLSummary

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLSummary

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLSummary

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLSummary

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLSummary

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLSummary
}

// Summary returns an HTML element that defines a visible heading for a details element.
func Summary() HTMLSummary {
	e := &htmlSummary{
		elem: elem{
			tag:         "summary",
			selfClosing: false,
		},
	}

	return e
}

type htmlSummary struct {
	elem
}

func (e *htmlSummary) Body(elems ...UI) HTMLSummary {
	e.setBody(elems...)
	return e
}

func (e *htmlSummary) Text(v interface{}) HTMLSummary {
	return e.Body(Text(v))
}

func (e *htmlSummary) AccessKey(v string) HTMLSummary {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlSummary) Aria(k string, v interface{}) HTMLSummary {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlSummary) Class(v string) HTMLSummary {
	e.setAttr("class", v)
	return e
}

func (e *htmlSummary) ContentEditable(v bool) HTMLSummary {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlSummary) DataSet(k string, v interface{}) HTMLSummary {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlSummary) Dir(v string) HTMLSummary {
	e.setAttr("dir", v)
	return e
}

func (e *htmlSummary) Draggable(v bool) HTMLSummary {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlSummary) Hidden(v bool) HTMLSummary {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlSummary) ID(v string) HTMLSummary {
	e.setAttr("id", v)
	return e
}

func (e *htmlSummary) Lang(v string) HTMLSummary {
	e.setAttr("lang", v)
	return e
}

func (e *htmlSummary) Spellcheck(v bool) HTMLSummary {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlSummary) Style(k, v string) HTMLSummary {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlSummary) TabIndex(v int) HTMLSummary {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlSummary) Title(v string) HTMLSummary {
	e.setAttr("title", v)
	return e
}

func (e *htmlSummary) OnBlur(h EventHandler) HTMLSummary {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlSummary) OnChange(h EventHandler) HTMLSummary {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlSummary) OnClick(h EventHandler) HTMLSummary {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlSummary) OnContextMenu(h EventHandler) HTMLSummary {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlSummary) OnCopy(h EventHandler) HTMLSummary {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlSummary) OnCut(h EventHandler) HTMLSummary {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlSummary) OnDblClick(h EventHandler) HTMLSummary {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlSummary) OnDrag(h EventHandler) HTMLSummary {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlSummary) OnDragEnd(h EventHandler) HTMLSummary {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlSummary) OnDragEnter(h EventHandler) HTMLSummary {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlSummary) OnDragLeave(h EventHandler) HTMLSummary {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlSummary) OnDragOver(h EventHandler) HTMLSummary {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlSummary) OnDragStart(h EventHandler) HTMLSummary {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlSummary) OnDrop(h EventHandler) HTMLSummary {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlSummary) OnFocus(h EventHandler) HTMLSummary {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlSummary) OnInput(h EventHandler) HTMLSummary {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlSummary) OnInvalid(h EventHandler) HTMLSummary {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlSummary) OnKeyDown(h EventHandler) HTMLSummary {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlSummary) OnKeyPress(h EventHandler) HTMLSummary {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlSummary) OnKeyup(h EventHandler) HTMLSummary {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlSummary) OnMouseDown(h EventHandler) HTMLSummary {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlSummary) OnMouseMove(h EventHandler) HTMLSummary {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlSummary) OnMouseOut(h EventHandler) HTMLSummary {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlSummary) OnMouseOver(h EventHandler) HTMLSummary {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlSummary) OnMouseUp(h EventHandler) HTMLSummary {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlSummary) OnPaste(h EventHandler) HTMLSummary {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlSummary) OnReset(h EventHandler) HTMLSummary {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlSummary) OnScroll(h EventHandler) HTMLSummary {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlSummary) OnSearch(h EventHandler) HTMLSummary {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlSummary) OnSelect(h EventHandler) HTMLSummary {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlSummary) OnSubmit(h EventHandler) HTMLSummary {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlSummary) OnWheel(h EventHandler) HTMLSummary {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLSup is the interface that describes a <sup> HTML element.
type HTMLSup interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLSup

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLSup

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLSup

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLSup

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLSup

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLSup

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLSup

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLSup

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLSup

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLSup

	// ID specifies a unique id for an element.
	ID(v string) HTMLSup

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLSup

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLSup

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLSup

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLSup

	// Title specifies extra information about an element.
	Title(v string) HTMLSup

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLSup

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLSup

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLSup

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLSup

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLSup

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLSup

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLSup

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLSup

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLSup

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLSup

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLSup

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLSup

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLSup

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLSup

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLSup

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLSup

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLSup

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLSup

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLSup

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLSup

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLSup

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLSup

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLSup

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLSup

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLSup

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLSup

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLSup

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLSup

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLSup

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLSup

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLSup

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLSup
}

// Sup returns an HTML element that defines superscripted text.
func Sup() HTMLSup {
	e := &htmlSup{
		elem: elem{
			tag:         "sup",
			selfClosing: false,
		},
	}

	return e
}

type htmlSup struct {
	elem
}

func (e *htmlSup) Body(elems ...UI) HTMLSup {
	e.setBody(elems...)
	return e
}

func (e *htmlSup) Text(v interface{}) HTMLSup {
	return e.Body(Text(v))
}

func (e *htmlSup) AccessKey(v string) HTMLSup {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlSup) Aria(k string, v interface{}) HTMLSup {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlSup) Class(v string) HTMLSup {
	e.setAttr("class", v)
	return e
}

func (e *htmlSup) ContentEditable(v bool) HTMLSup {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlSup) DataSet(k string, v interface{}) HTMLSup {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlSup) Dir(v string) HTMLSup {
	e.setAttr("dir", v)
	return e
}

func (e *htmlSup) Draggable(v bool) HTMLSup {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlSup) Hidden(v bool) HTMLSup {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlSup) ID(v string) HTMLSup {
	e.setAttr("id", v)
	return e
}

func (e *htmlSup) Lang(v string) HTMLSup {
	e.setAttr("lang", v)
	return e
}

func (e *htmlSup) Spellcheck(v bool) HTMLSup {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlSup) Style(k, v string) HTMLSup {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlSup) TabIndex(v int) HTMLSup {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlSup) Title(v string) HTMLSup {
	e.setAttr("title", v)
	return e
}

func (e *htmlSup) OnBlur(h EventHandler) HTMLSup {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlSup) OnChange(h EventHandler) HTMLSup {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlSup) OnClick(h EventHandler) HTMLSup {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlSup) OnContextMenu(h EventHandler) HTMLSup {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlSup) OnCopy(h EventHandler) HTMLSup {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlSup) OnCut(h EventHandler) HTMLSup {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlSup) OnDblClick(h EventHandler) HTMLSup {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlSup) OnDrag(h EventHandler) HTMLSup {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlSup) OnDragEnd(h EventHandler) HTMLSup {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlSup) OnDragEnter(h EventHandler) HTMLSup {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlSup) OnDragLeave(h EventHandler) HTMLSup {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlSup) OnDragOver(h EventHandler) HTMLSup {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlSup) OnDragStart(h EventHandler) HTMLSup {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlSup) OnDrop(h EventHandler) HTMLSup {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlSup) OnFocus(h EventHandler) HTMLSup {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlSup) OnInput(h EventHandler) HTMLSup {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlSup) OnInvalid(h EventHandler) HTMLSup {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlSup) OnKeyDown(h EventHandler) HTMLSup {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlSup) OnKeyPress(h EventHandler) HTMLSup {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlSup) OnKeyup(h EventHandler) HTMLSup {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlSup) OnMouseDown(h EventHandler) HTMLSup {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlSup) OnMouseMove(h EventHandler) HTMLSup {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlSup) OnMouseOut(h EventHandler) HTMLSup {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlSup) OnMouseOver(h EventHandler) HTMLSup {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlSup) OnMouseUp(h EventHandler) HTMLSup {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlSup) OnPaste(h EventHandler) HTMLSup {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlSup) OnReset(h EventHandler) HTMLSup {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlSup) OnScroll(h EventHandler) HTMLSup {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlSup) OnSearch(h EventHandler) HTMLSup {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlSup) OnSelect(h EventHandler) HTMLSup {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlSup) OnSubmit(h EventHandler) HTMLSup {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlSup) OnWheel(h EventHandler) HTMLSup {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLTable is the interface that describes a <table> HTML element.
type HTMLTable interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLTable

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLTable

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTable

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLTable

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLTable

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTable

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLTable

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTable

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTable

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTable

	// ID specifies a unique id for an element.
	ID(v string) HTMLTable

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTable

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTable

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTable

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTable

	// Title specifies extra information about an element.
	Title(v string) HTMLTable

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLTable

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLTable

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLTable

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLTable

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLTable

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLTable

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLTable

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLTable

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLTable

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLTable

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLTable

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLTable

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLTable

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLTable

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLTable

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLTable

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLTable

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLTable

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLTable

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLTable

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLTable

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLTable

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLTable

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLTable

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLTable

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLTable

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLTable

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLTable

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLTable

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLTable

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLTable

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLTable
}

// Table returns an HTML element that defines a table.
func Table() HTMLTable {
	e := &htmlTable{
		elem: elem{
			tag:         "table",
			selfClosing: false,
		},
	}

	return e
}

type htmlTable struct {
	elem
}

func (e *htmlTable) Body(elems ...UI) HTMLTable {
	e.setBody(elems...)
	return e
}

func (e *htmlTable) Text(v interface{}) HTMLTable {
	return e.Body(Text(v))
}

func (e *htmlTable) AccessKey(v string) HTMLTable {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlTable) Aria(k string, v interface{}) HTMLTable {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTable) Class(v string) HTMLTable {
	e.setAttr("class", v)
	return e
}

func (e *htmlTable) ContentEditable(v bool) HTMLTable {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlTable) DataSet(k string, v interface{}) HTMLTable {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTable) Dir(v string) HTMLTable {
	e.setAttr("dir", v)
	return e
}

func (e *htmlTable) Draggable(v bool) HTMLTable {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlTable) Hidden(v bool) HTMLTable {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlTable) ID(v string) HTMLTable {
	e.setAttr("id", v)
	return e
}

func (e *htmlTable) Lang(v string) HTMLTable {
	e.setAttr("lang", v)
	return e
}

func (e *htmlTable) Spellcheck(v bool) HTMLTable {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlTable) Style(k, v string) HTMLTable {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlTable) TabIndex(v int) HTMLTable {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlTable) Title(v string) HTMLTable {
	e.setAttr("title", v)
	return e
}

func (e *htmlTable) OnBlur(h EventHandler) HTMLTable {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlTable) OnChange(h EventHandler) HTMLTable {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlTable) OnClick(h EventHandler) HTMLTable {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlTable) OnContextMenu(h EventHandler) HTMLTable {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlTable) OnCopy(h EventHandler) HTMLTable {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlTable) OnCut(h EventHandler) HTMLTable {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlTable) OnDblClick(h EventHandler) HTMLTable {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlTable) OnDrag(h EventHandler) HTMLTable {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlTable) OnDragEnd(h EventHandler) HTMLTable {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlTable) OnDragEnter(h EventHandler) HTMLTable {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlTable) OnDragLeave(h EventHandler) HTMLTable {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlTable) OnDragOver(h EventHandler) HTMLTable {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlTable) OnDragStart(h EventHandler) HTMLTable {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlTable) OnDrop(h EventHandler) HTMLTable {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlTable) OnFocus(h EventHandler) HTMLTable {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlTable) OnInput(h EventHandler) HTMLTable {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlTable) OnInvalid(h EventHandler) HTMLTable {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlTable) OnKeyDown(h EventHandler) HTMLTable {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlTable) OnKeyPress(h EventHandler) HTMLTable {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlTable) OnKeyup(h EventHandler) HTMLTable {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlTable) OnMouseDown(h EventHandler) HTMLTable {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlTable) OnMouseMove(h EventHandler) HTMLTable {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlTable) OnMouseOut(h EventHandler) HTMLTable {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlTable) OnMouseOver(h EventHandler) HTMLTable {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlTable) OnMouseUp(h EventHandler) HTMLTable {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlTable) OnPaste(h EventHandler) HTMLTable {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlTable) OnReset(h EventHandler) HTMLTable {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlTable) OnScroll(h EventHandler) HTMLTable {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlTable) OnSearch(h EventHandler) HTMLTable {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlTable) OnSelect(h EventHandler) HTMLTable {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlTable) OnSubmit(h EventHandler) HTMLTable {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlTable) OnWheel(h EventHandler) HTMLTable {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLTBody is the interface that describes a <tbody> HTML element.
type HTMLTBody interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLTBody

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLTBody

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTBody

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLTBody

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLTBody

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTBody

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLTBody

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTBody

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTBody

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTBody

	// ID specifies a unique id for an element.
	ID(v string) HTMLTBody

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTBody

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTBody

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTBody

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTBody

	// Title specifies extra information about an element.
	Title(v string) HTMLTBody

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLTBody

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLTBody

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLTBody

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLTBody

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLTBody

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLTBody

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLTBody

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLTBody

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLTBody

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLTBody

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLTBody

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLTBody

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLTBody

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLTBody

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLTBody

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLTBody

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLTBody

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLTBody

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLTBody

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLTBody

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLTBody

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLTBody

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLTBody

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLTBody

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLTBody

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLTBody

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLTBody

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLTBody

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLTBody

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLTBody

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLTBody

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLTBody
}

// TBody returns an HTML element that groups the body content in a table.
func TBody() HTMLTBody {
	e := &htmlTBody{
		elem: elem{
			tag:         "tbody",
			selfClosing: false,
		},
	}

	return e
}

type htmlTBody struct {
	elem
}

func (e *htmlTBody) Body(elems ...UI) HTMLTBody {
	e.setBody(elems...)
	return e
}

func (e *htmlTBody) Text(v interface{}) HTMLTBody {
	return e.Body(Text(v))
}

func (e *htmlTBody) AccessKey(v string) HTMLTBody {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlTBody) Aria(k string, v interface{}) HTMLTBody {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTBody) Class(v string) HTMLTBody {
	e.setAttr("class", v)
	return e
}

func (e *htmlTBody) ContentEditable(v bool) HTMLTBody {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlTBody) DataSet(k string, v interface{}) HTMLTBody {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTBody) Dir(v string) HTMLTBody {
	e.setAttr("dir", v)
	return e
}

func (e *htmlTBody) Draggable(v bool) HTMLTBody {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlTBody) Hidden(v bool) HTMLTBody {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlTBody) ID(v string) HTMLTBody {
	e.setAttr("id", v)
	return e
}

func (e *htmlTBody) Lang(v string) HTMLTBody {
	e.setAttr("lang", v)
	return e
}

func (e *htmlTBody) Spellcheck(v bool) HTMLTBody {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlTBody) Style(k, v string) HTMLTBody {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlTBody) TabIndex(v int) HTMLTBody {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlTBody) Title(v string) HTMLTBody {
	e.setAttr("title", v)
	return e
}

func (e *htmlTBody) OnBlur(h EventHandler) HTMLTBody {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlTBody) OnChange(h EventHandler) HTMLTBody {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlTBody) OnClick(h EventHandler) HTMLTBody {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlTBody) OnContextMenu(h EventHandler) HTMLTBody {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlTBody) OnCopy(h EventHandler) HTMLTBody {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlTBody) OnCut(h EventHandler) HTMLTBody {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlTBody) OnDblClick(h EventHandler) HTMLTBody {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlTBody) OnDrag(h EventHandler) HTMLTBody {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlTBody) OnDragEnd(h EventHandler) HTMLTBody {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlTBody) OnDragEnter(h EventHandler) HTMLTBody {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlTBody) OnDragLeave(h EventHandler) HTMLTBody {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlTBody) OnDragOver(h EventHandler) HTMLTBody {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlTBody) OnDragStart(h EventHandler) HTMLTBody {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlTBody) OnDrop(h EventHandler) HTMLTBody {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlTBody) OnFocus(h EventHandler) HTMLTBody {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlTBody) OnInput(h EventHandler) HTMLTBody {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlTBody) OnInvalid(h EventHandler) HTMLTBody {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlTBody) OnKeyDown(h EventHandler) HTMLTBody {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlTBody) OnKeyPress(h EventHandler) HTMLTBody {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlTBody) OnKeyup(h EventHandler) HTMLTBody {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlTBody) OnMouseDown(h EventHandler) HTMLTBody {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlTBody) OnMouseMove(h EventHandler) HTMLTBody {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlTBody) OnMouseOut(h EventHandler) HTMLTBody {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlTBody) OnMouseOver(h EventHandler) HTMLTBody {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlTBody) OnMouseUp(h EventHandler) HTMLTBody {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlTBody) OnPaste(h EventHandler) HTMLTBody {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlTBody) OnReset(h EventHandler) HTMLTBody {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlTBody) OnScroll(h EventHandler) HTMLTBody {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlTBody) OnSearch(h EventHandler) HTMLTBody {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlTBody) OnSelect(h EventHandler) HTMLTBody {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlTBody) OnSubmit(h EventHandler) HTMLTBody {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlTBody) OnWheel(h EventHandler) HTMLTBody {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLTd is the interface that describes a <td> HTML element.
type HTMLTd interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLTd

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLTd

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTd

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLTd

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLTd

	// ColSpan specifies the number of columns a table cell should span.
	ColSpan(v int) HTMLTd

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTd

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLTd

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTd

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTd

	// Headers specifies one or more headers cells a cell is related to.
	Headers(v string) HTMLTd

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTd

	// ID specifies a unique id for an element.
	ID(v string) HTMLTd

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTd

	// Rowspan specifies the number of rows a table cell should span.
	Rowspan(v int) HTMLTd

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTd

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTd

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTd

	// Title specifies extra information about an element.
	Title(v string) HTMLTd

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLTd

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLTd

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLTd

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLTd

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLTd

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLTd

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLTd

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLTd

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLTd

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLTd

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLTd

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLTd

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLTd

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLTd

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLTd

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLTd

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLTd

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLTd

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLTd

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLTd

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLTd

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLTd

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLTd

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLTd

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLTd

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLTd

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLTd

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLTd

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLTd

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLTd

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLTd

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLTd
}

// Td returns an HTML element that defines a cell in a table.
func Td() HTMLTd {
	e := &htmlTd{
		elem: elem{
			tag:         "td",
			selfClosing: false,
		},
	}

	return e
}

type htmlTd struct {
	elem
}

func (e *htmlTd) Body(elems ...UI) HTMLTd {
	e.setBody(elems...)
	return e
}

func (e *htmlTd) Text(v interface{}) HTMLTd {
	return e.Body(Text(v))
}

func (e *htmlTd) AccessKey(v string) HTMLTd {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlTd) Aria(k string, v interface{}) HTMLTd {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTd) Class(v string) HTMLTd {
	e.setAttr("class", v)
	return e
}

func (e *htmlTd) ColSpan(v int) HTMLTd {
	e.setAttr("colspan", v)
	return e
}

func (e *htmlTd) ContentEditable(v bool) HTMLTd {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlTd) DataSet(k string, v interface{}) HTMLTd {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTd) Dir(v string) HTMLTd {
	e.setAttr("dir", v)
	return e
}

func (e *htmlTd) Draggable(v bool) HTMLTd {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlTd) Headers(v string) HTMLTd {
	e.setAttr("headers", v)
	return e
}

func (e *htmlTd) Hidden(v bool) HTMLTd {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlTd) ID(v string) HTMLTd {
	e.setAttr("id", v)
	return e
}

func (e *htmlTd) Lang(v string) HTMLTd {
	e.setAttr("lang", v)
	return e
}

func (e *htmlTd) Rowspan(v int) HTMLTd {
	e.setAttr("rowspan", v)
	return e
}

func (e *htmlTd) Spellcheck(v bool) HTMLTd {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlTd) Style(k, v string) HTMLTd {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlTd) TabIndex(v int) HTMLTd {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlTd) Title(v string) HTMLTd {
	e.setAttr("title", v)
	return e
}

func (e *htmlTd) OnBlur(h EventHandler) HTMLTd {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlTd) OnChange(h EventHandler) HTMLTd {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlTd) OnClick(h EventHandler) HTMLTd {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlTd) OnContextMenu(h EventHandler) HTMLTd {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlTd) OnCopy(h EventHandler) HTMLTd {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlTd) OnCut(h EventHandler) HTMLTd {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlTd) OnDblClick(h EventHandler) HTMLTd {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlTd) OnDrag(h EventHandler) HTMLTd {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlTd) OnDragEnd(h EventHandler) HTMLTd {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlTd) OnDragEnter(h EventHandler) HTMLTd {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlTd) OnDragLeave(h EventHandler) HTMLTd {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlTd) OnDragOver(h EventHandler) HTMLTd {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlTd) OnDragStart(h EventHandler) HTMLTd {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlTd) OnDrop(h EventHandler) HTMLTd {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlTd) OnFocus(h EventHandler) HTMLTd {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlTd) OnInput(h EventHandler) HTMLTd {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlTd) OnInvalid(h EventHandler) HTMLTd {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlTd) OnKeyDown(h EventHandler) HTMLTd {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlTd) OnKeyPress(h EventHandler) HTMLTd {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlTd) OnKeyup(h EventHandler) HTMLTd {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlTd) OnMouseDown(h EventHandler) HTMLTd {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlTd) OnMouseMove(h EventHandler) HTMLTd {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlTd) OnMouseOut(h EventHandler) HTMLTd {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlTd) OnMouseOver(h EventHandler) HTMLTd {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlTd) OnMouseUp(h EventHandler) HTMLTd {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlTd) OnPaste(h EventHandler) HTMLTd {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlTd) OnReset(h EventHandler) HTMLTd {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlTd) OnScroll(h EventHandler) HTMLTd {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlTd) OnSearch(h EventHandler) HTMLTd {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlTd) OnSelect(h EventHandler) HTMLTd {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlTd) OnSubmit(h EventHandler) HTMLTd {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlTd) OnWheel(h EventHandler) HTMLTd {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLTemplate is the interface that describes a <template> HTML element.
type HTMLTemplate interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLTemplate

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLTemplate

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTemplate

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLTemplate

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLTemplate

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTemplate

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLTemplate

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTemplate

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTemplate

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTemplate

	// ID specifies a unique id for an element.
	ID(v string) HTMLTemplate

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTemplate

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTemplate

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTemplate

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTemplate

	// Title specifies extra information about an element.
	Title(v string) HTMLTemplate
}

// Template returns an HTML element that defines a template.
func Template() HTMLTemplate {
	e := &htmlTemplate{
		elem: elem{
			tag:         "template",
			selfClosing: false,
		},
	}

	return e
}

type htmlTemplate struct {
	elem
}

func (e *htmlTemplate) Body(elems ...UI) HTMLTemplate {
	e.setBody(elems...)
	return e
}

func (e *htmlTemplate) Text(v interface{}) HTMLTemplate {
	return e.Body(Text(v))
}

func (e *htmlTemplate) AccessKey(v string) HTMLTemplate {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlTemplate) Aria(k string, v interface{}) HTMLTemplate {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTemplate) Class(v string) HTMLTemplate {
	e.setAttr("class", v)
	return e
}

func (e *htmlTemplate) ContentEditable(v bool) HTMLTemplate {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlTemplate) DataSet(k string, v interface{}) HTMLTemplate {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTemplate) Dir(v string) HTMLTemplate {
	e.setAttr("dir", v)
	return e
}

func (e *htmlTemplate) Draggable(v bool) HTMLTemplate {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlTemplate) Hidden(v bool) HTMLTemplate {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlTemplate) ID(v string) HTMLTemplate {
	e.setAttr("id", v)
	return e
}

func (e *htmlTemplate) Lang(v string) HTMLTemplate {
	e.setAttr("lang", v)
	return e
}

func (e *htmlTemplate) Spellcheck(v bool) HTMLTemplate {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlTemplate) Style(k, v string) HTMLTemplate {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlTemplate) TabIndex(v int) HTMLTemplate {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlTemplate) Title(v string) HTMLTemplate {
	e.setAttr("title", v)
	return e
}

// HTMLTextarea is the interface that describes a <textarea> HTML element.
type HTMLTextarea interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLTextarea

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLTextarea

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTextarea

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLTextarea

	// AutoFocus specifies that the element should automatically get focus when the page loads.
	AutoFocus(v bool) HTMLTextarea

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLTextarea

	// Cols specifies the visible width of a text area.
	Cols(v int) HTMLTextarea

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTextarea

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLTextarea

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTextarea

	// DirName specifies that the text direction will be submitted.
	DirName(v string) HTMLTextarea

	// Disabled specifies that the specified element/group of elements should be disabled.
	Disabled(v bool) HTMLTextarea

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTextarea

	// Form specifies the name of the form the element belongs to.
	Form(v string) HTMLTextarea

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTextarea

	// ID specifies a unique id for an element.
	ID(v string) HTMLTextarea

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTextarea

	// MaxLength specifies the maximum number of characters allowed in an element.
	MaxLength(v int) HTMLTextarea

	// Name specifies the name of the element.
	Name(v string) HTMLTextarea

	// Placeholder specifies a short hint that describes the expected value of the element.
	Placeholder(v string) HTMLTextarea

	// ReadOnly specifies that the element is read-only.
	ReadOnly(v bool) HTMLTextarea

	// Required specifies that the element must be filled out before submitting the form.
	Required(v bool) HTMLTextarea

	// Rows specifies the visible number of lines in a text area.
	Rows(v int) HTMLTextarea

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTextarea

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTextarea

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTextarea

	// Title specifies extra information about an element.
	Title(v string) HTMLTextarea

	// Wrap specifies how the text in a text area is to be wrapped when submitted in a form.
	Wrap(v string) HTMLTextarea

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLTextarea

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLTextarea

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLTextarea

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLTextarea

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLTextarea

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLTextarea

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLTextarea

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLTextarea

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLTextarea

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLTextarea

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLTextarea

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLTextarea

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLTextarea

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLTextarea

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLTextarea

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLTextarea

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLTextarea

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLTextarea

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLTextarea

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLTextarea

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLTextarea

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLTextarea

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLTextarea

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLTextarea

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLTextarea

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLTextarea

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLTextarea

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLTextarea

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLTextarea

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLTextarea

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLTextarea

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLTextarea
}

// Textarea returns an HTML element that defines a multiline input control (text area).
func Textarea() HTMLTextarea {
	e := &htmlTextarea{
		elem: elem{
			tag:         "textarea",
			selfClosing: false,
		},
	}

	return e
}

type htmlTextarea struct {
	elem
}

func (e *htmlTextarea) Body(elems ...UI) HTMLTextarea {
	e.setBody(elems...)
	return e
}

func (e *htmlTextarea) Text(v interface{}) HTMLTextarea {
	return e.Body(Text(v))
}

func (e *htmlTextarea) AccessKey(v string) HTMLTextarea {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlTextarea) Aria(k string, v interface{}) HTMLTextarea {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTextarea) AutoFocus(v bool) HTMLTextarea {
	e.setAttr("autofocus", v)
	return e
}

func (e *htmlTextarea) Class(v string) HTMLTextarea {
	e.setAttr("class", v)
	return e
}

func (e *htmlTextarea) Cols(v int) HTMLTextarea {
	e.setAttr("cols", v)
	return e
}

func (e *htmlTextarea) ContentEditable(v bool) HTMLTextarea {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlTextarea) DataSet(k string, v interface{}) HTMLTextarea {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTextarea) Dir(v string) HTMLTextarea {
	e.setAttr("dir", v)
	return e
}

func (e *htmlTextarea) DirName(v string) HTMLTextarea {
	e.setAttr("dirname", v)
	return e
}

func (e *htmlTextarea) Disabled(v bool) HTMLTextarea {
	e.setAttr("disabled", v)
	return e
}

func (e *htmlTextarea) Draggable(v bool) HTMLTextarea {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlTextarea) Form(v string) HTMLTextarea {
	e.setAttr("form", v)
	return e
}

func (e *htmlTextarea) Hidden(v bool) HTMLTextarea {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlTextarea) ID(v string) HTMLTextarea {
	e.setAttr("id", v)
	return e
}

func (e *htmlTextarea) Lang(v string) HTMLTextarea {
	e.setAttr("lang", v)
	return e
}

func (e *htmlTextarea) MaxLength(v int) HTMLTextarea {
	e.setAttr("maxlength", v)
	return e
}

func (e *htmlTextarea) Name(v string) HTMLTextarea {
	e.setAttr("name", v)
	return e
}

func (e *htmlTextarea) Placeholder(v string) HTMLTextarea {
	e.setAttr("placeholder", v)
	return e
}

func (e *htmlTextarea) ReadOnly(v bool) HTMLTextarea {
	e.setAttr("readonly", v)
	return e
}

func (e *htmlTextarea) Required(v bool) HTMLTextarea {
	e.setAttr("required", v)
	return e
}

func (e *htmlTextarea) Rows(v int) HTMLTextarea {
	e.setAttr("rows", v)
	return e
}

func (e *htmlTextarea) Spellcheck(v bool) HTMLTextarea {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlTextarea) Style(k, v string) HTMLTextarea {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlTextarea) TabIndex(v int) HTMLTextarea {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlTextarea) Title(v string) HTMLTextarea {
	e.setAttr("title", v)
	return e
}

func (e *htmlTextarea) Wrap(v string) HTMLTextarea {
	e.setAttr("wrap", v)
	return e
}

func (e *htmlTextarea) OnBlur(h EventHandler) HTMLTextarea {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlTextarea) OnChange(h EventHandler) HTMLTextarea {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlTextarea) OnClick(h EventHandler) HTMLTextarea {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlTextarea) OnContextMenu(h EventHandler) HTMLTextarea {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlTextarea) OnCopy(h EventHandler) HTMLTextarea {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlTextarea) OnCut(h EventHandler) HTMLTextarea {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlTextarea) OnDblClick(h EventHandler) HTMLTextarea {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlTextarea) OnDrag(h EventHandler) HTMLTextarea {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlTextarea) OnDragEnd(h EventHandler) HTMLTextarea {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlTextarea) OnDragEnter(h EventHandler) HTMLTextarea {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlTextarea) OnDragLeave(h EventHandler) HTMLTextarea {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlTextarea) OnDragOver(h EventHandler) HTMLTextarea {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlTextarea) OnDragStart(h EventHandler) HTMLTextarea {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlTextarea) OnDrop(h EventHandler) HTMLTextarea {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlTextarea) OnFocus(h EventHandler) HTMLTextarea {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlTextarea) OnInput(h EventHandler) HTMLTextarea {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlTextarea) OnInvalid(h EventHandler) HTMLTextarea {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlTextarea) OnKeyDown(h EventHandler) HTMLTextarea {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlTextarea) OnKeyPress(h EventHandler) HTMLTextarea {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlTextarea) OnKeyup(h EventHandler) HTMLTextarea {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlTextarea) OnMouseDown(h EventHandler) HTMLTextarea {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlTextarea) OnMouseMove(h EventHandler) HTMLTextarea {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlTextarea) OnMouseOut(h EventHandler) HTMLTextarea {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlTextarea) OnMouseOver(h EventHandler) HTMLTextarea {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlTextarea) OnMouseUp(h EventHandler) HTMLTextarea {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlTextarea) OnPaste(h EventHandler) HTMLTextarea {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlTextarea) OnReset(h EventHandler) HTMLTextarea {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlTextarea) OnScroll(h EventHandler) HTMLTextarea {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlTextarea) OnSearch(h EventHandler) HTMLTextarea {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlTextarea) OnSelect(h EventHandler) HTMLTextarea {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlTextarea) OnSubmit(h EventHandler) HTMLTextarea {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlTextarea) OnWheel(h EventHandler) HTMLTextarea {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLTfoot is the interface that describes a <tfoot> HTML element.
type HTMLTfoot interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLTfoot

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLTfoot

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTfoot

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLTfoot

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLTfoot

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTfoot

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLTfoot

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTfoot

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTfoot

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTfoot

	// ID specifies a unique id for an element.
	ID(v string) HTMLTfoot

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTfoot

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTfoot

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTfoot

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTfoot

	// Title specifies extra information about an element.
	Title(v string) HTMLTfoot

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLTfoot

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLTfoot

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLTfoot

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLTfoot

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLTfoot

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLTfoot

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLTfoot

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLTfoot

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLTfoot

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLTfoot

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLTfoot

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLTfoot

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLTfoot

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLTfoot

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLTfoot

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLTfoot

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLTfoot

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLTfoot

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLTfoot

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLTfoot

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLTfoot

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLTfoot

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLTfoot

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLTfoot

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLTfoot

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLTfoot

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLTfoot

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLTfoot

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLTfoot

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLTfoot

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLTfoot

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLTfoot
}

// Tfoot returns an HTML element that groups the footer content in a table.
func Tfoot() HTMLTfoot {
	e := &htmlTfoot{
		elem: elem{
			tag:         "tfoot",
			selfClosing: false,
		},
	}

	return e
}

type htmlTfoot struct {
	elem
}

func (e *htmlTfoot) Body(elems ...UI) HTMLTfoot {
	e.setBody(elems...)
	return e
}

func (e *htmlTfoot) Text(v interface{}) HTMLTfoot {
	return e.Body(Text(v))
}

func (e *htmlTfoot) AccessKey(v string) HTMLTfoot {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlTfoot) Aria(k string, v interface{}) HTMLTfoot {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTfoot) Class(v string) HTMLTfoot {
	e.setAttr("class", v)
	return e
}

func (e *htmlTfoot) ContentEditable(v bool) HTMLTfoot {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlTfoot) DataSet(k string, v interface{}) HTMLTfoot {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTfoot) Dir(v string) HTMLTfoot {
	e.setAttr("dir", v)
	return e
}

func (e *htmlTfoot) Draggable(v bool) HTMLTfoot {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlTfoot) Hidden(v bool) HTMLTfoot {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlTfoot) ID(v string) HTMLTfoot {
	e.setAttr("id", v)
	return e
}

func (e *htmlTfoot) Lang(v string) HTMLTfoot {
	e.setAttr("lang", v)
	return e
}

func (e *htmlTfoot) Spellcheck(v bool) HTMLTfoot {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlTfoot) Style(k, v string) HTMLTfoot {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlTfoot) TabIndex(v int) HTMLTfoot {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlTfoot) Title(v string) HTMLTfoot {
	e.setAttr("title", v)
	return e
}

func (e *htmlTfoot) OnBlur(h EventHandler) HTMLTfoot {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlTfoot) OnChange(h EventHandler) HTMLTfoot {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlTfoot) OnClick(h EventHandler) HTMLTfoot {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlTfoot) OnContextMenu(h EventHandler) HTMLTfoot {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlTfoot) OnCopy(h EventHandler) HTMLTfoot {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlTfoot) OnCut(h EventHandler) HTMLTfoot {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlTfoot) OnDblClick(h EventHandler) HTMLTfoot {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlTfoot) OnDrag(h EventHandler) HTMLTfoot {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlTfoot) OnDragEnd(h EventHandler) HTMLTfoot {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlTfoot) OnDragEnter(h EventHandler) HTMLTfoot {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlTfoot) OnDragLeave(h EventHandler) HTMLTfoot {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlTfoot) OnDragOver(h EventHandler) HTMLTfoot {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlTfoot) OnDragStart(h EventHandler) HTMLTfoot {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlTfoot) OnDrop(h EventHandler) HTMLTfoot {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlTfoot) OnFocus(h EventHandler) HTMLTfoot {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlTfoot) OnInput(h EventHandler) HTMLTfoot {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlTfoot) OnInvalid(h EventHandler) HTMLTfoot {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlTfoot) OnKeyDown(h EventHandler) HTMLTfoot {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlTfoot) OnKeyPress(h EventHandler) HTMLTfoot {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlTfoot) OnKeyup(h EventHandler) HTMLTfoot {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlTfoot) OnMouseDown(h EventHandler) HTMLTfoot {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlTfoot) OnMouseMove(h EventHandler) HTMLTfoot {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlTfoot) OnMouseOut(h EventHandler) HTMLTfoot {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlTfoot) OnMouseOver(h EventHandler) HTMLTfoot {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlTfoot) OnMouseUp(h EventHandler) HTMLTfoot {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlTfoot) OnPaste(h EventHandler) HTMLTfoot {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlTfoot) OnReset(h EventHandler) HTMLTfoot {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlTfoot) OnScroll(h EventHandler) HTMLTfoot {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlTfoot) OnSearch(h EventHandler) HTMLTfoot {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlTfoot) OnSelect(h EventHandler) HTMLTfoot {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlTfoot) OnSubmit(h EventHandler) HTMLTfoot {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlTfoot) OnWheel(h EventHandler) HTMLTfoot {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLTh is the interface that describes a <th> HTML element.
type HTMLTh interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLTh

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLTh

	// Accept specifies an abbreviated version of the content in a header cell.
	Accept(v string) HTMLTh

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTh

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLTh

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLTh

	// ColSpan specifies the number of columns a table cell should span.
	ColSpan(v int) HTMLTh

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTh

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLTh

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTh

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTh

	// Headers specifies one or more headers cells a cell is related to.
	Headers(v string) HTMLTh

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTh

	// ID specifies a unique id for an element.
	ID(v string) HTMLTh

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTh

	// Rowspan specifies the number of rows a table cell should span.
	Rowspan(v int) HTMLTh

	// Scope specifies whether a header cell is a header for a column, row, or group of columns or rows.
	Scope(v string) HTMLTh

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTh

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTh

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTh

	// Title specifies extra information about an element.
	Title(v string) HTMLTh

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLTh

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLTh

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLTh

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLTh

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLTh

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLTh

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLTh

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLTh

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLTh

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLTh

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLTh

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLTh

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLTh

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLTh

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLTh

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLTh

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLTh

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLTh

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLTh

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLTh

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLTh

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLTh

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLTh

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLTh

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLTh

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLTh

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLTh

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLTh

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLTh

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLTh

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLTh

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLTh
}

// Th returns an HTML element that defines a header cell in a table.
func Th() HTMLTh {
	e := &htmlTh{
		elem: elem{
			tag:         "th",
			selfClosing: false,
		},
	}

	return e
}

type htmlTh struct {
	elem
}

func (e *htmlTh) Body(elems ...UI) HTMLTh {
	e.setBody(elems...)
	return e
}

func (e *htmlTh) Text(v interface{}) HTMLTh {
	return e.Body(Text(v))
}

func (e *htmlTh) Accept(v string) HTMLTh {
	e.setAttr("accept", v)
	return e
}

func (e *htmlTh) AccessKey(v string) HTMLTh {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlTh) Aria(k string, v interface{}) HTMLTh {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTh) Class(v string) HTMLTh {
	e.setAttr("class", v)
	return e
}

func (e *htmlTh) ColSpan(v int) HTMLTh {
	e.setAttr("colspan", v)
	return e
}

func (e *htmlTh) ContentEditable(v bool) HTMLTh {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlTh) DataSet(k string, v interface{}) HTMLTh {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTh) Dir(v string) HTMLTh {
	e.setAttr("dir", v)
	return e
}

func (e *htmlTh) Draggable(v bool) HTMLTh {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlTh) Headers(v string) HTMLTh {
	e.setAttr("headers", v)
	return e
}

func (e *htmlTh) Hidden(v bool) HTMLTh {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlTh) ID(v string) HTMLTh {
	e.setAttr("id", v)
	return e
}

func (e *htmlTh) Lang(v string) HTMLTh {
	e.setAttr("lang", v)
	return e
}

func (e *htmlTh) Rowspan(v int) HTMLTh {
	e.setAttr("rowspan", v)
	return e
}

func (e *htmlTh) Scope(v string) HTMLTh {
	e.setAttr("scope", v)
	return e
}

func (e *htmlTh) Spellcheck(v bool) HTMLTh {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlTh) Style(k, v string) HTMLTh {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlTh) TabIndex(v int) HTMLTh {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlTh) Title(v string) HTMLTh {
	e.setAttr("title", v)
	return e
}

func (e *htmlTh) OnBlur(h EventHandler) HTMLTh {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlTh) OnChange(h EventHandler) HTMLTh {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlTh) OnClick(h EventHandler) HTMLTh {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlTh) OnContextMenu(h EventHandler) HTMLTh {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlTh) OnCopy(h EventHandler) HTMLTh {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlTh) OnCut(h EventHandler) HTMLTh {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlTh) OnDblClick(h EventHandler) HTMLTh {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlTh) OnDrag(h EventHandler) HTMLTh {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlTh) OnDragEnd(h EventHandler) HTMLTh {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlTh) OnDragEnter(h EventHandler) HTMLTh {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlTh) OnDragLeave(h EventHandler) HTMLTh {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlTh) OnDragOver(h EventHandler) HTMLTh {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlTh) OnDragStart(h EventHandler) HTMLTh {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlTh) OnDrop(h EventHandler) HTMLTh {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlTh) OnFocus(h EventHandler) HTMLTh {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlTh) OnInput(h EventHandler) HTMLTh {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlTh) OnInvalid(h EventHandler) HTMLTh {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlTh) OnKeyDown(h EventHandler) HTMLTh {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlTh) OnKeyPress(h EventHandler) HTMLTh {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlTh) OnKeyup(h EventHandler) HTMLTh {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlTh) OnMouseDown(h EventHandler) HTMLTh {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlTh) OnMouseMove(h EventHandler) HTMLTh {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlTh) OnMouseOut(h EventHandler) HTMLTh {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlTh) OnMouseOver(h EventHandler) HTMLTh {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlTh) OnMouseUp(h EventHandler) HTMLTh {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlTh) OnPaste(h EventHandler) HTMLTh {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlTh) OnReset(h EventHandler) HTMLTh {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlTh) OnScroll(h EventHandler) HTMLTh {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlTh) OnSearch(h EventHandler) HTMLTh {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlTh) OnSelect(h EventHandler) HTMLTh {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlTh) OnSubmit(h EventHandler) HTMLTh {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlTh) OnWheel(h EventHandler) HTMLTh {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLTHead is the interface that describes a <thead> HTML element.
type HTMLTHead interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLTHead

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLTHead

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTHead

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLTHead

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLTHead

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTHead

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLTHead

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTHead

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTHead

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTHead

	// ID specifies a unique id for an element.
	ID(v string) HTMLTHead

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTHead

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTHead

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTHead

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTHead

	// Title specifies extra information about an element.
	Title(v string) HTMLTHead

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLTHead

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLTHead

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLTHead

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLTHead

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLTHead

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLTHead

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLTHead

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLTHead

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLTHead

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLTHead

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLTHead

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLTHead

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLTHead

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLTHead

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLTHead

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLTHead

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLTHead

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLTHead

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLTHead

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLTHead

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLTHead

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLTHead

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLTHead

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLTHead

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLTHead

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLTHead

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLTHead

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLTHead

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLTHead

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLTHead

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLTHead

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLTHead
}

// THead returns an HTML element that groups the header content in a table
func THead() HTMLTHead {
	e := &htmlTHead{
		elem: elem{
			tag:         "thead",
			selfClosing: false,
		},
	}

	return e
}

type htmlTHead struct {
	elem
}

func (e *htmlTHead) Body(elems ...UI) HTMLTHead {
	e.setBody(elems...)
	return e
}

func (e *htmlTHead) Text(v interface{}) HTMLTHead {
	return e.Body(Text(v))
}

func (e *htmlTHead) AccessKey(v string) HTMLTHead {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlTHead) Aria(k string, v interface{}) HTMLTHead {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTHead) Class(v string) HTMLTHead {
	e.setAttr("class", v)
	return e
}

func (e *htmlTHead) ContentEditable(v bool) HTMLTHead {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlTHead) DataSet(k string, v interface{}) HTMLTHead {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTHead) Dir(v string) HTMLTHead {
	e.setAttr("dir", v)
	return e
}

func (e *htmlTHead) Draggable(v bool) HTMLTHead {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlTHead) Hidden(v bool) HTMLTHead {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlTHead) ID(v string) HTMLTHead {
	e.setAttr("id", v)
	return e
}

func (e *htmlTHead) Lang(v string) HTMLTHead {
	e.setAttr("lang", v)
	return e
}

func (e *htmlTHead) Spellcheck(v bool) HTMLTHead {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlTHead) Style(k, v string) HTMLTHead {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlTHead) TabIndex(v int) HTMLTHead {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlTHead) Title(v string) HTMLTHead {
	e.setAttr("title", v)
	return e
}

func (e *htmlTHead) OnBlur(h EventHandler) HTMLTHead {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlTHead) OnChange(h EventHandler) HTMLTHead {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlTHead) OnClick(h EventHandler) HTMLTHead {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlTHead) OnContextMenu(h EventHandler) HTMLTHead {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlTHead) OnCopy(h EventHandler) HTMLTHead {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlTHead) OnCut(h EventHandler) HTMLTHead {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlTHead) OnDblClick(h EventHandler) HTMLTHead {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlTHead) OnDrag(h EventHandler) HTMLTHead {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlTHead) OnDragEnd(h EventHandler) HTMLTHead {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlTHead) OnDragEnter(h EventHandler) HTMLTHead {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlTHead) OnDragLeave(h EventHandler) HTMLTHead {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlTHead) OnDragOver(h EventHandler) HTMLTHead {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlTHead) OnDragStart(h EventHandler) HTMLTHead {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlTHead) OnDrop(h EventHandler) HTMLTHead {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlTHead) OnFocus(h EventHandler) HTMLTHead {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlTHead) OnInput(h EventHandler) HTMLTHead {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlTHead) OnInvalid(h EventHandler) HTMLTHead {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlTHead) OnKeyDown(h EventHandler) HTMLTHead {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlTHead) OnKeyPress(h EventHandler) HTMLTHead {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlTHead) OnKeyup(h EventHandler) HTMLTHead {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlTHead) OnMouseDown(h EventHandler) HTMLTHead {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlTHead) OnMouseMove(h EventHandler) HTMLTHead {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlTHead) OnMouseOut(h EventHandler) HTMLTHead {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlTHead) OnMouseOver(h EventHandler) HTMLTHead {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlTHead) OnMouseUp(h EventHandler) HTMLTHead {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlTHead) OnPaste(h EventHandler) HTMLTHead {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlTHead) OnReset(h EventHandler) HTMLTHead {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlTHead) OnScroll(h EventHandler) HTMLTHead {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlTHead) OnSearch(h EventHandler) HTMLTHead {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlTHead) OnSelect(h EventHandler) HTMLTHead {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlTHead) OnSubmit(h EventHandler) HTMLTHead {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlTHead) OnWheel(h EventHandler) HTMLTHead {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLTime is the interface that describes a <time> HTML element.
type HTMLTime interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLTime

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLTime

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTime

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLTime

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLTime

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTime

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLTime

	// DateTime specifies the date and time.
	DateTime(v string) HTMLTime

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTime

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTime

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTime

	// ID specifies a unique id for an element.
	ID(v string) HTMLTime

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTime

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTime

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTime

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTime

	// Title specifies extra information about an element.
	Title(v string) HTMLTime

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLTime

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLTime

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLTime

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLTime

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLTime

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLTime

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLTime

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLTime

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLTime

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLTime

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLTime

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLTime

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLTime

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLTime

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLTime

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLTime

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLTime

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLTime

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLTime

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLTime

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLTime

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLTime

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLTime

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLTime

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLTime

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLTime

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLTime

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLTime

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLTime

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLTime

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLTime

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLTime
}

// Time returns an HTML element that defines a date/time.
func Time() HTMLTime {
	e := &htmlTime{
		elem: elem{
			tag:         "time",
			selfClosing: false,
		},
	}

	return e
}

type htmlTime struct {
	elem
}

func (e *htmlTime) Body(elems ...UI) HTMLTime {
	e.setBody(elems...)
	return e
}

func (e *htmlTime) Text(v interface{}) HTMLTime {
	return e.Body(Text(v))
}

func (e *htmlTime) AccessKey(v string) HTMLTime {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlTime) Aria(k string, v interface{}) HTMLTime {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTime) Class(v string) HTMLTime {
	e.setAttr("class", v)
	return e
}

func (e *htmlTime) ContentEditable(v bool) HTMLTime {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlTime) DataSet(k string, v interface{}) HTMLTime {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTime) DateTime(v string) HTMLTime {
	e.setAttr("datetime", v)
	return e
}

func (e *htmlTime) Dir(v string) HTMLTime {
	e.setAttr("dir", v)
	return e
}

func (e *htmlTime) Draggable(v bool) HTMLTime {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlTime) Hidden(v bool) HTMLTime {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlTime) ID(v string) HTMLTime {
	e.setAttr("id", v)
	return e
}

func (e *htmlTime) Lang(v string) HTMLTime {
	e.setAttr("lang", v)
	return e
}

func (e *htmlTime) Spellcheck(v bool) HTMLTime {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlTime) Style(k, v string) HTMLTime {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlTime) TabIndex(v int) HTMLTime {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlTime) Title(v string) HTMLTime {
	e.setAttr("title", v)
	return e
}

func (e *htmlTime) OnBlur(h EventHandler) HTMLTime {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlTime) OnChange(h EventHandler) HTMLTime {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlTime) OnClick(h EventHandler) HTMLTime {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlTime) OnContextMenu(h EventHandler) HTMLTime {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlTime) OnCopy(h EventHandler) HTMLTime {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlTime) OnCut(h EventHandler) HTMLTime {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlTime) OnDblClick(h EventHandler) HTMLTime {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlTime) OnDrag(h EventHandler) HTMLTime {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlTime) OnDragEnd(h EventHandler) HTMLTime {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlTime) OnDragEnter(h EventHandler) HTMLTime {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlTime) OnDragLeave(h EventHandler) HTMLTime {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlTime) OnDragOver(h EventHandler) HTMLTime {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlTime) OnDragStart(h EventHandler) HTMLTime {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlTime) OnDrop(h EventHandler) HTMLTime {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlTime) OnFocus(h EventHandler) HTMLTime {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlTime) OnInput(h EventHandler) HTMLTime {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlTime) OnInvalid(h EventHandler) HTMLTime {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlTime) OnKeyDown(h EventHandler) HTMLTime {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlTime) OnKeyPress(h EventHandler) HTMLTime {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlTime) OnKeyup(h EventHandler) HTMLTime {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlTime) OnMouseDown(h EventHandler) HTMLTime {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlTime) OnMouseMove(h EventHandler) HTMLTime {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlTime) OnMouseOut(h EventHandler) HTMLTime {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlTime) OnMouseOver(h EventHandler) HTMLTime {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlTime) OnMouseUp(h EventHandler) HTMLTime {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlTime) OnPaste(h EventHandler) HTMLTime {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlTime) OnReset(h EventHandler) HTMLTime {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlTime) OnScroll(h EventHandler) HTMLTime {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlTime) OnSearch(h EventHandler) HTMLTime {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlTime) OnSelect(h EventHandler) HTMLTime {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlTime) OnSubmit(h EventHandler) HTMLTime {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlTime) OnWheel(h EventHandler) HTMLTime {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLTitle is the interface that describes a <title> HTML element.
type HTMLTitle interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLTitle

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLTitle

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTitle

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLTitle

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLTitle

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTitle

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLTitle

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTitle

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTitle

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTitle

	// ID specifies a unique id for an element.
	ID(v string) HTMLTitle

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTitle

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTitle

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTitle

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTitle

	// Title specifies extra information about an element.
	Title(v string) HTMLTitle
}

// Title returns an HTML element that defines a title for the document.
func Title() HTMLTitle {
	e := &htmlTitle{
		elem: elem{
			tag:         "title",
			selfClosing: false,
		},
	}

	return e
}

type htmlTitle struct {
	elem
}

func (e *htmlTitle) Body(elems ...UI) HTMLTitle {
	e.setBody(elems...)
	return e
}

func (e *htmlTitle) Text(v interface{}) HTMLTitle {
	return e.Body(Text(v))
}

func (e *htmlTitle) AccessKey(v string) HTMLTitle {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlTitle) Aria(k string, v interface{}) HTMLTitle {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTitle) Class(v string) HTMLTitle {
	e.setAttr("class", v)
	return e
}

func (e *htmlTitle) ContentEditable(v bool) HTMLTitle {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlTitle) DataSet(k string, v interface{}) HTMLTitle {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTitle) Dir(v string) HTMLTitle {
	e.setAttr("dir", v)
	return e
}

func (e *htmlTitle) Draggable(v bool) HTMLTitle {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlTitle) Hidden(v bool) HTMLTitle {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlTitle) ID(v string) HTMLTitle {
	e.setAttr("id", v)
	return e
}

func (e *htmlTitle) Lang(v string) HTMLTitle {
	e.setAttr("lang", v)
	return e
}

func (e *htmlTitle) Spellcheck(v bool) HTMLTitle {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlTitle) Style(k, v string) HTMLTitle {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlTitle) TabIndex(v int) HTMLTitle {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlTitle) Title(v string) HTMLTitle {
	e.setAttr("title", v)
	return e
}

// HTMLTr is the interface that describes a <tr> HTML element.
type HTMLTr interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLTr

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLTr

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLTr

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLTr

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLTr

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLTr

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLTr

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLTr

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLTr

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLTr

	// ID specifies a unique id for an element.
	ID(v string) HTMLTr

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLTr

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLTr

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLTr

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLTr

	// Title specifies extra information about an element.
	Title(v string) HTMLTr

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLTr

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLTr

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLTr

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLTr

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLTr

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLTr

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLTr

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLTr

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLTr

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLTr

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLTr

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLTr

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLTr

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLTr

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLTr

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLTr

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLTr

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLTr

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLTr

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLTr

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLTr

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLTr

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLTr

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLTr

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLTr

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLTr

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLTr

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLTr

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLTr

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLTr

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLTr

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLTr
}

// Tr returns an HTML element that defines a row in a table.
func Tr() HTMLTr {
	e := &htmlTr{
		elem: elem{
			tag:         "tr",
			selfClosing: false,
		},
	}

	return e
}

type htmlTr struct {
	elem
}

func (e *htmlTr) Body(elems ...UI) HTMLTr {
	e.setBody(elems...)
	return e
}

func (e *htmlTr) Text(v interface{}) HTMLTr {
	return e.Body(Text(v))
}

func (e *htmlTr) AccessKey(v string) HTMLTr {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlTr) Aria(k string, v interface{}) HTMLTr {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTr) Class(v string) HTMLTr {
	e.setAttr("class", v)
	return e
}

func (e *htmlTr) ContentEditable(v bool) HTMLTr {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlTr) DataSet(k string, v interface{}) HTMLTr {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlTr) Dir(v string) HTMLTr {
	e.setAttr("dir", v)
	return e
}

func (e *htmlTr) Draggable(v bool) HTMLTr {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlTr) Hidden(v bool) HTMLTr {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlTr) ID(v string) HTMLTr {
	e.setAttr("id", v)
	return e
}

func (e *htmlTr) Lang(v string) HTMLTr {
	e.setAttr("lang", v)
	return e
}

func (e *htmlTr) Spellcheck(v bool) HTMLTr {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlTr) Style(k, v string) HTMLTr {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlTr) TabIndex(v int) HTMLTr {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlTr) Title(v string) HTMLTr {
	e.setAttr("title", v)
	return e
}

func (e *htmlTr) OnBlur(h EventHandler) HTMLTr {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlTr) OnChange(h EventHandler) HTMLTr {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlTr) OnClick(h EventHandler) HTMLTr {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlTr) OnContextMenu(h EventHandler) HTMLTr {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlTr) OnCopy(h EventHandler) HTMLTr {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlTr) OnCut(h EventHandler) HTMLTr {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlTr) OnDblClick(h EventHandler) HTMLTr {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlTr) OnDrag(h EventHandler) HTMLTr {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlTr) OnDragEnd(h EventHandler) HTMLTr {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlTr) OnDragEnter(h EventHandler) HTMLTr {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlTr) OnDragLeave(h EventHandler) HTMLTr {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlTr) OnDragOver(h EventHandler) HTMLTr {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlTr) OnDragStart(h EventHandler) HTMLTr {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlTr) OnDrop(h EventHandler) HTMLTr {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlTr) OnFocus(h EventHandler) HTMLTr {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlTr) OnInput(h EventHandler) HTMLTr {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlTr) OnInvalid(h EventHandler) HTMLTr {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlTr) OnKeyDown(h EventHandler) HTMLTr {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlTr) OnKeyPress(h EventHandler) HTMLTr {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlTr) OnKeyup(h EventHandler) HTMLTr {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlTr) OnMouseDown(h EventHandler) HTMLTr {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlTr) OnMouseMove(h EventHandler) HTMLTr {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlTr) OnMouseOut(h EventHandler) HTMLTr {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlTr) OnMouseOver(h EventHandler) HTMLTr {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlTr) OnMouseUp(h EventHandler) HTMLTr {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlTr) OnPaste(h EventHandler) HTMLTr {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlTr) OnReset(h EventHandler) HTMLTr {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlTr) OnScroll(h EventHandler) HTMLTr {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlTr) OnSearch(h EventHandler) HTMLTr {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlTr) OnSelect(h EventHandler) HTMLTr {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlTr) OnSubmit(h EventHandler) HTMLTr {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlTr) OnWheel(h EventHandler) HTMLTr {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLU is the interface that describes a <u> HTML element.
type HTMLU interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLU

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLU

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLU

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLU

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLU

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLU

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLU

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLU

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLU

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLU

	// ID specifies a unique id for an element.
	ID(v string) HTMLU

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLU

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLU

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLU

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLU

	// Title specifies extra information about an element.
	Title(v string) HTMLU

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLU

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLU

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLU

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLU

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLU

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLU

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLU

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLU

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLU

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLU

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLU

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLU

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLU

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLU

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLU

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLU

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLU

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLU

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLU

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLU

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLU

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLU

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLU

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLU

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLU

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLU

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLU

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLU

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLU

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLU

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLU

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLU
}

// U returns an HTML element that defines text that should be stylistically different from normal text.
func U() HTMLU {
	e := &htmlU{
		elem: elem{
			tag:         "u",
			selfClosing: false,
		},
	}

	return e
}

type htmlU struct {
	elem
}

func (e *htmlU) Body(elems ...UI) HTMLU {
	e.setBody(elems...)
	return e
}

func (e *htmlU) Text(v interface{}) HTMLU {
	return e.Body(Text(v))
}

func (e *htmlU) AccessKey(v string) HTMLU {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlU) Aria(k string, v interface{}) HTMLU {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlU) Class(v string) HTMLU {
	e.setAttr("class", v)
	return e
}

func (e *htmlU) ContentEditable(v bool) HTMLU {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlU) DataSet(k string, v interface{}) HTMLU {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlU) Dir(v string) HTMLU {
	e.setAttr("dir", v)
	return e
}

func (e *htmlU) Draggable(v bool) HTMLU {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlU) Hidden(v bool) HTMLU {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlU) ID(v string) HTMLU {
	e.setAttr("id", v)
	return e
}

func (e *htmlU) Lang(v string) HTMLU {
	e.setAttr("lang", v)
	return e
}

func (e *htmlU) Spellcheck(v bool) HTMLU {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlU) Style(k, v string) HTMLU {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlU) TabIndex(v int) HTMLU {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlU) Title(v string) HTMLU {
	e.setAttr("title", v)
	return e
}

func (e *htmlU) OnBlur(h EventHandler) HTMLU {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlU) OnChange(h EventHandler) HTMLU {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlU) OnClick(h EventHandler) HTMLU {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlU) OnContextMenu(h EventHandler) HTMLU {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlU) OnCopy(h EventHandler) HTMLU {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlU) OnCut(h EventHandler) HTMLU {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlU) OnDblClick(h EventHandler) HTMLU {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlU) OnDrag(h EventHandler) HTMLU {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlU) OnDragEnd(h EventHandler) HTMLU {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlU) OnDragEnter(h EventHandler) HTMLU {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlU) OnDragLeave(h EventHandler) HTMLU {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlU) OnDragOver(h EventHandler) HTMLU {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlU) OnDragStart(h EventHandler) HTMLU {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlU) OnDrop(h EventHandler) HTMLU {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlU) OnFocus(h EventHandler) HTMLU {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlU) OnInput(h EventHandler) HTMLU {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlU) OnInvalid(h EventHandler) HTMLU {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlU) OnKeyDown(h EventHandler) HTMLU {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlU) OnKeyPress(h EventHandler) HTMLU {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlU) OnKeyup(h EventHandler) HTMLU {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlU) OnMouseDown(h EventHandler) HTMLU {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlU) OnMouseMove(h EventHandler) HTMLU {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlU) OnMouseOut(h EventHandler) HTMLU {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlU) OnMouseOver(h EventHandler) HTMLU {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlU) OnMouseUp(h EventHandler) HTMLU {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlU) OnPaste(h EventHandler) HTMLU {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlU) OnReset(h EventHandler) HTMLU {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlU) OnScroll(h EventHandler) HTMLU {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlU) OnSearch(h EventHandler) HTMLU {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlU) OnSelect(h EventHandler) HTMLU {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlU) OnSubmit(h EventHandler) HTMLU {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlU) OnWheel(h EventHandler) HTMLU {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLUl is the interface that describes a <ul> HTML element.
type HTMLUl interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLUl

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLUl

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLUl

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLUl

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLUl

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLUl

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLUl

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLUl

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLUl

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLUl

	// ID specifies a unique id for an element.
	ID(v string) HTMLUl

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLUl

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLUl

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLUl

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLUl

	// Title specifies extra information about an element.
	Title(v string) HTMLUl

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLUl

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLUl

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLUl

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLUl

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLUl

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLUl

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLUl

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLUl

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLUl

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLUl

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLUl

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLUl

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLUl

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLUl

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLUl

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLUl

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLUl

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLUl

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLUl

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLUl

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLUl

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLUl

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLUl

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLUl

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLUl

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLUl

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLUl

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLUl

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLUl

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLUl

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLUl

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLUl
}

// Ul returns an HTML element that defines an unordered list.
func Ul() HTMLUl {
	e := &htmlUl{
		elem: elem{
			tag:         "ul",
			selfClosing: false,
		},
	}

	return e
}

type htmlUl struct {
	elem
}

func (e *htmlUl) Body(elems ...UI) HTMLUl {
	e.setBody(elems...)
	return e
}

func (e *htmlUl) Text(v interface{}) HTMLUl {
	return e.Body(Text(v))
}

func (e *htmlUl) AccessKey(v string) HTMLUl {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlUl) Aria(k string, v interface{}) HTMLUl {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlUl) Class(v string) HTMLUl {
	e.setAttr("class", v)
	return e
}

func (e *htmlUl) ContentEditable(v bool) HTMLUl {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlUl) DataSet(k string, v interface{}) HTMLUl {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlUl) Dir(v string) HTMLUl {
	e.setAttr("dir", v)
	return e
}

func (e *htmlUl) Draggable(v bool) HTMLUl {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlUl) Hidden(v bool) HTMLUl {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlUl) ID(v string) HTMLUl {
	e.setAttr("id", v)
	return e
}

func (e *htmlUl) Lang(v string) HTMLUl {
	e.setAttr("lang", v)
	return e
}

func (e *htmlUl) Spellcheck(v bool) HTMLUl {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlUl) Style(k, v string) HTMLUl {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlUl) TabIndex(v int) HTMLUl {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlUl) Title(v string) HTMLUl {
	e.setAttr("title", v)
	return e
}

func (e *htmlUl) OnBlur(h EventHandler) HTMLUl {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlUl) OnChange(h EventHandler) HTMLUl {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlUl) OnClick(h EventHandler) HTMLUl {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlUl) OnContextMenu(h EventHandler) HTMLUl {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlUl) OnCopy(h EventHandler) HTMLUl {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlUl) OnCut(h EventHandler) HTMLUl {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlUl) OnDblClick(h EventHandler) HTMLUl {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlUl) OnDrag(h EventHandler) HTMLUl {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlUl) OnDragEnd(h EventHandler) HTMLUl {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlUl) OnDragEnter(h EventHandler) HTMLUl {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlUl) OnDragLeave(h EventHandler) HTMLUl {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlUl) OnDragOver(h EventHandler) HTMLUl {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlUl) OnDragStart(h EventHandler) HTMLUl {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlUl) OnDrop(h EventHandler) HTMLUl {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlUl) OnFocus(h EventHandler) HTMLUl {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlUl) OnInput(h EventHandler) HTMLUl {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlUl) OnInvalid(h EventHandler) HTMLUl {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlUl) OnKeyDown(h EventHandler) HTMLUl {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlUl) OnKeyPress(h EventHandler) HTMLUl {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlUl) OnKeyup(h EventHandler) HTMLUl {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlUl) OnMouseDown(h EventHandler) HTMLUl {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlUl) OnMouseMove(h EventHandler) HTMLUl {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlUl) OnMouseOut(h EventHandler) HTMLUl {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlUl) OnMouseOver(h EventHandler) HTMLUl {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlUl) OnMouseUp(h EventHandler) HTMLUl {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlUl) OnPaste(h EventHandler) HTMLUl {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlUl) OnReset(h EventHandler) HTMLUl {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlUl) OnScroll(h EventHandler) HTMLUl {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlUl) OnSearch(h EventHandler) HTMLUl {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlUl) OnSelect(h EventHandler) HTMLUl {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlUl) OnSubmit(h EventHandler) HTMLUl {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlUl) OnWheel(h EventHandler) HTMLUl {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLVar is the interface that describes a <var> HTML element.
type HTMLVar interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLVar

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLVar

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLVar

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLVar

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLVar

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLVar

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLVar

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLVar

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLVar

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLVar

	// ID specifies a unique id for an element.
	ID(v string) HTMLVar

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLVar

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLVar

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLVar

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLVar

	// Title specifies extra information about an element.
	Title(v string) HTMLVar

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLVar

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLVar

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLVar

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLVar

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLVar

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLVar

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLVar

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLVar

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLVar

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLVar

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLVar

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLVar

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLVar

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLVar

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLVar

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLVar

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLVar

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLVar

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLVar

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLVar

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLVar

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLVar

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLVar

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLVar

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLVar

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLVar

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLVar

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLVar

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLVar

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLVar

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLVar

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLVar
}

// Var returns an HTML element that defines a variable.
func Var() HTMLVar {
	e := &htmlVar{
		elem: elem{
			tag:         "var",
			selfClosing: false,
		},
	}

	return e
}

type htmlVar struct {
	elem
}

func (e *htmlVar) Body(elems ...UI) HTMLVar {
	e.setBody(elems...)
	return e
}

func (e *htmlVar) Text(v interface{}) HTMLVar {
	return e.Body(Text(v))
}

func (e *htmlVar) AccessKey(v string) HTMLVar {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlVar) Aria(k string, v interface{}) HTMLVar {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlVar) Class(v string) HTMLVar {
	e.setAttr("class", v)
	return e
}

func (e *htmlVar) ContentEditable(v bool) HTMLVar {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlVar) DataSet(k string, v interface{}) HTMLVar {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlVar) Dir(v string) HTMLVar {
	e.setAttr("dir", v)
	return e
}

func (e *htmlVar) Draggable(v bool) HTMLVar {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlVar) Hidden(v bool) HTMLVar {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlVar) ID(v string) HTMLVar {
	e.setAttr("id", v)
	return e
}

func (e *htmlVar) Lang(v string) HTMLVar {
	e.setAttr("lang", v)
	return e
}

func (e *htmlVar) Spellcheck(v bool) HTMLVar {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlVar) Style(k, v string) HTMLVar {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlVar) TabIndex(v int) HTMLVar {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlVar) Title(v string) HTMLVar {
	e.setAttr("title", v)
	return e
}

func (e *htmlVar) OnBlur(h EventHandler) HTMLVar {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlVar) OnChange(h EventHandler) HTMLVar {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlVar) OnClick(h EventHandler) HTMLVar {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlVar) OnContextMenu(h EventHandler) HTMLVar {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlVar) OnCopy(h EventHandler) HTMLVar {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlVar) OnCut(h EventHandler) HTMLVar {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlVar) OnDblClick(h EventHandler) HTMLVar {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlVar) OnDrag(h EventHandler) HTMLVar {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlVar) OnDragEnd(h EventHandler) HTMLVar {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlVar) OnDragEnter(h EventHandler) HTMLVar {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlVar) OnDragLeave(h EventHandler) HTMLVar {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlVar) OnDragOver(h EventHandler) HTMLVar {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlVar) OnDragStart(h EventHandler) HTMLVar {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlVar) OnDrop(h EventHandler) HTMLVar {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlVar) OnFocus(h EventHandler) HTMLVar {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlVar) OnInput(h EventHandler) HTMLVar {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlVar) OnInvalid(h EventHandler) HTMLVar {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlVar) OnKeyDown(h EventHandler) HTMLVar {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlVar) OnKeyPress(h EventHandler) HTMLVar {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlVar) OnKeyup(h EventHandler) HTMLVar {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlVar) OnMouseDown(h EventHandler) HTMLVar {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlVar) OnMouseMove(h EventHandler) HTMLVar {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlVar) OnMouseOut(h EventHandler) HTMLVar {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlVar) OnMouseOver(h EventHandler) HTMLVar {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlVar) OnMouseUp(h EventHandler) HTMLVar {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlVar) OnPaste(h EventHandler) HTMLVar {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlVar) OnReset(h EventHandler) HTMLVar {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlVar) OnScroll(h EventHandler) HTMLVar {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlVar) OnSearch(h EventHandler) HTMLVar {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlVar) OnSelect(h EventHandler) HTMLVar {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlVar) OnSubmit(h EventHandler) HTMLVar {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlVar) OnWheel(h EventHandler) HTMLVar {
	e.setEventHandler("wheel", h)
	return e
}

// HTMLVideo is the interface that describes a <video> HTML element.
type HTMLVideo interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLVideo

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLVideo

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLVideo

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLVideo

	// AutoPlay specifies that the audio/video will start playing as soon as it is ready.
	AutoPlay(v bool) HTMLVideo

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLVideo

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLVideo

	// Controls specifies that audio/video controls should be displayed (such as a play/pause button etc).
	Controls(v bool) HTMLVideo

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLVideo

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLVideo

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLVideo

	// Height specifies the height of the element (in pixels).
	Height(v int) HTMLVideo

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLVideo

	// ID specifies a unique id for an element.
	ID(v string) HTMLVideo

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLVideo

	// Loop specifies that the audio/video will start over again, every time it is finished.
	Loop(v bool) HTMLVideo

	// Muted specifies that the audio output of the video should be muted.
	Muted(v bool) HTMLVideo

	// Poster specifies an image to be shown while the video is downloading, or until the user hits the play button.
	Poster(v string) HTMLVideo

	// Preload specifies if and how the author thinks the audio/video should be loaded when the page loads.
	Preload(v string) HTMLVideo

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLVideo

	// Src specifies the URL of the media file.
	Src(v string) HTMLVideo

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLVideo

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLVideo

	// Title specifies extra information about an element.
	Title(v string) HTMLVideo

	// Width specifies the width of the element.
	Width(v int) HTMLVideo

	// OnAbort calls the given handler on abort.
	OnAbort(h EventHandler) HTMLVideo

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLVideo

	// OnCanPlay calls the given handler when a file is ready to start playing (when it has buffered enough to begin).
	OnCanPlay(h EventHandler) HTMLVideo

	// OnCanPlayThrough calls the given handler when a file can be played all the way to the end without pausing for buffering.
	OnCanPlayThrough(h EventHandler) HTMLVideo

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLVideo

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLVideo

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLVideo

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLVideo

	// OnCueChange calls the given handler when the cue changes in a track element.
	OnCueChange(h EventHandler) HTMLVideo

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLVideo

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLVideo

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLVideo

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLVideo

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLVideo

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLVideo

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLVideo

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLVideo

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLVideo

	// OnDurationChange calls the given handler when the length of the media changes.
	OnDurationChange(h EventHandler) HTMLVideo

	// OnEmptied calls the given handler when something bad happens and the file is suddenly unavailable (like unexpectedly disconnects).
	OnEmptied(h EventHandler) HTMLVideo

	// OnEnded calls the given handler when the media has reach the end.
	OnEnded(h EventHandler) HTMLVideo

	// OnError calls the given handler when an error occurs.
	OnError(h EventHandler) HTMLVideo

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLVideo

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLVideo

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLVideo

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLVideo

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLVideo

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLVideo

	// OnLoadStart calls the given handler just as the file begins to load before anything is actually loaded.
	OnLoadStart(h EventHandler) HTMLVideo

	// OnLoadedData calls the given handler when media data is loaded.
	OnLoadedData(h EventHandler) HTMLVideo

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLVideo

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLVideo

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLVideo

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLVideo

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLVideo

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLVideo

	// OnPause calls the given handler when the media is paused either by the user or programmatically.
	OnPause(h EventHandler) HTMLVideo

	// OnPlay calls the given handler when the media is ready to start playing.
	OnPlay(h EventHandler) HTMLVideo

	// OnPlaying calls the given handler when the media actually has started playing.
	OnPlaying(h EventHandler) HTMLVideo

	// OnProgress calls the given handler when the browser is in the process of getting the media data.
	OnProgress(h EventHandler) HTMLVideo

	// OnRateChange calls the given handler each time the playback rate changes (like when a user switches to a slow motion or fast forward mode).
	OnRateChange(h EventHandler) HTMLVideo

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLVideo

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLVideo

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLVideo

	// OnSeeked calls the given handler when the seeking attribute is set to false indicating that seeking has ended.
	OnSeeked(h EventHandler) HTMLVideo

	// OnSeeking calls the given handler when the seeking attribute is set to true indicating that seeking is active.
	OnSeeking(h EventHandler) HTMLVideo

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLVideo

	// OnStalled calls the given handler when the browser is unable to fetch the media data for whatever reason.
	OnStalled(h EventHandler) HTMLVideo

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLVideo

	// OnSuspend calls the given handler when fetching the media data is stopped before it is completely loaded for whatever reason.
	OnSuspend(h EventHandler) HTMLVideo

	// OnTimeUpdate calls the given handler when the playing position has changed (like when the user fast forwards to a different point in the media).
	OnTimeUpdate(h EventHandler) HTMLVideo

	// OnVolumeChange calls the given handler each time the volume is changed which (includes setting the volume to "mute").
	OnVolumeChange(h EventHandler) HTMLVideo

	// OnWaiting calls the given handler when the media has paused but is expected to resume (like when the media pauses to buffer more data).
	OnWaiting(h EventHandler) HTMLVideo

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLVideo

	// OnloadedMetaData calls the given handler when meta data (like dimensions and duration) are loaded.
	OnloadedMetaData(h EventHandler) HTMLVideo
}

// Video returns an HTML element that defines a video or movie.
func Video() HTMLVideo {
	e := &htmlVideo{
		elem: elem{
			tag:         "video",
			selfClosing: false,
		},
	}

	return e
}

type htmlVideo struct {
	elem
}

func (e *htmlVideo) Body(elems ...UI) HTMLVideo {
	e.setBody(elems...)
	return e
}

func (e *htmlVideo) Text(v interface{}) HTMLVideo {
	return e.Body(Text(v))
}

func (e *htmlVideo) AccessKey(v string) HTMLVideo {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlVideo) Aria(k string, v interface{}) HTMLVideo {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlVideo) AutoPlay(v bool) HTMLVideo {
	e.setAttr("autoplay", v)
	return e
}

func (e *htmlVideo) Class(v string) HTMLVideo {
	e.setAttr("class", v)
	return e
}

func (e *htmlVideo) ContentEditable(v bool) HTMLVideo {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlVideo) Controls(v bool) HTMLVideo {
	e.setAttr("controls", v)
	return e
}

func (e *htmlVideo) DataSet(k string, v interface{}) HTMLVideo {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlVideo) Dir(v string) HTMLVideo {
	e.setAttr("dir", v)
	return e
}

func (e *htmlVideo) Draggable(v bool) HTMLVideo {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlVideo) Height(v int) HTMLVideo {
	e.setAttr("height", v)
	return e
}

func (e *htmlVideo) Hidden(v bool) HTMLVideo {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlVideo) ID(v string) HTMLVideo {
	e.setAttr("id", v)
	return e
}

func (e *htmlVideo) Lang(v string) HTMLVideo {
	e.setAttr("lang", v)
	return e
}

func (e *htmlVideo) Loop(v bool) HTMLVideo {
	e.setAttr("loop", v)
	return e
}

func (e *htmlVideo) Muted(v bool) HTMLVideo {
	e.setAttr("muted", v)
	return e
}

func (e *htmlVideo) Poster(v string) HTMLVideo {
	e.setAttr("poster", v)
	return e
}

func (e *htmlVideo) Preload(v string) HTMLVideo {
	e.setAttr("preload", v)
	return e
}

func (e *htmlVideo) Spellcheck(v bool) HTMLVideo {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlVideo) Src(v string) HTMLVideo {
	e.setAttr("src", StaticResource(v))
	return e
}

func (e *htmlVideo) Style(k, v string) HTMLVideo {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlVideo) TabIndex(v int) HTMLVideo {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlVideo) Title(v string) HTMLVideo {
	e.setAttr("title", v)
	return e
}

func (e *htmlVideo) Width(v int) HTMLVideo {
	e.setAttr("width", v)
	return e
}

func (e *htmlVideo) OnAbort(h EventHandler) HTMLVideo {
	e.setEventHandler("abort", h)
	return e
}

func (e *htmlVideo) OnBlur(h EventHandler) HTMLVideo {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlVideo) OnCanPlay(h EventHandler) HTMLVideo {
	e.setEventHandler("canplay", h)
	return e
}

func (e *htmlVideo) OnCanPlayThrough(h EventHandler) HTMLVideo {
	e.setEventHandler("canplaythrough", h)
	return e
}

func (e *htmlVideo) OnChange(h EventHandler) HTMLVideo {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlVideo) OnClick(h EventHandler) HTMLVideo {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlVideo) OnContextMenu(h EventHandler) HTMLVideo {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlVideo) OnCopy(h EventHandler) HTMLVideo {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlVideo) OnCueChange(h EventHandler) HTMLVideo {
	e.setEventHandler("cuechange", h)
	return e
}

func (e *htmlVideo) OnCut(h EventHandler) HTMLVideo {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlVideo) OnDblClick(h EventHandler) HTMLVideo {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlVideo) OnDrag(h EventHandler) HTMLVideo {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlVideo) OnDragEnd(h EventHandler) HTMLVideo {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlVideo) OnDragEnter(h EventHandler) HTMLVideo {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlVideo) OnDragLeave(h EventHandler) HTMLVideo {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlVideo) OnDragOver(h EventHandler) HTMLVideo {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlVideo) OnDragStart(h EventHandler) HTMLVideo {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlVideo) OnDrop(h EventHandler) HTMLVideo {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlVideo) OnDurationChange(h EventHandler) HTMLVideo {
	e.setEventHandler("durationchange", h)
	return e
}

func (e *htmlVideo) OnEmptied(h EventHandler) HTMLVideo {
	e.setEventHandler("emptied", h)
	return e
}

func (e *htmlVideo) OnEnded(h EventHandler) HTMLVideo {
	e.setEventHandler("ended", h)
	return e
}

func (e *htmlVideo) OnError(h EventHandler) HTMLVideo {
	e.setEventHandler("error", h)
	return e
}

func (e *htmlVideo) OnFocus(h EventHandler) HTMLVideo {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlVideo) OnInput(h EventHandler) HTMLVideo {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlVideo) OnInvalid(h EventHandler) HTMLVideo {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlVideo) OnKeyDown(h EventHandler) HTMLVideo {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlVideo) OnKeyPress(h EventHandler) HTMLVideo {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlVideo) OnKeyup(h EventHandler) HTMLVideo {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlVideo) OnLoadStart(h EventHandler) HTMLVideo {
	e.setEventHandler("loadstart", h)
	return e
}

func (e *htmlVideo) OnLoadedData(h EventHandler) HTMLVideo {
	e.setEventHandler("loadeddata", h)
	return e
}

func (e *htmlVideo) OnMouseDown(h EventHandler) HTMLVideo {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlVideo) OnMouseMove(h EventHandler) HTMLVideo {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlVideo) OnMouseOut(h EventHandler) HTMLVideo {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlVideo) OnMouseOver(h EventHandler) HTMLVideo {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlVideo) OnMouseUp(h EventHandler) HTMLVideo {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlVideo) OnPaste(h EventHandler) HTMLVideo {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlVideo) OnPause(h EventHandler) HTMLVideo {
	e.setEventHandler("pause", h)
	return e
}

func (e *htmlVideo) OnPlay(h EventHandler) HTMLVideo {
	e.setEventHandler("play", h)
	return e
}

func (e *htmlVideo) OnPlaying(h EventHandler) HTMLVideo {
	e.setEventHandler("playing", h)
	return e
}

func (e *htmlVideo) OnProgress(h EventHandler) HTMLVideo {
	e.setEventHandler("progress", h)
	return e
}

func (e *htmlVideo) OnRateChange(h EventHandler) HTMLVideo {
	e.setEventHandler("ratechange", h)
	return e
}

func (e *htmlVideo) OnReset(h EventHandler) HTMLVideo {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlVideo) OnScroll(h EventHandler) HTMLVideo {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlVideo) OnSearch(h EventHandler) HTMLVideo {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlVideo) OnSeeked(h EventHandler) HTMLVideo {
	e.setEventHandler("seeked", h)
	return e
}

func (e *htmlVideo) OnSeeking(h EventHandler) HTMLVideo {
	e.setEventHandler("seeking", h)
	return e
}

func (e *htmlVideo) OnSelect(h EventHandler) HTMLVideo {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlVideo) OnStalled(h EventHandler) HTMLVideo {
	e.setEventHandler("stalled", h)
	return e
}

func (e *htmlVideo) OnSubmit(h EventHandler) HTMLVideo {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlVideo) OnSuspend(h EventHandler) HTMLVideo {
	e.setEventHandler("suspend", h)
	return e
}

func (e *htmlVideo) OnTimeUpdate(h EventHandler) HTMLVideo {
	e.setEventHandler("timeupdate", h)
	return e
}

func (e *htmlVideo) OnVolumeChange(h EventHandler) HTMLVideo {
	e.setEventHandler("volumechange", h)
	return e
}

func (e *htmlVideo) OnWaiting(h EventHandler) HTMLVideo {
	e.setEventHandler("waiting", h)
	return e
}

func (e *htmlVideo) OnWheel(h EventHandler) HTMLVideo {
	e.setEventHandler("wheel", h)
	return e
}

func (e *htmlVideo) OnloadedMetaData(h EventHandler) HTMLVideo {
	e.setEventHandler("loadedmetadata", h)
	return e
}

// HTMLWbr is the interface that describes a <wbr> HTML element.
type HTMLWbr interface {
	UI

	// Body set the content of the element.
	Body(elems ...UI) HTMLWbr

	// Text sets the content of the element with a text node containing the stringified given value.
	Text(v interface{}) HTMLWbr

	// AccessKey specifies a shortcut key to activate/focus an element.
	AccessKey(v string) HTMLWbr

	// Aria stores accessible rich internet applications (ARIA) data.
	Aria(k string, v interface{}) HTMLWbr

	// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
	Class(v string) HTMLWbr

	// ContentEditable specifies whether the content of an element is editable or not.
	ContentEditable(v bool) HTMLWbr

	// DataSet stores custom data private to the page or application.
	DataSet(k string, v interface{}) HTMLWbr

	// Dir specifies the text direction for the content in an element.
	Dir(v string) HTMLWbr

	// Draggable specifies whether an element is draggable or not.
	Draggable(v bool) HTMLWbr

	// Hidden specifies that an element is not yet, or is no longer relevant.
	Hidden(v bool) HTMLWbr

	// ID specifies a unique id for an element.
	ID(v string) HTMLWbr

	// Lang specifies the language of the element's content.
	Lang(v string) HTMLWbr

	// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
	Spellcheck(v bool) HTMLWbr

	// Style specifies a CSS style for an element. Can be called multiple times to set multiple css styles.
	Style(k, v string) HTMLWbr

	// TabIndex specifies the tabbing order of an element.
	TabIndex(v int) HTMLWbr

	// Title specifies extra information about an element.
	Title(v string) HTMLWbr

	// OnBlur calls the given handler when the element loses focus.
	OnBlur(h EventHandler) HTMLWbr

	// OnChange calls the given handler when the value of the element is changed.
	OnChange(h EventHandler) HTMLWbr

	// OnClick calls the given handler when there is a mouse click on the element.
	OnClick(h EventHandler) HTMLWbr

	// OnContextMenu calls the given handler when a context menu is triggered.
	OnContextMenu(h EventHandler) HTMLWbr

	// OnCopy calls the given handler when the user copies the content of an element.
	OnCopy(h EventHandler) HTMLWbr

	// OnCut calls the given handler when the user cuts the content of an element.
	OnCut(h EventHandler) HTMLWbr

	// OnDblClick calls the given handler when there is a mouse double-click on the element.
	OnDblClick(h EventHandler) HTMLWbr

	// OnDrag calls the given handler when an element is dragged.
	OnDrag(h EventHandler) HTMLWbr

	// OnDragEnd calls the given handler at the end of a drag operation.
	OnDragEnd(h EventHandler) HTMLWbr

	// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
	OnDragEnter(h EventHandler) HTMLWbr

	// OnDragLeave calls the given handler when an element leaves a valid drop target.
	OnDragLeave(h EventHandler) HTMLWbr

	// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
	OnDragOver(h EventHandler) HTMLWbr

	// OnDragStart calls the given handler at the start of a drag operation.
	OnDragStart(h EventHandler) HTMLWbr

	// OnDrop calls the given handler when dragged element is being dropped.
	OnDrop(h EventHandler) HTMLWbr

	// OnFocus calls the given handler when the element gets focus.
	OnFocus(h EventHandler) HTMLWbr

	// OnInput calls the given handler when an element gets user input.
	OnInput(h EventHandler) HTMLWbr

	// OnInvalid calls the given handler when an element is invalid.
	OnInvalid(h EventHandler) HTMLWbr

	// OnKeyDown calls the given handler when a user is pressing a key.
	OnKeyDown(h EventHandler) HTMLWbr

	// OnKeyPress calls the given handler when a user presses a key.
	OnKeyPress(h EventHandler) HTMLWbr

	// OnKeyup calls the given handler when a user releases a key.
	OnKeyup(h EventHandler) HTMLWbr

	// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
	OnMouseDown(h EventHandler) HTMLWbr

	// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
	OnMouseMove(h EventHandler) HTMLWbr

	// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
	OnMouseOut(h EventHandler) HTMLWbr

	// OnMouseOver calls the given handler when the mouse pointer moves over an element.
	OnMouseOver(h EventHandler) HTMLWbr

	// OnMouseUp calls the given handler when a mouse button is released over an element.
	OnMouseUp(h EventHandler) HTMLWbr

	// OnPaste calls the given handler when the user pastes some content in an element.
	OnPaste(h EventHandler) HTMLWbr

	// OnReset calls the given handler when the Reset button in a form is clicked.
	OnReset(h EventHandler) HTMLWbr

	// OnScroll calls the given handler when an element's scrollbar is being scrolled.
	OnScroll(h EventHandler) HTMLWbr

	// OnSearch calls the given handler when the user writes something in a search field.
	OnSearch(h EventHandler) HTMLWbr

	// OnSelect calls the given handler after some text has been selected in an element.
	OnSelect(h EventHandler) HTMLWbr

	// OnSubmit calls the given handler when a form is submitted.
	OnSubmit(h EventHandler) HTMLWbr

	// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
	OnWheel(h EventHandler) HTMLWbr
}

// Wbr returns an HTML element that defines a possible line-break.
func Wbr() HTMLWbr {
	e := &htmlWbr{
		elem: elem{
			tag:         "wbr",
			selfClosing: false,
		},
	}

	return e
}

type htmlWbr struct {
	elem
}

func (e *htmlWbr) Body(elems ...UI) HTMLWbr {
	e.setBody(elems...)
	return e
}

func (e *htmlWbr) Text(v interface{}) HTMLWbr {
	return e.Body(Text(v))
}

func (e *htmlWbr) AccessKey(v string) HTMLWbr {
	e.setAttr("accesskey", v)
	return e
}

func (e *htmlWbr) Aria(k string, v interface{}) HTMLWbr {
	e.setAttr("aria-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlWbr) Class(v string) HTMLWbr {
	e.setAttr("class", v)
	return e
}

func (e *htmlWbr) ContentEditable(v bool) HTMLWbr {
	e.setAttr("contenteditable", v)
	return e
}

func (e *htmlWbr) DataSet(k string, v interface{}) HTMLWbr {
	e.setAttr("data-"+k, fmt.Sprintf("%v", v))
	return e
}

func (e *htmlWbr) Dir(v string) HTMLWbr {
	e.setAttr("dir", v)
	return e
}

func (e *htmlWbr) Draggable(v bool) HTMLWbr {
	e.setAttr("draggable", v)
	return e
}

func (e *htmlWbr) Hidden(v bool) HTMLWbr {
	e.setAttr("hidden", v)
	return e
}

func (e *htmlWbr) ID(v string) HTMLWbr {
	e.setAttr("id", v)
	return e
}

func (e *htmlWbr) Lang(v string) HTMLWbr {
	e.setAttr("lang", v)
	return e
}

func (e *htmlWbr) Spellcheck(v bool) HTMLWbr {
	s := "false"
	if v {
		s = "true"
	}

	e.setAttr("spellcheck", s)
	return e
}

func (e *htmlWbr) Style(k, v string) HTMLWbr {
	e.setAttr("style", k+":"+v)
	return e
}

func (e *htmlWbr) TabIndex(v int) HTMLWbr {
	e.setAttr("tabindex", v)
	return e
}

func (e *htmlWbr) Title(v string) HTMLWbr {
	e.setAttr("title", v)
	return e
}

func (e *htmlWbr) OnBlur(h EventHandler) HTMLWbr {
	e.setEventHandler("blur", h)
	return e
}

func (e *htmlWbr) OnChange(h EventHandler) HTMLWbr {
	e.setEventHandler("change", h)
	return e
}

func (e *htmlWbr) OnClick(h EventHandler) HTMLWbr {
	e.setEventHandler("click", h)
	return e
}

func (e *htmlWbr) OnContextMenu(h EventHandler) HTMLWbr {
	e.setEventHandler("contextmenu", h)
	return e
}

func (e *htmlWbr) OnCopy(h EventHandler) HTMLWbr {
	e.setEventHandler("copy", h)
	return e
}

func (e *htmlWbr) OnCut(h EventHandler) HTMLWbr {
	e.setEventHandler("cut", h)
	return e
}

func (e *htmlWbr) OnDblClick(h EventHandler) HTMLWbr {
	e.setEventHandler("dblclick", h)
	return e
}

func (e *htmlWbr) OnDrag(h EventHandler) HTMLWbr {
	e.setEventHandler("drag", h)
	return e
}

func (e *htmlWbr) OnDragEnd(h EventHandler) HTMLWbr {
	e.setEventHandler("dragend", h)
	return e
}

func (e *htmlWbr) OnDragEnter(h EventHandler) HTMLWbr {
	e.setEventHandler("dragenter", h)
	return e
}

func (e *htmlWbr) OnDragLeave(h EventHandler) HTMLWbr {
	e.setEventHandler("dragleave", h)
	return e
}

func (e *htmlWbr) OnDragOver(h EventHandler) HTMLWbr {
	e.setEventHandler("dragover", h)
	return e
}

func (e *htmlWbr) OnDragStart(h EventHandler) HTMLWbr {
	e.setEventHandler("dragstart", h)
	return e
}

func (e *htmlWbr) OnDrop(h EventHandler) HTMLWbr {
	e.setEventHandler("drop", h)
	return e
}

func (e *htmlWbr) OnFocus(h EventHandler) HTMLWbr {
	e.setEventHandler("focus", h)
	return e
}

func (e *htmlWbr) OnInput(h EventHandler) HTMLWbr {
	e.setEventHandler("input", h)
	return e
}

func (e *htmlWbr) OnInvalid(h EventHandler) HTMLWbr {
	e.setEventHandler("invalid", h)
	return e
}

func (e *htmlWbr) OnKeyDown(h EventHandler) HTMLWbr {
	e.setEventHandler("keydown", h)
	return e
}

func (e *htmlWbr) OnKeyPress(h EventHandler) HTMLWbr {
	e.setEventHandler("keypress", h)
	return e
}

func (e *htmlWbr) OnKeyup(h EventHandler) HTMLWbr {
	e.setEventHandler("keyup", h)
	return e
}

func (e *htmlWbr) OnMouseDown(h EventHandler) HTMLWbr {
	e.setEventHandler("mousedown", h)
	return e
}

func (e *htmlWbr) OnMouseMove(h EventHandler) HTMLWbr {
	e.setEventHandler("mousemove", h)
	return e
}

func (e *htmlWbr) OnMouseOut(h EventHandler) HTMLWbr {
	e.setEventHandler("mouseout", h)
	return e
}

func (e *htmlWbr) OnMouseOver(h EventHandler) HTMLWbr {
	e.setEventHandler("mouseover", h)
	return e
}

func (e *htmlWbr) OnMouseUp(h EventHandler) HTMLWbr {
	e.setEventHandler("mouseup", h)
	return e
}

func (e *htmlWbr) OnPaste(h EventHandler) HTMLWbr {
	e.setEventHandler("paste", h)
	return e
}

func (e *htmlWbr) OnReset(h EventHandler) HTMLWbr {
	e.setEventHandler("reset", h)
	return e
}

func (e *htmlWbr) OnScroll(h EventHandler) HTMLWbr {
	e.setEventHandler("scroll", h)
	return e
}

func (e *htmlWbr) OnSearch(h EventHandler) HTMLWbr {
	e.setEventHandler("search", h)
	return e
}

func (e *htmlWbr) OnSelect(h EventHandler) HTMLWbr {
	e.setEventHandler("select", h)
	return e
}

func (e *htmlWbr) OnSubmit(h EventHandler) HTMLWbr {
	e.setEventHandler("submit", h)
	return e
}

func (e *htmlWbr) OnWheel(h EventHandler) HTMLWbr {
	e.setEventHandler("wheel", h)
	return e
}
